[
    {
        "uri": "/../resources/_index",
        "title": "Resources",
        "content": "\nSeeing is doing, so come and learn how to do things. In this section of the site, you will find various resources to help including tutorials, videos, articles, and presentations.\n",
        "tags": []
    },
    {
        "uri": "/../resources/article-20151109",
        "title": "Why Integration requires a combination of linking and syncing",
        "content": "\nIn this article, Tasktop explores the strengths of Open Services for Lifecycle Collaboration (OSLC) and some of the areas of improvement. The conclusion is that flexibility and value are what drive integration decisions.\n\nRead\n",
        "tags": [
            "article",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/article-20170715",
        "title": "Debunking the OSLC Link-Only Myth",
        "content": "\nMost large organizations require dozens and sometimes hundreds of specialized software tools to manage the lifecycle of the physical products or software applications they create. It isn't hard to imagine the monumental waste these organizations incur in attempting to manually coordinate the efforts of the teams that use these many disparate tools to create a single product. Open Services for Lifecycle Collaboration (OSLC) is an open community for creating specifications for integrating lifecycle activities across tools to address this problem. Now imagine how much more happy and productive an organization would be if all those tools could integrate via standard interfaces. In broad strokes, this is the goal of the OSLC community.\n\nRead\n",
        "tags": [
            "article",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/developing-oslc-applications",
        "title": "Developing OSLC Applications",
        "content": "\nGet started with developing OSLC applications\n\n“OSL-whaaaat now?”\n\nOpen Services for Lifecycle Collaboration (OSLC) is a community that writes specifications to integrate software. Learn more at Why develop OSLC applications and at our main site.\n\nFor a high-level overview of how to add OSLC support to software, we recommend our video \"Getting started on implementing OSLC\":\n\n{{ youtube -oXqudLmNMI }}\n\nThe description on YouTube includes a table of contents and links to references.\n\n Explore our tutorial\n\nFor a more detailed look at what goes into OSLC support, read through our tutorial \"Integrating Products with OSLC\", which walks you through building an adapter that adds OSLC support to the popular Bugzilla defect-tracking software.\n\nThe concepts in the tutorial are broadly applicable to other software.\n\nIf you're building an OSLC provider (in other words, software that outputs OSLC resources), you'll learn how to\n\nProvide Service Providers and catalogs\nRepresent Bugzilla bugs as OSLC Change Management resources\nProvide UI Previews\nProvide a delegated UI for finding existing bugs\nProvide a delegated UI for creating new bugs\nAllow software to programmatically create new bugs\n\nIf you're building an OSLC consumer application, you'll learn how to:\n\nLink to OSLC resources in another application and display previews\nFind, select, and create bugs without leaving the application with delegated UIs\nParse OSLC resources\nCreate new bugs automatically\n\nThe tutorial has working sample applications and detailed instructions for running them.\n\nWhy develop OSLC applications\n\nIntegrating software is hard; we want it to be easier. And we need your help.\n\nWe define standardized ways to represent common resources in software development (for example, a defect or a performance test). We also define standardized methods to allow other applications to access, display, preview, find, create, and update those resources.\n\nWith standardized resources and methods, any tool can access and manipulate the data and artifacts from any other compliant tool. So instead of a variety of fragile point-to-point integrations you have one common way to connect and integrate many products. It's not quite plug-and-play, but it's close.\n\nWe want OSLC to succeed because better and easier integrations will save everyone time and money. And we think that software with OSLC integration has a competitive advantage.\n\nDon't just take our word for it. Icaro Technologies estimated that they could have saved two million dollars over two years if they used OSLC standards for a project with more than 10 integrations. And major industry groups like SPRINT and EADS have decided that OSLC-compliant software can help them collaborate and verify requirements on highly complex products like commercial airplanes.\n\nOSLC specifications are free to adopt, and we want them to spread. So help us out!\n\n Technical foundations\n\nTo build software that supports OSLC, you should be familiar with the following concepts:\n\nLinked Data\n\nLinked data is the main technical foundation of all of our specifications. The video below provides a brief overview of the value of linked data and how we implement it with OSLC:\n\n{{ youtube 40mjwqGEKBU }}\n\nIf you're new to linked data and RDF, we've put together a playlist of videos that can help you catch up.\n\n RESTful web architecture and HTTP\n\nYou should be familiar with designing RESTful applications.\n\nFor a quick primer, we recommend “Learn REST” by Dr. M. Elkstein, particularly these sections:\n\nWhat is REST?\nREST as Lightweight Web Services\nHow Simple is REST?\nMore Complex REST Requests\nREST Server Responses\n\nFor OSLC implementations, you must use HTTP protocol.\n\nRDF, Turtle, JSON, and HTML\n\nWe require services and resources to be represented in RDF, but you might prefer to supplement that with a variety of machine-readable and human-readable formats like Turtle, JSON, or HTML.\n\nInstead of string parsing and regular expressions, you will definitely want to explore using an RDF parser such as Apache Jena.\n\n OAuth\n\nOSLC does not require OAuth, but it is the most common approach for managing authentication between clients.\n\nServices, resources and design patterns\n\nThe OSLC Core specification defines the basic patterns and protocols that any OSLC software must implement. The other workgroups define additional resources or extend existing ones, but they do not add new protocols.\n\nHere are the major resources defined in the OSLC Core specification:\n\n| Resource or Pattern | Description | More information |\n|----------|----------------------|--------------------|\n| Service Provider | A resource that describes a collection of resources and tells you how to create new resources, find existing resources, or expose a user interface to do either | OSLC Primer: Service Provider |\n| Resource Paging | A pattern to break long lists of resources into smaller pages, and provide a URL for the next page | OSLC Primer: Resource Paging |\n| Queries | Standard query string patterns to retrieve a subset of resources or properties | OSLC Primer: Query mechanisms |\n| Resource Shapes | Documents that define and describe the properties a resources should have, including acceptable values, cardinality, and whether or not those properties are required | OSLC Primer: Resource Shapes |\n| Creation Factory | A service that creates new resources and (via HTTP POST) and may also provide the Resource Shape for new resources | Core 2.0: Creation Factories |\n| Service Provider Catalog | A resources that lists a set of ServiceProviders | OSLC Primer: ServiceProvider |\n| Delegated User Interface (UI) dialogs | A method for embedding an interface to create or find resources inside another tool | OSLC Primer: Delegated UI dialogs |\n| UI Previews | A method for discovering and displaying a preview of a resource in another tool | OSLC Primer: UI Preview |\n\nTo explore some of our other specifications, the OSLC Core Workgroup maintains a list of OSLC vocabularies and specifications that includes relationship diagrams.\n\n Tools & SDKs\n\nEclipse Lyo\n\nThe Eclipse Lyo project has a variety of tools to help you adopt OSLC specifications:\n\nOSLC4J: a Java SDK for OSLC providers and consumers that lets you define OSLC resources and convert them to Java objects\nPerl libraries and samples: modules for Perl for interacting with OSLC providers, including the Net-OSLC PERL library\nTest Suites: test if your OSLC applications complies with the requirements of our specifications\nTracked Resource Set SDK: a test suite, toolkit, and sample application for the Tracked Resource Set specification\n\nYou do not have to use the Eclipse application to use Eclipse Lyo: Although much of the documentation assumes you will be using Eclipse, the source code is available in a Git repository and much of it does not require the Eclipse application to work.\n\n Sample applications and code\n\nIf you'd like to explore some existing code, there are a variety of samples and existing applications available.\n\nThe Communications Workgroup has a list of Open Source OSLC projects (along with their licenses).\n\nIf you'd like to explore a basic application that provides OSLC Service Provider resources and UI previews, Vijay Kalangumvathakkal of developerWorks has some simple applications available to download and try out.\n\nOur tutorial walks you through a working adapter that adds OSLC Change Management support to Bugzilla and a simple consumer application.\n\nFinally, many of the software development kits include sample applications. The OSLC4J component of Eclipse Lyo has a variety of applications:\n\na stock quote sample applications\na Change Management provider\na Quality Management provider\nan Automation provider\nthe aforementioned Bugzilla Change Management adapter\n\nThe Lyo Client component in Eclipse Lyo includes additional APIs and sample code that addresses a variety of common OSLC use cases including login, OAuth, service discovery, and queries.\n\nThe OSLC4Net project includes sample applications if you favor .NET/C#.\n\nOSLC Open Source Node.js Projects\n\nEclipse/Lyo provides a set of Java based APIs and generative tools to support the creation of OSLC domain servers and integrated client applications. While Eclipse/Lyo provides a very rich and robust platfrom for OSLC development, it has a relatively high learning curve and that can increase development time, costs and risks.\n\nOSLC4JS represents a set of related Open Source projects supporting the creation and integration of OSLC based client and server applications that leverage the dynamic and asynchronous capabilities of JavaScript and Node.js. The LDP Service and OSLC Service projects provide Express.js middleware components that can be used to add LDP and/or OSLC services to any Express Web application. The OSLC Browser and OSLC Server projects use these services to create sample OSLC client and server apps that can easily and dynamically adapted to any OSLC domain, extensions to domains, and/or integrations between domains.\n\nOSLC4JS's goal is to minimize the cost of developing the OSLC specifications, reference implementation and test suites. The OASIS OSLC specifications would also benefit from a reference implementation in dynamic language such as JavaScript.\n\n The OSLC4JS Projects\n\nThe following sections provide a brief description of each OSLC4J sub-project and provide links to the development sites and related work products. The figure below shows the relationship between the modules created in the projects, and how they are assembled into a Web application.\n\nAdapter middleware in the figure represents some Express.js middleware component that provides CRUD access to some existing data source. This provides a simple way for vendors to provide OSLC access to their data sources without having to implement the details of OSLC and/or LDP.\n\nA oslc4js Slack Channel has been created to facilitate collaborative development of these Open Source Projects.\n\n| Project | Description | More information |\n|---------|------------ |------------------|\n| OSLC Browser | A sample OSLC Web application that uses the OSLC Service to provide a means of browsing OSLC resources. OSLC Browser allows you to configure a connection pool of contributing OSLC servers, and provides a convenient means of browsing the content contributed by those servers. The federation of thigs information is supported by the OSLC service with can also support OSLC domains, extension to domains, integration between domains. This allows the OSLC Browser to act as a federation hub for OSLC resources where stakeholder viewpoints, views (i.e., active dashboards) can be created to support integration needs. | Mural Design Wiki Track & Plan Bluemix App app route |\n| OSLC Client API | A simple Node.js asynchronous OSLC client API to facilitate rich application development in JavaScript. This API may be attractive to client developers who wish to access OSLC capabilities and resources through a more logical API abstraction rather than more raw REST services. | Wiki Track & Plan npm package|\n| OSLC Service | A generic Node.js Express middleware OSLC 3.0 service that can support any domain and can be easily adapted to any applicable data source. This services also utilizes the LDP Service. | Wiki Track & Plan npm package |\n| OSLC Server | A minimal OSLC server that uses the oslc-service and ldp-service and can be accessed using a browser REST client. An instance of this server is deployed to IBM Bluemix in order to provide a platform for OSLC experimentation and testing. | Wiki Track & Plan Bluemix App app route |\n| LDP App | A sample Linked Data Platform (LDP) Web application that uses the LDP Service and supports CRUD operations and a graph of linked data. | Wiki Track & Plan Bluemix App app route |\n| LDP Service | Express middleware providing LDP capabilities to Web apps, with storage of JSON-DL in MongoDB. | Wiki Track & Plan npm package |\n",
        "tags": [
            "tutorial"
        ]
    },
    {
        "uri": "/../resources/example-tutorial",
        "title": "Example tutorial",
        "content": "\nA title of section\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\n This is a subsection\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\nAnd this is another\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\n I like code\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\nimport { Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({})\nclass ExampleComponent implements OnInit {\n  @Input()\n  person: Person;\n}\n\nAnother title of section\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\n I like to paste\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\nHow many titles of sections we can have\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\n This is also a section\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\nSections sections\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!",
        "tags": [
            "tutorial"
        ]
    },
    {
        "uri": "/../resources/get-started-with-developing-oslc-applications",
        "title": "Get started with developing OSLC applications",
        "content": "“OSL-whaaaat now?”\n\nOpen Services for Lifecycle Collaboration (OSLC) is a community that writes specifications to integrate software. Learn more at Why develop OSLC applications and at our main site.\n\nFor a high-level overview of how to add OSLC support to software, we recommend our video \"Getting started on implementing OSLC\":\n\nThe description on YouTube includes a table of contents and links to references.\n\nExplore our tutorial\n\nFor a more detailed look at what goes into OSLC support, read through our tutorial \"Integrating Products with OSLC\", which walks you through building an adapter that adds OSLC support to the popular Bugzilla defect-tracking software.\n\nThe concepts in the tutorial are broadly applicable to other software.\n\nIf you're building an OSLC provider (in other words, software that outputs OSLC resources), you'll learn how to\n\nProvide Service Providers and catalogs\nRepresent Bugzilla bugs as OSLC Change Management resources\nProvide UI Previews\nProvide a delegated UI for finding existing bugs\nProvide a delegated UI for creating new bugs\nAllow software to programmatically create new bugs\nIf you're building an OSLC consumer application, you'll learn how to:\n\nLink to OSLC resources in another application and display previews\nFind, select, and create bugs without leaving the application with delegated UIs\nParse OSLC resources\nCreate new bugs automatically\nThe tutorial has working sample applications and detailed instructions for running them.",
        "tags": [
            "tutorial"
        ]
    },
    {
        "uri": "/../resources/oslc4js",
        "title": "OSLC4JS",
        "content": "\nOSLC4JS is a set of related open source projects that support the creation and integration of Open Services for Lifecycle Collaboration (OSLC)-based client and server applications that leverage JavaScript and Node.js capabilities. OSLC4JS projects cover the complete end-to-end capabilities required to build, extend, and integrate web apps that exploit OSLC integration capabilities and linked data resources.\n\nWhy should I contribute?\n\nBecause you’ll see a lot of benefits. Developers will find that it makes it easy to add OSLC capabilities to any Node or Express Web application, including client and server components of that application. It will help you extend and integrate OSLC applications to support end-user scenarios and comprehensive cross-tool governance. \n\nGo\n",
        "tags": [
            "tool",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/presentation-20171109",
        "title": "Tasktop: Helping a Center of Excellence live up to its name",
        "content": "\nTasktop Sync Case Study on enabling the customer to increase both velocity AND quality.\n\nView\n",
        "tags": [
            "presentation",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/presentation-20171117",
        "title": "PROSTEP OpenPDM OSLC Adapter Product Overview",
        "content": "\nThe PROSTEP OpenPDM OSLC Adapter makes your PLM system(s) available to the OSLC world. It offers OSLC standard services, especially for those PLM systems which don’t  offer native ones. The adapter is an add-on for the OpenPDM integration framework which provides connectors to a wide range of systems. The OpenPDM OSLC services can be integrated in any OSLC consuming applications. The gap between ALM and PLM can be closed.\n\nThis presentation provides details on the OpenPDM OSLC Adapter including overview, reference project and technical information. For more details  contact infocenter@prostep.com. \n\nDownload\n",
        "tags": [
            "presentation",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/tool-20111111",
        "title": "Eclipse Lyo",
        "content": "\nThe Eclipse Lyo project focuses on providing an SDK to help the Eclipse community to adopt OSLC specifications and build OSLC-compliant tools. The source code is available in a Git repository.\n\nOSLC4J: A Java toolkit to help you build OSLC-ready Java applications\nTest suites: Verify that your OSLC implementations are compliant with the specifications\nReference Implementations: See how OSLC functions with working samples\n\nGo\n",
        "tags": [
            "tool",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/tool-20130121",
        "title": "OSLC4Net",
        "content": "\nA toolkit for developing OSLC consumers and providers for .NET environments that contains the following tools:\n\nOSLC4NET SDK, which is very similar to the OSLC4J component of Eclipse Lyo: you can model OSLC resources as .NET objects, annotate them with OSLC attributes, and use the REST services provided by ASP.NET MVC 4 for HTTP requests and request handling.\nOSLC Change Management consumer implementation in the form of a test suite\n\nGo\n",
        "tags": [
            "tool",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/video-20151109-1",
        "title": "Get IBM RTC and HP ALM To Blend Together Like Peanut Butter and Jelly",
        "content": "Webinar on integrating HP ALM and IBM RTC, presented by Wesley Coelho, Director of Business Development at Tasktop Technologies, and Lance Knight, Director of Solution Architects at Tasktop.\n\nWatch\n",
        "tags": [
            "video",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/video-20151109-2",
        "title": "Tear Down the Walls Between Requirements, Development and Testing",
        "content": "In this webinar, Robert Elves, co-founder of Tasktop Technologies, describes how Business Analysts using Rational Requirements Composer can successfully create and revise Requirements while automatically keeping the Testing team up-to-date on the latest changes through the use of Tasktop Sync.\n\nWatch\n",
        "tags": [
            "video",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/video-20151118-jad-ecs",
        "title": "Linked Data and OSLC for Tool Interoperability",
        "content": "\nIn a lecture given in an OSLC workshop at the Embedded Conference Scandinavia, Jad El-khoury explains the OSLC standard, the underlying linked data technologies that constitute a foundation for the OSLC. After watching the lecture, you will gain a solid understanding of the linked data fundamentals, have a comperehsive overview of various parts of OSLC and be ready to individually work through the workshop material for Eclipse Lyo, an SDK for implementing OSLC-compliant solutions.\n\nPart 1\n\nPart 2\n",
        "tags": [
            "video",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/video-20170616-andrew",
        "title": "New and updated tools in Eclipse Lyo: Toolchain Designer & Lyo Store",
        "content": "\nIn this video, Andrew Berezovskyi, a Lyo project lead will describe the latest\nsupport tools that were contributed to Eclipse Lyo, which will further aim the\ndevelopment of OSLC adaptors and toolchains.\n\n{{ youtube tZxPzlSTdeM }}\n\nLyo is an Eclipse project aimed at helping the community adopt OSLC\nspecifications and build OSLC-compliant tools. Learn more about Lyo on\nhttps://www.eclipse.org/lyo/",
        "tags": [
            "video",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/website-20170825",
        "title": "Beyond PLM",
        "content": "\nA blog, by Oleg Shilovitsky, for the community of people looking for information about Engineering and Manufacturing Software. This has much information relevant for the OSLC community.\n\nVisit\n",
        "tags": [
            "website",
            "no-tutorial"
        ]
    }
]