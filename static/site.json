[
    {
        "uri": "/../_index",
        "title": "Open Services for Lifecycle Collaboration",
        "content": "Creating standard REST APIs to connect data\n",
        "tags": []
    },
    {
        "uri": "/../about/_index",
        "title": "About",
        "content": "",
        "tags": []
    },
    {
        "uri": "/../about/brand1",
        "title": "HP",
        "content": "",
        "tags": [
            "brand"
        ]
    },
    {
        "uri": "/../about/brand2",
        "title": "HP",
        "content": "",
        "tags": [
            "brand"
        ]
    },
    {
        "uri": "/../about/faq",
        "title": "Frequently Asked Questions",
        "content": "\nFAQ\n\nYour OSLC questions, answered. Select a question to reveal the answer.\n",
        "tags": []
    },
    {
        "uri": "/../about/faq10",
        "title": "What is the difference between RDF and JSON?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/faq2",
        "title": "How can I get involved in OSLC?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/faq3",
        "title": "Do I need to join OASIS to participate in the OSLC community?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/faq4",
        "title": "Is OSLC only for software/systems engineering?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/faq5",
        "title": "Why aren't OSLC specifications W3C standards?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/faq6",
        "title": "What is the relationship between OSLC specifications and W3C standards?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/faq7",
        "title": "What is the difference between OSLC and openAPI/Swagger?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/faq8",
        "title": "What is the difference between OSLC and microservices?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/faq9",
        "title": "What is the difference between OSLC and a SPARQL endpoint?",
        "content": "",
        "tags": [
            "faq"
        ]
    },
    {
        "uri": "/../about/mission-mission",
        "title": "Mission",
        "content": "\nThe OSLC Community is intended to be an open community collaborating on integration challenges around lifecycle applications, capturing user scenarios for understanding and evolving related specifications for integrating software, and developing integration solutions and prototypes based on those specifications to share with the user community.\n",
        "tags": [
            "mission-snippet",
            "mission"
        ]
    },
    {
        "uri": "/../about/mission-vision",
        "title": "Vision",
        "content": "\nThe community is striving to pull together many diverse initiatives focused around application integration solutions to collaborate and partner with each other rather than compete. There are many organizations with different backgrounds sharing the vision of integrated engineering environments. Sometimes they are promoting different approaches than OSLC and linked data solutions but the goal of the community is to openly discuss complementary approaches which can also be appropriate with the goal of improving the overall viability of standards/implementations for supporting industry integration challenges.\n",
        "tags": [
            "mission-snippet"
        ]
    },
    {
        "uri": "/../about/mission",
        "title": "Our Mission",
        "content": "\nAbout\n\nThe community is striving to pull together many diverse initiatives focused around application integration solutions to collaborate and partner with each other rather than compete. There are many organizations with different backgrounds sharing the vision of integrated engineering environments. Sometimes they are promoting different approaches than OSLC and linked data solutions but the goal of the community is to openly discuss complementary approaches which can also be appropriate with the goal of improving the overall viability of standards/implementations for supporting industry integration challenges.\n",
        "tags": []
    },
    {
        "uri": "/../about/people",
        "title": "People",
        "content": "\nPeople\n",
        "tags": []
    },
    {
        "uri": "/../about/people2",
        "content": "",
        "tags": [
            "people"
        ]
    },
    {
        "uri": "/../about/people3",
        "content": "",
        "tags": [
            "people"
        ]
    },
    {
        "uri": "/../about/why",
        "title": "Why OSLC?",
        "content": "\nAs a newcomer to the OSLC community, you might have been pondering over one question, but too shy to ask it aloud:\n\n Why should I invest my time and effort into OSLC?\n\nGreat that you asked! There are many good reasons for you to embrace OSLC and the specific reasons depend on your role. If you are...\n\n.. a Tool Vendor\n\nAs a tool vendor, you need to ensure that your customers can integrate your product with other tools in order to extract the most value from your product. While providing a REST API is a norm nowadays, a developer has to build an integration layer. As every REST API is different, it means extra time reading the documentation, extra time developing plumbing code to perform model transformation, and most importantly, all this needs to be done on a case basis, leading to point-to-point integrations.\n\nOSLC allows you to provide:\n\na uniform self-descriptive REST API;\na linked data model based on standard domains, common in ALM/PLM (RM, QM, CCM, etc.), that you can tailor to your product;\nexchange data in plain JSON with the clients that are not linked-data ready;\nprovide rich UIs from your tool for use in 3rd-party tools for seamless linked data workflow;\nand many other features that your customers would appreciate.\n\nA number of other products used in ALM/PLM already implement OSLC and your OSLC-enabled tool can integrate with many of them without extra development effort.\n\n ..  a Tool Buyer\n\nAs a tool buyer, you have a unique set of requirements towards your toolchain and for many reasons (technical, organisational, financial) a single-vendor solution might not be viable for you. Therefore, one of the most important criteria for procurement of the new software tools is their TCO including the integration costs. Most of the tools come with semi-open proprietary APIs that often lack documentation. Those APIs will incur considerable development costs, often involving highly specialised consultants with a deep knowledge of the tool in question.\n\nTools that come with an OSLC-based API will you to integrate them into your toolchain with less (or none, in many cases) development effort, while performing a deeper integration, at the workflow level.\n\nOSLC reduces the complexity and risk of increasingly complex software infrastructures, and improves the value of software across a broader set of internal and external stakeholders. OSLC-based API is an experience truly free from a vendor lock-in.\n\n.. a Tool User\n\nAs a tool user, you have to switch between a plethora of tools on a daily basis. You often don't see how their integration is done, but you feel that it's done poorly: updates showing up in other tools many hours later, integrations getting broken every other tool update, etc.\n\nWell-implemented OSLC integrations mostly remain backwards-compatible even across major releases. Standardised OSLC APIs often allow vendors to provide a fully supported integration with many other OSLC-compliant tools out of the box. Finally, an OSLC integration can be performed not only at the level of two tool data models, but at the level of your workflow involving those tools. This is possible through the use of delegated UIs, which allow you to interact with another OSLC-compatible tool without leaving your current open tool!\n",
        "tags": [
            "value",
            "why"
        ]
    },
    {
        "uri": "/../case-studies/_index",
        "title": "Case Studies",
        "content": "",
        "tags": []
    },
    {
        "uri": "/../contribute/_index",
        "title": "Contribute",
        "content": "",
        "tags": []
    },
    {
        "uri": "/../contribute/ct-content",
        "title": "Add to this Site",
        "content": "",
        "tags": [
            "addcontent"
        ]
    },
    {
        "uri": "/../contribute/ct-development",
        "title": "Development",
        "content": "",
        "tags": [
            "development"
        ]
    },
    {
        "uri": "/../contribute/ct-evangelise",
        "title": "Evangelise",
        "content": "",
        "tags": [
            "evangelize"
        ]
    },
    {
        "uri": "/../contribute/ct-groups",
        "title": "Working Groups",
        "content": "",
        "tags": [
            "workinggroup"
        ]
    },
    {
        "uri": "/../contribute/ct-join",
        "title": "Join the Conversation",
        "content": "",
        "tags": [
            "join"
        ]
    },
    {
        "uri": "/../contribute/ct-share",
        "title": "Share",
        "content": "",
        "tags": [
            "share"
        ]
    },
    {
        "uri": "/../contribute/ct-specifications",
        "title": "Specifications",
        "content": "",
        "tags": [
            "specifications"
        ]
    },
    {
        "uri": "/../news/_index",
        "title": "News",
        "content": "",
        "tags": []
    },
    {
        "uri": "news/alm-plm-interoperability-survey/",
        "title": "ALM-PLM Interoperability Survey",
        "content": "\nIf you are interested in ALM-PLM Interoperability, please participate in this survey - ALM / PLM Interoperability and OSLC questionnaire, https://vpe-umfrage.mv.uni-kl.de/index.php/748615/lang-en .\n\nThe ProSTEP iViP Association and the Institute for Virtual Product development would like to invite you to participate in this questionnaire. Please take about 10 minutes of your time to complete the questionnaire.\n\nThe results will help to initiate the ALM-PLM Interoperability Workflow Forum from the ProSTEP iViP Association.\n",
        "tags": []
    },
    {
        "uri": "/../news/announcements/_index",
        "content": "",
        "tags": []
    },
    {
        "uri": "news/alm-plm-interoperability-survey/",
        "title": "ALM-PLM Interoperability Survey",
        "content": "\nIf you are interested in ALM-PLM Interoperability, please participate in this survey - ALM / PLM Interoperability and OSLC questionnaire, https://vpe-umfrage.mv.uni-kl.de/index.php/748615/lang-en .\n\nThe ProSTEP iViP Association and the Institute for Virtual Product development would like to invite you to participate in this questionnaire. Please take about 10 minutes of your time to complete the questionnaire.\n\nThe results will help to initiate the ALM-PLM Interoperability Workflow Forum from the ProSTEP iViP Association.\n",
        "tags": []
    },
    {
        "uri": "news/communication-user-group-is-back/",
        "title": "Extra, Extra, Communication User Group is Back",
        "content": "\nThe Open Services Communication User Group held its kickoff call on August 13. The team is positioned to highlight integration successes and communicate the benefits of OSLC. As one participant said \"Think of us as the newspaper for the city.\" This is a perfect analogy of our intent to be indespensible to the community we serve and relevant to the broader audience. The Communication User Group will aims to deliver value, grows our community and provides the news that you need.\n\nThe group is currently working on an initial charter and has started a 2015-2016 roadmap based on various industry events. Our deliverables will capture the benefits of integration, document your success stories and assist adoption. The minutes from our first call are available here on the wiki.\n\nWe can use your help! Please consider joining the Open Services Communication User Group. Joining is simple. Become a member of Open Services and select join from the Communication Work Group page. Since the CommWG is a User Group, you will not need to complete a Workgroup Participation Agreement (WPA). Since the group is part of Open-services.net, you do not need to join any other organization such as OASIS.\n\nIt is easy, it is free and it is fun.\n\nHere is a few things you can do to join in the Open Services Communication:\n\nBecome a Member of Open Services\nSign up for the Communication User Group\nAdd your ideas to the forum, the wiki and the mailing list.  Provide feedback to the webmaster at open-services dot net.\nInclude @OSLCNews on any integration Tweets\nJoin us on September 8 at 11:00 EST for our next Open Services Communication User Group\nSee you then!\n",
        "tags": [
            "communications",
            "social",
            "user group"
        ]
    },
    {
        "uri": "news/learn-more-about-tasktop-sync/",
        "title": "Learn more about Tasktop Sync 4.3 (July 2015)",
        "content": "\nTasktop, the leader in Software Lifecycle Integration (SLI) and creator of the Eclipse Mylyn open source tool, today announced the latest versions of its Tasktop Sync and Tasktop Data products, which add strategic new tools to its integration network and provide a vastly superior user experience.\n\nTasktop products enable enterprises to achieve major gains by connecting everyone in the software lifecycle to create one efficient development and delivery team. With Tasktop solutions, everyone can use their various tools of choice and still collaborate in real time as if they were all working on a single platform.\n\nFor more information on this release:\n\nPress Release: https://www.tasktop.com/press-releases/tasktop-sync-43\nTasktop Sync DataSheet: http://www.tasktop.com/sites/default/files/TTDatasheetSync43072815.pdf\nTasktop Sync 4.3 Release Notes: http://www.tasktop.com/whats-new-sync-43\n",
        "tags": [
            "announcements",
            "software",
            "tasktop"
        ]
    },
    {
        "uri": "news/new-oasis-oslc-steering-committee-announced/",
        "title": "New OASIS OSLC Steering Committee Announced",
        "content": "\nThe September 2015 elections for the OASIS OSLC Steering Committee have concluded -- congratulations to the new and re-elected members!\n\nAlso noteworthy is that as of this election, the number of Steering Committee members increased from 7 to 9.  The expanded breadth and experience that is represented in the new Steering Committee will further enhance its ability to guide and serve the OSLC Member Section and community.  A warm welcome to the OSLC Steering Committee for September 2015-2016:\n\nMats Berglund – Enterprise Architect, Ericsson\nBill Chown – System Design Management,  Mentor Graphics\nWesley Coelho - Senior Director of Business Development, Tasktop\nRainer Ersch - Senior Research Scientist, Siemens\nAmit Fisher - CTO, Internet of Things & Continuous Engineering, IBM\nAndreas Keis - Lead for Systems Engineering Processes and Platforms, Airbus\nBola Rotibi - Research Director, Creative Intellect Consulting\nMartin Sarabura - Technical Fellow, PTC\nMark Schulte - Associate Technical Fellow, Boeing\nAs we transition to the new Steering Committee, a big thank-you to departing members John Wiegand and Dave West for their service and numerous contributions to OSLC and the Steering Committee.\n\nNow is a great time to get involved in Open Services and OASIS OSLC. Please consider joining a User Group, contribute to an OASIS technical committee, post questions on the Forum and follow us on Social media including @OSLCNews and OSLC LinkedIn Group.\n\nThank you,\n\nNelson Jean\n",
        "tags": [
            "election",
            "oasis",
            "steering committee"
        ]
    },
    {
        "uri": "news/oslc-survey-provides-insights-software-integration-standards/",
        "title": "OLSC Survey Provides Insights into Needs for Software Integration Standards",
        "content": "\nThe Open Services for Lifecycle Collaboration (OSLC) steering committee is gathering feedback from the community to help shape the future vision and mission for OSLC. As part of that effort a survey of the community members was conducted and it highlights some interesting results about the needs of this group. You can find the full results of the survey at https://www.surveymonkey.com/results/SM-2XVJT6CR/.\n\nOSLC is an open community that builds standards to solve a vexing problem: How to integrate the specialized software used by different types of software and systems development practitioners so teams and their tools can work together.\n\nFor example, it’s wildly inefficient for a software tester to file defect reports in her specialized QA software and then send an email to the development team to tell them about the defect so they can manually enter it into their Agile development management tools. There is no place for this type of carrier pigeon communication in today’s world of short development cycles and continuous delivery.\n\nA note about methodology: The survey was advertised via several OSLC-related communication channels and participants self-selected the survey rather than being a random sample. This means the results represent the opinions of that group and may not necessarily be representative of the opinions of the wider community.\n\nIntegration is desired for both Systems and Software\n\nThe first category in the chart above is “Software Development Lifecycle (SDLC) Tools/DevOps (e.g. Agile, Testing, Requirements, Continuous Integration, etc.) with over 70% of respondents indicating that this is of interest. Systems Engineering and Product Lifecycle Management were also identified as key areas of integration for the OSLC community. While not specifically asked in this survey, supporting the collaboration between SDLC and the world of Systems and Product Lifecycle Management is a key area where OSLC can be applied.\n\nTraceability is key\n\nNearly 80% of the participants identified “Traceability across tools” as a desired benefit of integrating tools. The second and third most common responses were “Requirements coordination with test planning” and “Developer collaboration with QA.” All three of these top responses require an element of traceability between the artifacts managed by each discipline. This is a need that OSLC’s linked data architecture is particularly well suited to address.\n\nHigher OSLC adoption is needed\n\nLike any standard, the benefits of adopting OSLC increase as more organizations adopt the standard. Before a standard is widely used, early adopters need to invest in supporting it to create the necessary critical mass. There are more than 50 known tools that can support OSLC either natively or through a third-party adapter. However, there is still a need for higher adoption and more native support for OSLC among non-IBM tools. The survey reflects this and highlights the “chicken and egg” dilemma, where higher industry adoption would be the primary motivator for the respondents’ organizations to adopt OSLC. With more than 50 tools already capable of supporting OSLC and more than 10 third-party adapter technologies, there is clearly a strong level of industry momentum. See below for more information on how to participate in the discussion on driving OSLC to the next level of adoption where “adoption” itself is no longer an impediment.\n\nIntegration is needed across a broad range of tools\n\nThe survey identified 55 different tools that respondents might have a need to integrate. Some 41 out of these 55 were selected by multiple people. It’s also interesting to note not only the diversity in products/vendors but also in the types of tools involved. The list includes tools for requirements, Agile development, QA/Testing, source code management, PLM, and Service Desk. Together this indicates a long tail of integration needs across a large set of tools. Again this highlights both the need and the potential benefits of a standardized integration approach.\n\nThe OSLC steering committee is always looking for more feedback to help improve integration through open technology. We welcome your comments at open-services.net forums and the OSLC LinkedIn Group.  Together, we can stop the insanity of carrier pigeon communication across teams and tools.\n",
        "tags": [
            "steering committee",
            "surveys"
        ]
    },
    {
        "uri": "news/oslc3-update-what-how-why-important/",
        "title": "OSLC3 Update: What is it, how is it different, and why is it important?",
        "content": "\nOpen Services for Life-cycle Collaboration or OSLC defines a set of standard capabilities enabling loosely coupled, open and scalable point-to-point integration between heterogeneous software development tools. OSLC allows users to work seamlessly across their preferred tools and does not require complex interchange of data between tools that may result in information redundancy and maintenance issues.\n\nThe OASIS OSLC Core 3.0 Specifications represent the continued evolution of OSLC through collaborating organizations to provide the standards, APIs and tools that support integrated product, system and application lifecycle management.\n\nFor the complete article see Jazz.net: OSLC3 Update: What is it, how is it different, and why is it important?\n",
        "tags": [
            "core",
            "oslc3"
        ]
    },
    {
        "uri": "news/prostep-ag-announces-openpdm-oslc-adapter/",
        "title": "PROSTEP AG Announces OpenPDM OSLC Adapter",
        "content": "\nPROSTEP would like to announce to the OSLC community, that there is an OpenPDM OSLC Adapter which enables PLM systems to connect to the OSLC world. It offers OSLC standard services, especially for those PLM systems which don’t offer native ones. The adapter is an add-on for the OpenPDM integration framework which provides connectors to a wide range of systems, e.g.:\n\nAnsys EKM\nAras Innovator\nAutodesk Vault\nDassault SmarTeam\nDassault ENOVIA V6\nDassault ENOVIA VPM V4\nMSC SimManager\nOracle Agile ePLM\nPTC Windchill\nSAP PLM\nSiemens Teamcenter Engineering\nSiemens Teamcenter Enterprise\nSiemens Teamcenter UA\nThe OpenPDM OSLC services can be integrated in any OSLC consuming applications. The supported features are:\n\nOSLC Service Providers  (OSLC Core 2.0)\nJazz specific Root Service\nChange Request Resources:\nas RDF/XML\nas JSON  (OSLC CM 2.0)\nQuery Capabilities (OSLC Core 2.0)\nSelection UI (OSLC Core 2.0)\nOAuth\nLink documents managed in Backend as related resource to OSLC CM entity\nProvide download for documents\nA very successful project was performed by PROSTEP at Bombardier Transportation. The IBM tool Rational Team Concert was integrated with Teamcenter Enterprise from Siemens PLM. Rational Team Concert is used for managing the creation and delivery of documents which are needed for the authorisation of their products by European Union (EU) or local country bodies. The requirements are managed in Rational Doors Next Generation. The documents are stored in their central PDM system Teamcenter and linked to the RTC tasks. Teamcenter Enterprise doesn’t provide a native OSLC service and is now enabled by the OpenPDM OSLC Adapter to be accessed by RTC via OSLC. The project was defined, performed and finished successfully in close cooperation with IBM.\n\nFor more information see http://prostep.com\n",
        "tags": [
            "adapters",
            "announcements",
            "plm"
        ]
    },
    {
        "uri": "news/communication-user-group-is-back/",
        "title": "Extra, Extra, Communication User Group is Back",
        "content": "\nThe Open Services Communication User Group held its kickoff call on August 13. The team is positioned to highlight integration successes and communicate the benefits of OSLC. As one participant said \"Think of us as the newspaper for the city.\" This is a perfect analogy of our intent to be indespensible to the community we serve and relevant to the broader audience. The Communication User Group will aims to deliver value, grows our community and provides the news that you need.\n\nThe group is currently working on an initial charter and has started a 2015-2016 roadmap based on various industry events. Our deliverables will capture the benefits of integration, document your success stories and assist adoption. The minutes from our first call are available here on the wiki.\n\nWe can use your help! Please consider joining the Open Services Communication User Group. Joining is simple. Become a member of Open Services and select join from the Communication Work Group page. Since the CommWG is a User Group, you will not need to complete a Workgroup Participation Agreement (WPA). Since the group is part of Open-services.net, you do not need to join any other organization such as OASIS.\n\nIt is easy, it is free and it is fun.\n\nHere is a few things you can do to join in the Open Services Communication:\n\nBecome a Member of Open Services\nSign up for the Communication User Group\nAdd your ideas to the forum, the wiki and the mailing list.  Provide feedback to the webmaster at open-services dot net.\nInclude @OSLCNews on any integration Tweets\nJoin us on September 8 at 11:00 EST for our next Open Services Communication User Group\nSee you then!\n",
        "tags": [
            "communications",
            "social",
            "user group"
        ]
    },
    {
        "uri": "/../news/events/_index",
        "content": "",
        "tags": []
    },
    {
        "uri": "news/oasis-oslc-steering-committee-elections-coming-soon/",
        "title": "OASIS OSLC Steering Committee Elections Coming Soon",
        "content": "\nWhether you live in the I/T or Systems world, software integration in heterogeneous environments can represent both a challenge (where do I even start?) and opportunity (how can I advance my environment to provide more value, deliver faster and with reduced risk?).\n\nCommunities like openservices and OASIS OSLC collaboratively discuss lifecycle integration challenges and solutions that leverage open standards. Whether you're here to contribute your knowledge and experience or to learn from others, we're all in it together.\n\nIf you're interested in working with other leaders in this space and helping influence the direction and expansion of OSLC, consider becoming a member of OASIS OSLC Steering Committee.  Nominations and elections for positions on the Steering Committee will occur this September 2015. If you have questions in the meantime please review the Steering Committee “Best Practices” document or  post questions to the OSLC General Discussion Forum.\n\nMore details to come soon!\n",
        "tags": [
            "community",
            "election",
            "members",
            "oasis"
        ]
    },
    {
        "uri": "news/oslc-ibm-interconnect/",
        "title": "OSLC at IBM InterConnect 2015",
        "content": "\nComing in a couple weeks is IBM's new InterConnect conference which brings together past IBM events (Innovate, Pulse, Impact) into one.  These conferences often contain a number of sessions and events with OSLC connect.  As you are building your agenda for the conference, I wanted to highlight my sample agenda which has some key sessions that either talking directly about OSLC activities or other topics that are key to OSLC activities.\n\nAttached you'll find a PDF of my full sample agenda, though here are some key events/sessions to be aware of:\n\nOSLC Community Engagement Event - Sat, Feb 21, time and location TBD\nOpen Technology Summit - Sun, Feb 22, 4-6:30, Mandalay Bay (Islander Ballroom AB/FG)\nBuilding on OSLC to Provide Effective and Efficient Improvements in Design Process Communication - Mon, Feb 23, 3:30-4:30, Mandalay Bay (Breakers C)\nBest Practices on Implementing Integrated Software Delivery Tools - Tue, Feb 24, 3:30-4:30, Mandalay Bay (Islander Ballroom F)\nCerner Corporation’s Migration from Rational RequisitePro to DOORS NG - Wed, Feb 25, 5:30-6:30, Mandalay Bay (Islander Ballroom E)\nChallenges and Solutions Implementing a Practical Commercial OSLC PLM Integration with PTC Windchill - Thu, Feb 26, 10:30-11:30, Mandalay Bay (Tradewinds C)\n\nAlso if you want to just get together and chat, feel free to https://twitter.com/sspeiche and I'd be happy to chat, as well as help connect you to OSLC Steering Committee members or other community enthusiasts who will be in Vegas.\n",
        "tags": [
            "conferences",
            "ibm",
            "interconnect"
        ]
    },
    {
        "uri": "news/learn-more-about-tasktop-sync/",
        "title": "Learn more about Tasktop Sync 4.3 (July 2015)",
        "content": "\nTasktop, the leader in Software Lifecycle Integration (SLI) and creator of the Eclipse Mylyn open source tool, today announced the latest versions of its Tasktop Sync and Tasktop Data products, which add strategic new tools to its integration network and provide a vastly superior user experience.\n\nTasktop products enable enterprises to achieve major gains by connecting everyone in the software lifecycle to create one efficient development and delivery team. With Tasktop solutions, everyone can use their various tools of choice and still collaborate in real time as if they were all working on a single platform.\n\nFor more information on this release:\n\nPress Release: https://www.tasktop.com/press-releases/tasktop-sync-43\nTasktop Sync DataSheet: http://www.tasktop.com/sites/default/files/TTDatasheetSync43072815.pdf\nTasktop Sync 4.3 Release Notes: http://www.tasktop.com/whats-new-sync-43\n",
        "tags": [
            "announcements",
            "software",
            "tasktop"
        ]
    },
    {
        "uri": "news/new-oasis-oslc-steering-committee-announced/",
        "title": "New OASIS OSLC Steering Committee Announced",
        "content": "\nThe September 2015 elections for the OASIS OSLC Steering Committee have concluded -- congratulations to the new and re-elected members!\n\nAlso noteworthy is that as of this election, the number of Steering Committee members increased from 7 to 9.  The expanded breadth and experience that is represented in the new Steering Committee will further enhance its ability to guide and serve the OSLC Member Section and community.  A warm welcome to the OSLC Steering Committee for September 2015-2016:\n\nMats Berglund – Enterprise Architect, Ericsson\nBill Chown – System Design Management,  Mentor Graphics\nWesley Coelho - Senior Director of Business Development, Tasktop\nRainer Ersch - Senior Research Scientist, Siemens\nAmit Fisher - CTO, Internet of Things & Continuous Engineering, IBM\nAndreas Keis - Lead for Systems Engineering Processes and Platforms, Airbus\nBola Rotibi - Research Director, Creative Intellect Consulting\nMartin Sarabura - Technical Fellow, PTC\nMark Schulte - Associate Technical Fellow, Boeing\nAs we transition to the new Steering Committee, a big thank-you to departing members John Wiegand and Dave West for their service and numerous contributions to OSLC and the Steering Committee.\n\nNow is a great time to get involved in Open Services and OASIS OSLC. Please consider joining a User Group, contribute to an OASIS technical committee, post questions on the Forum and follow us on Social media including @OSLCNews and OSLC LinkedIn Group.\n\nThank you,\n\nNelson Jean\n",
        "tags": [
            "election",
            "oasis",
            "steering committee"
        ]
    },
    {
        "uri": "news/oasis-oslc-steering-committee-elections-coming-soon/",
        "title": "OASIS OSLC Steering Committee Elections Coming Soon",
        "content": "\nWhether you live in the I/T or Systems world, software integration in heterogeneous environments can represent both a challenge (where do I even start?) and opportunity (how can I advance my environment to provide more value, deliver faster and with reduced risk?).\n\nCommunities like openservices and OASIS OSLC collaboratively discuss lifecycle integration challenges and solutions that leverage open standards. Whether you're here to contribute your knowledge and experience or to learn from others, we're all in it together.\n\nIf you're interested in working with other leaders in this space and helping influence the direction and expansion of OSLC, consider becoming a member of OASIS OSLC Steering Committee.  Nominations and elections for positions on the Steering Committee will occur this September 2015. If you have questions in the meantime please review the Steering Committee “Best Practices” document or  post questions to the OSLC General Discussion Forum.\n\nMore details to come soon!\n",
        "tags": [
            "community",
            "election",
            "members",
            "oasis"
        ]
    },
    {
        "uri": "news/oslc-ibm-interconnect/",
        "title": "OSLC at IBM InterConnect 2015",
        "content": "\nComing in a couple weeks is IBM's new InterConnect conference which brings together past IBM events (Innovate, Pulse, Impact) into one.  These conferences often contain a number of sessions and events with OSLC connect.  As you are building your agenda for the conference, I wanted to highlight my sample agenda which has some key sessions that either talking directly about OSLC activities or other topics that are key to OSLC activities.\n\nAttached you'll find a PDF of my full sample agenda, though here are some key events/sessions to be aware of:\n\nOSLC Community Engagement Event - Sat, Feb 21, time and location TBD\nOpen Technology Summit - Sun, Feb 22, 4-6:30, Mandalay Bay (Islander Ballroom AB/FG)\nBuilding on OSLC to Provide Effective and Efficient Improvements in Design Process Communication - Mon, Feb 23, 3:30-4:30, Mandalay Bay (Breakers C)\nBest Practices on Implementing Integrated Software Delivery Tools - Tue, Feb 24, 3:30-4:30, Mandalay Bay (Islander Ballroom F)\nCerner Corporation’s Migration from Rational RequisitePro to DOORS NG - Wed, Feb 25, 5:30-6:30, Mandalay Bay (Islander Ballroom E)\nChallenges and Solutions Implementing a Practical Commercial OSLC PLM Integration with PTC Windchill - Thu, Feb 26, 10:30-11:30, Mandalay Bay (Tradewinds C)\n\nAlso if you want to just get together and chat, feel free to https://twitter.com/sspeiche and I'd be happy to chat, as well as help connect you to OSLC Steering Committee members or other community enthusiasts who will be in Vegas.\n",
        "tags": [
            "conferences",
            "ibm",
            "interconnect"
        ]
    },
    {
        "uri": "news/oslc-survey-provides-insights-software-integration-standards/",
        "title": "OLSC Survey Provides Insights into Needs for Software Integration Standards",
        "content": "\nThe Open Services for Lifecycle Collaboration (OSLC) steering committee is gathering feedback from the community to help shape the future vision and mission for OSLC. As part of that effort a survey of the community members was conducted and it highlights some interesting results about the needs of this group. You can find the full results of the survey at https://www.surveymonkey.com/results/SM-2XVJT6CR/.\n\nOSLC is an open community that builds standards to solve a vexing problem: How to integrate the specialized software used by different types of software and systems development practitioners so teams and their tools can work together.\n\nFor example, it’s wildly inefficient for a software tester to file defect reports in her specialized QA software and then send an email to the development team to tell them about the defect so they can manually enter it into their Agile development management tools. There is no place for this type of carrier pigeon communication in today’s world of short development cycles and continuous delivery.\n\nA note about methodology: The survey was advertised via several OSLC-related communication channels and participants self-selected the survey rather than being a random sample. This means the results represent the opinions of that group and may not necessarily be representative of the opinions of the wider community.\n\nIntegration is desired for both Systems and Software\n\nThe first category in the chart above is “Software Development Lifecycle (SDLC) Tools/DevOps (e.g. Agile, Testing, Requirements, Continuous Integration, etc.) with over 70% of respondents indicating that this is of interest. Systems Engineering and Product Lifecycle Management were also identified as key areas of integration for the OSLC community. While not specifically asked in this survey, supporting the collaboration between SDLC and the world of Systems and Product Lifecycle Management is a key area where OSLC can be applied.\n\nTraceability is key\n\nNearly 80% of the participants identified “Traceability across tools” as a desired benefit of integrating tools. The second and third most common responses were “Requirements coordination with test planning” and “Developer collaboration with QA.” All three of these top responses require an element of traceability between the artifacts managed by each discipline. This is a need that OSLC’s linked data architecture is particularly well suited to address.\n\nHigher OSLC adoption is needed\n\nLike any standard, the benefits of adopting OSLC increase as more organizations adopt the standard. Before a standard is widely used, early adopters need to invest in supporting it to create the necessary critical mass. There are more than 50 known tools that can support OSLC either natively or through a third-party adapter. However, there is still a need for higher adoption and more native support for OSLC among non-IBM tools. The survey reflects this and highlights the “chicken and egg” dilemma, where higher industry adoption would be the primary motivator for the respondents’ organizations to adopt OSLC. With more than 50 tools already capable of supporting OSLC and more than 10 third-party adapter technologies, there is clearly a strong level of industry momentum. See below for more information on how to participate in the discussion on driving OSLC to the next level of adoption where “adoption” itself is no longer an impediment.\n\nIntegration is needed across a broad range of tools\n\nThe survey identified 55 different tools that respondents might have a need to integrate. Some 41 out of these 55 were selected by multiple people. It’s also interesting to note not only the diversity in products/vendors but also in the types of tools involved. The list includes tools for requirements, Agile development, QA/Testing, source code management, PLM, and Service Desk. Together this indicates a long tail of integration needs across a large set of tools. Again this highlights both the need and the potential benefits of a standardized integration approach.\n\nThe OSLC steering committee is always looking for more feedback to help improve integration through open technology. We welcome your comments at open-services.net forums and the OSLC LinkedIn Group.  Together, we can stop the insanity of carrier pigeon communication across teams and tools.\n",
        "tags": [
            "steering committee",
            "surveys"
        ]
    },
    {
        "uri": "news/oslc3-update-what-how-why-important/",
        "title": "OSLC3 Update: What is it, how is it different, and why is it important?",
        "content": "\nOpen Services for Life-cycle Collaboration or OSLC defines a set of standard capabilities enabling loosely coupled, open and scalable point-to-point integration between heterogeneous software development tools. OSLC allows users to work seamlessly across their preferred tools and does not require complex interchange of data between tools that may result in information redundancy and maintenance issues.\n\nThe OASIS OSLC Core 3.0 Specifications represent the continued evolution of OSLC through collaborating organizations to provide the standards, APIs and tools that support integrated product, system and application lifecycle management.\n\nFor the complete article see Jazz.net: OSLC3 Update: What is it, how is it different, and why is it important?\n",
        "tags": [
            "core",
            "oslc3"
        ]
    },
    {
        "uri": "news/prostep-ag-announces-openpdm-oslc-adapter/",
        "title": "PROSTEP AG Announces OpenPDM OSLC Adapter",
        "content": "\nPROSTEP would like to announce to the OSLC community, that there is an OpenPDM OSLC Adapter which enables PLM systems to connect to the OSLC world. It offers OSLC standard services, especially for those PLM systems which don’t offer native ones. The adapter is an add-on for the OpenPDM integration framework which provides connectors to a wide range of systems, e.g.:\n\nAnsys EKM\nAras Innovator\nAutodesk Vault\nDassault SmarTeam\nDassault ENOVIA V6\nDassault ENOVIA VPM V4\nMSC SimManager\nOracle Agile ePLM\nPTC Windchill\nSAP PLM\nSiemens Teamcenter Engineering\nSiemens Teamcenter Enterprise\nSiemens Teamcenter UA\nThe OpenPDM OSLC services can be integrated in any OSLC consuming applications. The supported features are:\n\nOSLC Service Providers  (OSLC Core 2.0)\nJazz specific Root Service\nChange Request Resources:\nas RDF/XML\nas JSON  (OSLC CM 2.0)\nQuery Capabilities (OSLC Core 2.0)\nSelection UI (OSLC Core 2.0)\nOAuth\nLink documents managed in Backend as related resource to OSLC CM entity\nProvide download for documents\nA very successful project was performed by PROSTEP at Bombardier Transportation. The IBM tool Rational Team Concert was integrated with Teamcenter Enterprise from Siemens PLM. Rational Team Concert is used for managing the creation and delivery of documents which are needed for the authorisation of their products by European Union (EU) or local country bodies. The requirements are managed in Rational Doors Next Generation. The documents are stored in their central PDM system Teamcenter and linked to the RTC tasks. Teamcenter Enterprise doesn’t provide a native OSLC service and is now enabled by the OpenPDM OSLC Adapter to be accessed by RTC via OSLC. The project was defined, performed and finished successfully in close cooperation with IBM.\n\nFor more information see http://prostep.com\n",
        "tags": [
            "adapters",
            "announcements",
            "plm"
        ]
    },
    {
        "uri": "news/updated-design-rolling-out-gradually/",
        "title": "Pardon our dust: updated design rolling out gradually",
        "content": "\nAs I mentioned almost a year ago, I’ve been plugging away at a new look and feel for this site. I have a project on GitHub; you can open issues or discuss the direction in general; you can look at proposed sample pages.\n\nAnd as of today, you’ll be able to see how it looks live. I’ll be rolling out elements of it gradually. There are a number of moving parts and I want to test thoroughly.\n\nYou can see what areas have the new design in this issue on GitHub. For the areas that have been updated, you should see the following:\n\nA cleaner, simpler design: I’m pretty proud of this! It should be easier to read and navigate\nMuch faster page loading: I’ve pulled out all the stops to make sure that everything loads quickly and pages stay responsive. Speaking of…\nLooks good everywhere: The design is fully “responsive”, so it’ll look and work great everywhere, from your phone to your workstation.\nImproved accessibility for keyboard users and screen readers.\nI will update this post on an ongoing basis with other highlights.\n\nIf you see something that looks busted, message me on Twitter, open a new issue, or email me.\n\nSome more complicated pages like the Home page will come later. Right now I do not have plans to refresh the wiki or the forums; however, they will continue to function perfectly well as-is.\n\nThank you in advance for you patience, and I hope you enjoy the new look!\n",
        "tags": [
            "github",
            "meta",
            "redesign",
            "website"
        ]
    },
    {
        "uri": "/../news/updates/_index",
        "content": "",
        "tags": []
    },
    {
        "uri": "news/updated-design-rolling-out-gradually/",
        "title": "Pardon our dust: updated design rolling out gradually",
        "content": "\nAs I mentioned almost a year ago, I’ve been plugging away at a new look and feel for this site. I have a project on GitHub; you can open issues or discuss the direction in general; you can look at proposed sample pages.\n\nAnd as of today, you’ll be able to see how it looks live. I’ll be rolling out elements of it gradually. There are a number of moving parts and I want to test thoroughly.\n\nYou can see what areas have the new design in this issue on GitHub. For the areas that have been updated, you should see the following:\n\nA cleaner, simpler design: I’m pretty proud of this! It should be easier to read and navigate\nMuch faster page loading: I’ve pulled out all the stops to make sure that everything loads quickly and pages stay responsive. Speaking of…\nLooks good everywhere: The design is fully “responsive”, so it’ll look and work great everywhere, from your phone to your workstation.\nImproved accessibility for keyboard users and screen readers.\nI will update this post on an ongoing basis with other highlights.\n\nIf you see something that looks busted, message me on Twitter, open a new issue, or email me.\n\nSome more complicated pages like the Home page will come later. Right now I do not have plans to refresh the wiki or the forums; however, they will continue to function perfectly well as-is.\n\nThank you in advance for you patience, and I hope you enjoy the new look!\n",
        "tags": [
            "github",
            "meta",
            "redesign",
            "website"
        ]
    },
    {
        "uri": "/../ns/am/am",
        "content": "\r\n\r\n\r\n\t\r\n\t\tThe OSLC Architecture Management(AM) Vocabulary\r\n\t\t\r\n\t\t\tAll vocabulary URIs defined in the OSLC Architecture Management (AM) namespace.\r\n\t\t\r\n\t\tArchitecture Management(AM)\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\r\n\t\t\r\n\t\tArchitecture Resource\r\n\t\tA generic architecture resource.  A resource of this type is likely to be a model or design artifact.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\r\n\t\t\r\n\t\tLink Type\r\n\t\tA locally managed resource that describes a link type predicate that might otherwise not be directly resolvable.\r\n\t\t\r\n\t\r\n\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/../ns/asset/asset",
        "content": "\r\n\r\n\r\n\t\r\n\t\tThe OSLC Asset Management(Asset) Vocabulary\r\n\t\t\r\n\t\t\r\n\t\t\tAll vocabulary URIs defined in the OSLC\r\n\t\t\tAsset Management (Asset) namespace.\r\n\t\t\r\n\t\tAsset Management(Asset)\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tAsset\r\n\t\tThe Asset resource\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tArtifact\r\n\t\tThe Artifact fragment\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tidentifier\r\n\t\tA unique identifier for a resource. Assigned by the service provider when \r\n\t\t\ta resource is created. \r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tguid\r\n\t\tAn identifier for the asset. Assigned by the service provider\r\n\t\t    when a resource is created. Different versions of the same asset will \r\n\t\t    share the same identifier.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tversion\r\n\t\tThe version of the asset. Possible values may include '1.0', \r\n\t\t    '2.0', etc.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tstate\r\n\t\tUsed to indicate the state of the asset based on values defined by the service provider. \r\n\t\tThis specification does not define the resource for this property, however it should contain a \r\n\t\tdcterms:title property.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tcategorization\r\n\t\t\tA categorization to classify an asset. The category schema values are \r\n\t\t    defined by the service provider. This specification does not define the resource for this \r\n\t\t    property, however it should contain a dcterms:title property.\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tmanufacturer\r\n\t\tThe name of the asset manufacturer.\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tmodel\r\n\t\tThe value of the asset model.\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tserialNumber\r\n\t\tThe serial number assigned by the asset manufacturer.\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\ttag\r\n\t\tSpecifies the asset tag value for an Asset. Asset tags are typically human \r\n\t\t    readable labels. For hardware assets, these tags are durable, securely attached to \r\n\t\t    equipment, and may also be readable by barcode and/or RFID.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tartifact\r\n\t\tThe multi valued list of artifacts.\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tartifactFactory\r\n\t\tResource URI used to post new artifacts to the asset.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tcontent\r\n\t\tThe media resource reference URI (the artifact bytes).\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tsize\r\n\t\tThe size of the artifact media resource in bytes.\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\trelationshipType\r\n\t\tThe type of this relationship from the perspective of the \r\n\t\t    oslc_asset:relatedAsset resource based on values defined by the service provider.\r\n\t\t    This specification does not define the resource for this property, however it \r\n\t\t    should contain a dcterms:title property.\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/../ns/basicProfile/ldbp",
        "content": "\r\n\r\n\r\n\t\r\n\t\tThe Linked Data Basic Profile (LDBP) Vocabulary\r\n\t\t\r\n\t\t\r\n\t\t\tAll vocabulary URIs defined in the Linked Data Basic Profile (LDBP) namespace.\r\n\t\t\r\n\t\tLinked Data Basic Profile (LDBP)\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tContainer\r\n\t\tA Basic Profile Resource (BPR) that also conforms to additional patterns \r\n\t\tand conventions in this document for managing membership.\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tPage\r\n\t\tA resource that represents a limited set of members of a Basic Profile Container.\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tmembershipPredicate\r\n\t\tIndicates which predicate of the container should be used to determine the membership.\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tmembershipSubject\r\n\t\tIndicates which resource is the subject for the members of the container.\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tpageOf\r\n\t\tAssociated a page with its container.\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tnextPage\r\n\t\tFrom a known page, how to indicate the next or last page as rdf:nil.\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\t\t\r\n\t\tcontainerSortPredicates\r\n\t\tList of predicates that indicate the ascending order of the members in a page.\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/../ns/cm/cm",
        "content": "\r\n\r\n\r\n\t\r\n\t\tThe OSLC Change Management(CM) Vocabulary\r\n\t\t\r\n\t\t\r\n\t\t\tAll vocabulary URIs defined in the OSLC\r\n\t\t\tChange Management (CM) namespace.\r\n\t\t\r\n\t\tChange Management(CM)\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tChangeRequest\r\n\t\tThe CM Change Request resource\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tcloseDate\r\n\t\tThe date at which no further activity or work is\r\n\t\t\tintended to be conducted. \t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tstatus\r\n\t\tUsed to indicate the status of the change request based\r\n\t\t\ton values defined by the service provider. Most often a read-only\r\n\t\t\tproperty. Some possible values may include: 'Submitted', 'Done',\r\n\t\t\t'InProgress', etc.\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tclosed\r\n\t\tWhether or not the Change Request is completely done, no\r\n\t\t\tfurther fixes or fix verification is needed.\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tinprogress\r\n\t\tWhether or not the Change Request in a state indicating\r\n\t\t\tthat active work is occurring.\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tfixed\r\n\t\tWhether or not the Change Request has been fixed.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tapproved\r\n\t\tWhether or not the Change Request has been approved.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\treviewed\r\n\t\tWhether or not the Change Request has been reviewed.\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tverified\r\n\t\tWhether or not the resolution or fix of the Change\r\n\t\t\tRequest has been verified.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\trelatedChangeRequest\r\n\t\tThis relationship is loosely coupled and has no specific\r\n\t\t\tmeaning. It is likely that the target resource will be an\r\n\t\t\toslc_cm:ChangeRequest but that is not necessarily the case.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\taffectsPlanItem\r\n\t\tChange request affects a plan item. It is likely that\r\n\t\t\tthe target resource will be an oslc_cm:ChangeRequest but that is not\r\n\t\t\tnecessarily the case. \r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\taffectedByDefect\r\n\t\tChange request is affected by a reported defect. It is\r\n\t\t\tlikely that the target resource will be an oslc_cm:ChangeRequest but\r\n\t\t\tthat is not necessarily the case. \r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\ttracksRequirement\r\n\t\tTracks the associated Requirement or Requirement\r\n\t\t\tChangeSet resources. It is likely that the target resource will be an\r\n\t\t\toslc_rm:Requirement but that is not necessarily the case.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\timplementsRequirement\r\n\t\tImplements associated Requirement. It is likely that the\r\n\t\t\ttarget resource will be an oslc_rm:Requirement but that is not\r\n\t\t\tnecessarily the case. \r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\taffectsRequirement\r\n\t\tChange request affecting a Requirement. It is likely\r\n\t\t\tthat the target resource will be an oslc_rm:Requirement but that is\r\n\t\t\tnot necessarily the case. \r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\ttestedByTestCase\r\n\t\tTest case by which this change request is tested. It is\r\n\t\t\tlikely that the target resource will be an oslc_qm:TestCase but that\r\n\t\t\tis not necessarily the case. \r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\taffectsTestResult\r\n\t\tAssociated QM resource that is affected by this Change\r\n\t\t\tRequest. It is likely that the target resource will be an\r\n\t\t\toslc_qm:TestResult but that is not necessarily the case.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tblocksTestExecutionRecord\r\n\t\tAssociated QM resource that is blocked by this Change\r\n\t\t\tRequest. It is likely that the target resource will be an\r\n\t\t\toslc_qm:TestExecutionRecord but that is not necessarily the case.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\trelatedTestExecutionRecord\r\n\t\tRelated to a QM test execution resource. It is likely\r\n\t\t\tthat the target resource will be an oslc_qm:TestExecutionRecord but\r\n\t\t\tthat is not necessarily the case.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\trelatedTestCase\r\n\t\tRelated QM test case resource. It is likely that the\r\n\t\t\ttarget resource will be an oslc_qm:TestCase but that is not\r\n\t\t\tnecessarily the case.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\trelatedTestPlan\r\n\t\tRelated QM test plan resource. It is likely that the\r\n\t\t\ttarget resource will be an oslc_qm:TestPlan but that is not\r\n\t\t\tnecessarily the case. \r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\trelatedTestScript\r\n\t\tRelated QM test script resource. It is likely that the\r\n\t\t\ttarget resource will be an oslc_qm:TestScript but that is not\r\n\t\t\tnecessarily the case.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\ttracksChangeSet\r\n\t\tTracks SCM change set resource. It is likely that the\r\n\t\t\ttarget resource will be an oslc_scm:ChangeSet but that is not\r\n\t\t\tnecessarily the case.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tdefect\r\n\t\tprimarily used by QM tools to report defects in testing.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tplanItem\r\n\t\tused by QM and PPM tools for associating change requests\r\n\t\t\tinto plans (project, release, sprint, etc).\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\ttask\r\n\t\tused by QM and PPM tools for associating change requests\r\n\t\t\tinto executable and track-able items.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\trequirementsChangeRequest\r\n\t\tused by RM tools for associating a change request for\r\n\t\t\tusage in tracking changes to a Requirements resource\r\n\t\t\r\n\t\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/../ns/ems/ems",
        "content": "\r\n\r\n\t\r\n\t\tThe OSLC Estimation and Measurement Vocabulary (EMS)\r\n\t\t\r\n\t\tThis is the RDF Schema for the EMS vocabulary\r\n\t\t\tdefined\r\n\t\t\tin the EMS namespace. This document is under construction.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tService\r\n\t\tThe class of EMS services.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tservice\r\n\t\tThe object is an instance of Service.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tBaseline\r\n\t\tThe class of EMS baselines.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tBaselineList\r\n\t\tThe class of EMS baseline lists.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tbaselineList\r\n\t\tThe object is an instance of BaselineList.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tmemberBaseline\r\n\t\tThe object is an instance of Baseline.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tEstimate\r\n\t\tThe class of EMS estimates.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tEstimateList\r\n\t\tThe class of EMS estimate lists.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\testimateList\r\n\t\tThe object is an instance of EstimateList.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tmemberEstimate\r\n\t\tThe object is an instance of Estimate.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tMeasurement\r\n\t\tThe class of EMS measurements.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tMeasurementList\r\n\t\tThe class of EMS measurement lists.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tmeasurementList\r\n\t\tThe object is an instance of MeasurementList.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tmemberMeasurement\r\n\t\tThe object is an instance of Measurement.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tProject\r\n\t\tThe class of EMS projects.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tProjectList\r\n\t\tThe class of EMS project lists.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tprojectList\r\n\t\tThe object is an instance of ProjectList.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tmemberProject\r\n\t\tThe object is an instance of Project.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tScenario\r\n\t\tThe class of EMS scenarios.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tScenarioList\r\n\t\tThe class of EMS scenario lists.\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tscenarioList\r\n\t\tThe object is an instance of ScenarioList.\r\n\t\t\r\n\t\t\r\n\t\r\n\r\n\t\r\n\t\t\r\n\t\tmemberScenario\r\n\t\tThe object is an instance of Scenario.\r\n\t\t\r\n\t\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/../ns/qm/qm",
        "content": "\r\n\r\n  \r\n    The OSLC Quality Management(QM) Vocabulary\r\n    \r\n      All vocabulary URIs defined in the OSLC Quality Management (QM) namespace.\r\n    \r\n    Quality Management(QM)\r\n    \r\n    \r\n    \r\n    \r\n      \r\n        \r\n      \r\n    \r\n  \r\n  \r\n    \r\n    TestPlan\r\n    The QM Test Plan resource\r\n    \r\n  \r\n  \r\n    \r\n    TestCase\r\n    The QM Test Case resource\r\n    \r\n  \r\n  \r\n    \r\n    TestScript\r\n    The QM Test Script resource\r\n    \r\n  \r\n  \r\n    \r\n    TestExecutionRecord\r\n    The QM Test Execution Record resource\r\n    \r\n  \r\n  \r\n    \r\n    TestResult\r\n    The QM Test Result resource\r\n    \r\n  \r\n  \r\n    \r\n    relatedChangeRequest\r\n    A related change request. It is likely that the target resource will be an oslc_cm:ChangeRequest but that is not necessarily the case. \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n  \r\n  \r\n    \r\n    usesTestCase\r\n    Test Case used by the Test Plan. It is likely that the target resource will be an oslc_qm:TestCase but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    validatesRequirementCollection\r\n    Requirement Collection that is validated by the Test Plan. It is likely that the target resource will be an oslc_rm:RequirementCollection but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    testsChangeRequest\r\n    Change Request tested by the Test Case. It is likely that the target resource will be an oslc_cm:ChangeRequest but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    usesTestScript\r\n    Test Script used by the Test Case. It is likely that the target resource will be an oslc_qm:TestScript but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    validatesRequirement\r\n    Requirement that is validated by the Test Case. It is likely that the target resource will be an oslc_rm:Requirement but that is not necessarily the case.\r\n    \r\n    \r\n    \r\n    \r\n  \r\n  \r\n    \r\n    executionInstructions\r\n    Instructions for executing the test script. Note that the value of Occurs is undefined. The resource shape document provided by the QM service provider may be consulted for its value. \r\n    \r\n    \r\n  \r\n  \r\n    \r\n    blockedByChangeRequest\r\n    Change Request that prevents execution of the Test Execution Record. It is likely that the target resource will be an oslc_cm:ChangeRequest but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    runsOnTestEnvironment\r\n    Indicates the environment details of the test case for this execution record.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    reportsOnTestPlan\r\n    Test Plan that the Test Execution Record reports on. It is likely that the target resource will be an oslc_qm:TestPlan but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    runsTestCase\r\n    Test Case run by the Test Execution Record. It is likely that the target resource will be an oslc_qm:TestCase but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    affectedByChangeRequest\r\n    Change request that affects the Test Result. It is likely that the target resource will be an oslc_cm:ChangeRequest but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    executesTestScript\r\n    Test Script executed to produce the Test Result. It is likely that the target resource will be an oslc_qm:TestScript but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    producedByTestExecutionRecord\r\n    Test Execution Record that the Test Result was produced by. It is likely that the target resource will be an oslc_qm:TestExecutionRecord but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    reportsOnTestCase\r\n    Test Case that the Test Result reports on. It is likely that the target resource will be an oslc_qm:TestCase but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n  \r\n    \r\n    reportsOnTestPlan\r\n    Test Plan that the Test Result reports on. It is likely that the target resource will be an oslc_qm:TestPlan but that is not necessarily the case.\r\n    \r\n    \r\n  \r\n\r\n",
        "tags": []
    },
    {
        "uri": "/../ns/rm/rm",
        "content": "\r\n\r\n    \r\n        \r\n        OSLC Namespace for terms in the\r\n            http://open-services.net/ns/rm# namespace\r\n        This RDFS Schema defines the Open Services for Lifecycle\r\n            Collaboration Requirements Management and Definition vocabulary, also known\r\n            as OSLC RM. This vocabulary is part of the OSLC RM 2.0 specification, which is part\r\n            of the OSLC group of specifications. \r\n        To comment on this schema, please contact\r\n            rm@open-services.net.\r\n        Open Services for Lifecycle Collaboration\r\n            Community\r\n        2010-10-10\r\n        \r\n        \r\n        \r\n    \r\n    \r\n    \r\n    \r\n    \r\n        Requirement\r\n        Statement of\r\n            need.\r\n        \r\n        2010-10-10\r\n        \r\n        2010-10-10\r\n        \r\n        \r\n    \r\n    \r\n    \r\n        RequirementCollection\r\n        Collection of requirements. A\r\n            collection uses zero or more requirements.\r\n        \r\n        2010-10-10\r\n        \r\n        2010-10-10\r\n        \r\n        \r\n    \r\n    \r\n        implementedBy\r\n        An entity which is a necessary or desirable aspect\r\n            of an implementation.\r\n        Expresses an implementation\r\n            relationship between entities.\r\n        \r\n        2008-01-14\r\n        \r\n        2008-01-14\r\n        \r\n    \r\n    \r\n    \r\n        elaboratedBy\r\n        An entity which elaborates.\r\n        Expresses an elaboration relationship\r\n            between entities. For example, a model element can elaborate a\r\n            requirement.\r\n        \r\n        2008-01-14\r\n        \r\n        2008-01-14\r\n        \r\n    \r\n    \r\n    \r\n        specifiedBy\r\n        An entity which further clarifies or\r\n            specifies.\r\n        Expresses a specification relationship\r\n            between entities. For example, a model element can specifiy a\r\n            requirement.\r\n        \r\n        2008-01-14\r\n        \r\n        2008-01-14\r\n        \r\n    \r\n    \r\n    \r\n        affectedBy\r\n        An entity which in some way affects the object\r\n            entity.\r\n        Expresses an affects relationship\r\n            between entities. For example, a defect may be said to affect a\r\n            requirement.\r\n        \r\n        2008-01-14\r\n        \r\n        2008-01-14\r\n        \r\n    \r\n    \r\n    \r\n        trackedBy\r\n        An entity which in some way tracks or governs the\r\n            evolution of an entity.\r\n        Expresses a tracking relationship\r\n            between entities. For example, a change request may be said to track a\r\n            requirement, in that it governs the changes to a requirement according to some\r\n            process machinery.\r\n        \r\n        2008-01-14\r\n        \r\n        2008-01-14\r\n        \r\n    \r\n    \r\n    \r\n        validatedBy\r\n        An entity which in some way\r\n            validates.\r\n        Expresses a validation relationship\r\n            between entities. For example, a test plan may be said to validated a requirement\r\n            collection.\r\n        \r\n        2008-01-14\r\n        \r\n        2008-01-14\r\n        \r\n    \r\n    \r\n    \r\n        uses\r\n        An entity which is used by another\r\n            resource.\r\n        Expresses a use relationship between\r\n            entities. For example, a requirement collection may use a\r\n            requirement.\r\n        \r\n        2008-01-14\r\n        \r\n        2008-01-14\r\n        \r\n    \r\n",
        "tags": []
    },
    {
        "uri": "/../resources/_index",
        "title": "Resources",
        "content": "\nSeeing is doing, so come and learn how to do things. In this section of the site, you will find various resources to help including tutorials, videos, articles, and presentations.\n",
        "tags": []
    },
    {
        "uri": "/../resources/article-20151109",
        "title": "Why Integration requires a combination of linking and syncing",
        "content": "\nIn this article, Tasktop explores the strengths of Open Services for Lifecycle Collaboration (OSLC) and some of the areas of improvement. The conclusion is that flexibility and value are what drive integration decisions.\n\nRead\n",
        "tags": [
            "article",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/article-20170715",
        "title": "Debunking the OSLC Link-Only Myth",
        "content": "\nMost large organizations require dozens and sometimes hundreds of specialized software tools to manage the lifecycle of the physical products or software applications they create. It isn't hard to imagine the monumental waste these organizations incur in attempting to manually coordinate the efforts of the teams that use these many disparate tools to create a single product. Open Services for Lifecycle Collaboration (OSLC) is an open community for creating specifications for integrating lifecycle activities across tools to address this problem. Now imagine how much more happy and productive an organization would be if all those tools could integrate via standard interfaces. In broad strokes, this is the goal of the OSLC community.\n\nRead\n",
        "tags": [
            "article",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/developing-oslc-applications",
        "title": "Developing OSLC Applications",
        "content": "\nGet started with developing OSLC applications\n\n“OSL-whaaaat now?”\n\nOpen Services for Lifecycle Collaboration (OSLC) is a community that writes specifications to integrate software. Learn more at Why develop OSLC applications and at our main site.\n\nFor a high-level overview of how to add OSLC support to software, we recommend our video \"Getting started on implementing OSLC\":\n\n{{ youtube -oXqudLmNMI }}\n\nThe description on YouTube includes a table of contents and links to references.\n\n Explore our tutorial\n\nFor a more detailed look at what goes into OSLC support, read through our tutorial \"Integrating Products with OSLC\", which walks you through building an adapter that adds OSLC support to the popular Bugzilla defect-tracking software.\n\nThe concepts in the tutorial are broadly applicable to other software.\n\nIf you're building an OSLC provider (in other words, software that outputs OSLC resources), you'll learn how to\n\nProvide Service Providers and catalogs\nRepresent Bugzilla bugs as OSLC Change Management resources\nProvide UI Previews\nProvide a delegated UI for finding existing bugs\nProvide a delegated UI for creating new bugs\nAllow software to programmatically create new bugs\n\nIf you're building an OSLC consumer application, you'll learn how to:\n\nLink to OSLC resources in another application and display previews\nFind, select, and create bugs without leaving the application with delegated UIs\nParse OSLC resources\nCreate new bugs automatically\n\nThe tutorial has working sample applications and detailed instructions for running them.\n\nWhy develop OSLC applications\n\nIntegrating software is hard; we want it to be easier. And we need your help.\n\nWe define standardized ways to represent common resources in software development (for example, a defect or a performance test). We also define standardized methods to allow other applications to access, display, preview, find, create, and update those resources.\n\nWith standardized resources and methods, any tool can access and manipulate the data and artifacts from any other compliant tool. So instead of a variety of fragile point-to-point integrations you have one common way to connect and integrate many products. It's not quite plug-and-play, but it's close.\n\nWe want OSLC to succeed because better and easier integrations will save everyone time and money. And we think that software with OSLC integration has a competitive advantage.\n\nDon't just take our word for it. Icaro Technologies estimated that they could have saved two million dollars over two years if they used OSLC standards for a project with more than 10 integrations. And major industry groups like SPRINT and EADS have decided that OSLC-compliant software can help them collaborate and verify requirements on highly complex products like commercial airplanes.\n\nOSLC specifications are free to adopt, and we want them to spread. So help us out!\n\n Technical foundations\n\nTo build software that supports OSLC, you should be familiar with the following concepts:\n\nLinked Data\n\nLinked data is the main technical foundation of all of our specifications. The video below provides a brief overview of the value of linked data and how we implement it with OSLC:\n\n{{ youtube 40mjwqGEKBU }}\n\nIf you're new to linked data and RDF, we've put together a playlist of videos that can help you catch up.\n\n RESTful web architecture and HTTP\n\nYou should be familiar with designing RESTful applications.\n\nFor a quick primer, we recommend “Learn REST” by Dr. M. Elkstein, particularly these sections:\n\nWhat is REST?\nREST as Lightweight Web Services\nHow Simple is REST?\nMore Complex REST Requests\nREST Server Responses\n\nFor OSLC implementations, you must use HTTP protocol.\n\nRDF, Turtle, JSON, and HTML\n\nWe require services and resources to be represented in RDF, but you might prefer to supplement that with a variety of machine-readable and human-readable formats like Turtle, JSON, or HTML.\n\nInstead of string parsing and regular expressions, you will definitely want to explore using an RDF parser such as Apache Jena.\n\n OAuth\n\nOSLC does not require OAuth, but it is the most common approach for managing authentication between clients.\n\nServices, resources and design patterns\n\nThe OSLC Core specification defines the basic patterns and protocols that any OSLC software must implement. The other workgroups define additional resources or extend existing ones, but they do not add new protocols.\n\nHere are the major resources defined in the OSLC Core specification:\n\n| Resource or Pattern | Description | More information |\n|----------|----------------------|--------------------|\n| Service Provider | A resource that describes a collection of resources and tells you how to create new resources, find existing resources, or expose a user interface to do either | OSLC Primer: Service Provider |\n| Resource Paging | A pattern to break long lists of resources into smaller pages, and provide a URL for the next page | OSLC Primer: Resource Paging |\n| Queries | Standard query string patterns to retrieve a subset of resources or properties | OSLC Primer: Query mechanisms |\n| Resource Shapes | Documents that define and describe the properties a resources should have, including acceptable values, cardinality, and whether or not those properties are required | OSLC Primer: Resource Shapes |\n| Creation Factory | A service that creates new resources and (via HTTP POST) and may also provide the Resource Shape for new resources | Core 2.0: Creation Factories |\n| Service Provider Catalog | A resources that lists a set of ServiceProviders | OSLC Primer: ServiceProvider |\n| Delegated User Interface (UI) dialogs | A method for embedding an interface to create or find resources inside another tool | OSLC Primer: Delegated UI dialogs |\n| UI Previews | A method for discovering and displaying a preview of a resource in another tool | OSLC Primer: UI Preview |\n\nTo explore some of our other specifications, the OSLC Core Workgroup maintains a list of OSLC vocabularies and specifications that includes relationship diagrams.\n\n Tools & SDKs\n\nEclipse Lyo\n\nThe Eclipse Lyo project has a variety of tools to help you adopt OSLC specifications:\n\nOSLC4J: a Java SDK for OSLC providers and consumers that lets you define OSLC resources and convert them to Java objects\nPerl libraries and samples: modules for Perl for interacting with OSLC providers, including the Net-OSLC PERL library\nTest Suites: test if your OSLC applications complies with the requirements of our specifications\nTracked Resource Set SDK: a test suite, toolkit, and sample application for the Tracked Resource Set specification\n\nYou do not have to use the Eclipse application to use Eclipse Lyo: Although much of the documentation assumes you will be using Eclipse, the source code is available in a Git repository and much of it does not require the Eclipse application to work.\n\n Sample applications and code\n\nIf you'd like to explore some existing code, there are a variety of samples and existing applications available.\n\nThe Communications Workgroup has a list of Open Source OSLC projects (along with their licenses).\n\nIf you'd like to explore a basic application that provides OSLC Service Provider resources and UI previews, Vijay Kalangumvathakkal of developerWorks has some simple applications available to download and try out.\n\nOur tutorial walks you through a working adapter that adds OSLC Change Management support to Bugzilla and a simple consumer application.\n\nFinally, many of the software development kits include sample applications. The OSLC4J component of Eclipse Lyo has a variety of applications:\n\na stock quote sample applications\na Change Management provider\na Quality Management provider\nan Automation provider\nthe aforementioned Bugzilla Change Management adapter\n\nThe Lyo Client component in Eclipse Lyo includes additional APIs and sample code that addresses a variety of common OSLC use cases including login, OAuth, service discovery, and queries.\n\nThe OSLC4Net project includes sample applications if you favor .NET/C#.\n\nOSLC Open Source Node.js Projects\n\nEclipse/Lyo provides a set of Java based APIs and generative tools to support the creation of OSLC domain servers and integrated client applications. While Eclipse/Lyo provides a very rich and robust platfrom for OSLC development, it has a relatively high learning curve and that can increase development time, costs and risks.\n\nOSLC4JS represents a set of related Open Source projects supporting the creation and integration of OSLC based client and server applications that leverage the dynamic and asynchronous capabilities of JavaScript and Node.js. The LDP Service and OSLC Service projects provide Express.js middleware components that can be used to add LDP and/or OSLC services to any Express Web application. The OSLC Browser and OSLC Server projects use these services to create sample OSLC client and server apps that can easily and dynamically adapted to any OSLC domain, extensions to domains, and/or integrations between domains.\n\nOSLC4JS's goal is to minimize the cost of developing the OSLC specifications, reference implementation and test suites. The OASIS OSLC specifications would also benefit from a reference implementation in dynamic language such as JavaScript.\n\n The OSLC4JS Projects\n\nThe following sections provide a brief description of each OSLC4J sub-project and provide links to the development sites and related work products. The figure below shows the relationship between the modules created in the projects, and how they are assembled into a Web application.\n\nAdapter middleware in the figure represents some Express.js middleware component that provides CRUD access to some existing data source. This provides a simple way for vendors to provide OSLC access to their data sources without having to implement the details of OSLC and/or LDP.\n\nA oslc4js Slack Channel has been created to facilitate collaborative development of these Open Source Projects.\n\n| Project | Description | More information |\n|---------|------------ |------------------|\n| OSLC Browser | A sample OSLC Web application that uses the OSLC Service to provide a means of browsing OSLC resources. OSLC Browser allows you to configure a connection pool of contributing OSLC servers, and provides a convenient means of browsing the content contributed by those servers. The federation of thigs information is supported by the OSLC service with can also support OSLC domains, extension to domains, integration between domains. This allows the OSLC Browser to act as a federation hub for OSLC resources where stakeholder viewpoints, views (i.e., active dashboards) can be created to support integration needs. | Mural Design Wiki Track & Plan Bluemix App app route |\n| OSLC Client API | A simple Node.js asynchronous OSLC client API to facilitate rich application development in JavaScript. This API may be attractive to client developers who wish to access OSLC capabilities and resources through a more logical API abstraction rather than more raw REST services. | Wiki Track & Plan npm package|\n| OSLC Service | A generic Node.js Express middleware OSLC 3.0 service that can support any domain and can be easily adapted to any applicable data source. This services also utilizes the LDP Service. | Wiki Track & Plan npm package |\n| OSLC Server | A minimal OSLC server that uses the oslc-service and ldp-service and can be accessed using a browser REST client. An instance of this server is deployed to IBM Bluemix in order to provide a platform for OSLC experimentation and testing. | Wiki Track & Plan Bluemix App app route |\n| LDP App | A sample Linked Data Platform (LDP) Web application that uses the LDP Service and supports CRUD operations and a graph of linked data. | Wiki Track & Plan Bluemix App app route |\n| LDP Service | Express middleware providing LDP capabilities to Web apps, with storage of JSON-DL in MongoDB. | Wiki Track & Plan npm package |\n",
        "tags": [
            "tutorial"
        ]
    },
    {
        "uri": "/../resources/example-tutorial",
        "title": "Example tutorial",
        "content": "\nA title of section\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\n This is a subsection\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\nAnd this is another\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\n I like code\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\nimport { Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({})\nclass ExampleComponent implements OnInit {\n  @Input()\n  person: Person;\n}\n\nAnother title of section\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\n I like to paste\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\nHow many titles of sections we can have\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\n This is also a section\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!\n\nSections sections\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Illo quibusdam ea voluptas reprehenderit debitis nesciunt ex sed corrupti corporis fugiat! Quia rerum maiores minus inventore odio architecto nisi aperiam optio!",
        "tags": [
            "tutorial"
        ]
    },
    {
        "uri": "/../resources/get-started-with-developing-oslc-applications",
        "title": "Get started with developing OSLC applications",
        "content": "“OSL-whaaaat now?”\n\nOpen Services for Lifecycle Collaboration (OSLC) is a community that writes specifications to integrate software. Learn more at Why develop OSLC applications and at our main site.\n\nFor a high-level overview of how to add OSLC support to software, we recommend our video \"Getting started on implementing OSLC\":\n\nThe description on YouTube includes a table of contents and links to references.\n\nExplore our tutorial\n\nFor a more detailed look at what goes into OSLC support, read through our tutorial \"Integrating Products with OSLC\", which walks you through building an adapter that adds OSLC support to the popular Bugzilla defect-tracking software.\n\nThe concepts in the tutorial are broadly applicable to other software.\n\nIf you're building an OSLC provider (in other words, software that outputs OSLC resources), you'll learn how to\n\nProvide Service Providers and catalogs\nRepresent Bugzilla bugs as OSLC Change Management resources\nProvide UI Previews\nProvide a delegated UI for finding existing bugs\nProvide a delegated UI for creating new bugs\nAllow software to programmatically create new bugs\nIf you're building an OSLC consumer application, you'll learn how to:\n\nLink to OSLC resources in another application and display previews\nFind, select, and create bugs without leaving the application with delegated UIs\nParse OSLC resources\nCreate new bugs automatically\nThe tutorial has working sample applications and detailed instructions for running them.",
        "tags": [
            "tutorial"
        ]
    },
    {
        "uri": "/../resources/oslc4js",
        "title": "OSLC4JS",
        "content": "\nOSLC4JS is a set of related open source projects that support the creation and integration of Open Services for Lifecycle Collaboration (OSLC)-based client and server applications that leverage JavaScript and Node.js capabilities. OSLC4JS projects cover the complete end-to-end capabilities required to build, extend, and integrate web apps that exploit OSLC integration capabilities and linked data resources.\n\nWhy should I contribute?\n\nBecause you’ll see a lot of benefits. Developers will find that it makes it easy to add OSLC capabilities to any Node or Express Web application, including client and server components of that application. It will help you extend and integrate OSLC applications to support end-user scenarios and comprehensive cross-tool governance. \n\nGo\n",
        "tags": [
            "tool",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/presentation-20171109",
        "title": "Tasktop: Helping a Center of Excellence live up to its name",
        "content": "\nTasktop Sync Case Study on enabling the customer to increase both velocity AND quality.\n\nView\n",
        "tags": [
            "presentation",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/presentation-20171117",
        "title": "PROSTEP OpenPDM OSLC Adapter Product Overview",
        "content": "\nThe PROSTEP OpenPDM OSLC Adapter makes your PLM system(s) available to the OSLC world. It offers OSLC standard services, especially for those PLM systems which don’t  offer native ones. The adapter is an add-on for the OpenPDM integration framework which provides connectors to a wide range of systems. The OpenPDM OSLC services can be integrated in any OSLC consuming applications. The gap between ALM and PLM can be closed.\n\nThis presentation provides details on the OpenPDM OSLC Adapter including overview, reference project and technical information. For more details  contact infocenter@prostep.com. \n\nDownload\n",
        "tags": [
            "presentation",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/tool-20111111",
        "title": "Eclipse Lyo",
        "content": "\nThe Eclipse Lyo project focuses on providing an SDK to help the Eclipse community to adopt OSLC specifications and build OSLC-compliant tools. The source code is available in a Git repository.\n\nOSLC4J: A Java toolkit to help you build OSLC-ready Java applications\nTest suites: Verify that your OSLC implementations are compliant with the specifications\nReference Implementations: See how OSLC functions with working samples\n\nGo\n",
        "tags": [
            "tool",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/tool-20130121",
        "title": "OSLC4Net",
        "content": "\nA toolkit for developing OSLC consumers and providers for .NET environments that contains the following tools:\n\nOSLC4NET SDK, which is very similar to the OSLC4J component of Eclipse Lyo: you can model OSLC resources as .NET objects, annotate them with OSLC attributes, and use the REST services provided by ASP.NET MVC 4 for HTTP requests and request handling.\nOSLC Change Management consumer implementation in the form of a test suite\n\nGo\n",
        "tags": [
            "tool",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/video-20151109-1",
        "title": "Get IBM RTC and HP ALM To Blend Together Like Peanut Butter and Jelly",
        "content": "Webinar on integrating HP ALM and IBM RTC, presented by Wesley Coelho, Director of Business Development at Tasktop Technologies, and Lance Knight, Director of Solution Architects at Tasktop.\n\nWatch\n",
        "tags": [
            "video",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/video-20151109-2",
        "title": "Tear Down the Walls Between Requirements, Development and Testing",
        "content": "In this webinar, Robert Elves, co-founder of Tasktop Technologies, describes how Business Analysts using Rational Requirements Composer can successfully create and revise Requirements while automatically keeping the Testing team up-to-date on the latest changes through the use of Tasktop Sync.\n\nWatch\n",
        "tags": [
            "video",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/video-20151118-jad-ecs",
        "title": "Linked Data and OSLC for Tool Interoperability",
        "content": "\nIn a lecture given in an OSLC workshop at the Embedded Conference Scandinavia, Jad El-khoury explains the OSLC standard, the underlying linked data technologies that constitute a foundation for the OSLC. After watching the lecture, you will gain a solid understanding of the linked data fundamentals, have a comperehsive overview of various parts of OSLC and be ready to individually work through the workshop material for Eclipse Lyo, an SDK for implementing OSLC-compliant solutions.\n\nPart 1\n\nPart 2\n",
        "tags": [
            "video",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/video-20170616-andrew",
        "title": "New and updated tools in Eclipse Lyo: Toolchain Designer & Lyo Store",
        "content": "\nIn this video, Andrew Berezovskyi, a Lyo project lead will describe the latest\nsupport tools that were contributed to Eclipse Lyo, which will further aim the\ndevelopment of OSLC adaptors and toolchains.\n\n{{ youtube tZxPzlSTdeM }}\n\nLyo is an Eclipse project aimed at helping the community adopt OSLC\nspecifications and build OSLC-compliant tools. Learn more about Lyo on\nhttps://www.eclipse.org/lyo/",
        "tags": [
            "video",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../resources/website-20170825",
        "title": "Beyond PLM",
        "content": "\nA blog, by Oleg Shilovitsky, for the community of people looking for information about Engineering and Manufacturing Software. This has much information relevant for the OSLC community.\n\nVisit\n",
        "tags": [
            "website",
            "no-tutorial"
        ]
    },
    {
        "uri": "/../search/_index",
        "title": "Results search",
        "content": "",
        "tags": []
    },
    {
        "uri": "/../specifications/_index",
        "title": "Specifications",
        "content": "\nThe table below provides a convenient place to see the currently available OSLC specifications, their status, and links to the documents.  Many of these specifications are still under development so you should consult the actual documents for the most up to date information.\n\nAll OSLC specifications are governed by OASIS Technical Committees including:\n\nOSLC Core Technical Committee\nOSLC Domains Technical Committee\nOSLC PROMCODE Technical Committee\n\nThe titles below are abbreviated for convenience. The full titles a available from the linked documents. For multi-part specifications, typically only the main specification is listed. The other parts are available from that specification.\n \nStatus refers to the OASIS Standards Track Work Products in the OASIS Naming Directives\n\nWorking Draft (WD) \\[not approved, no official status\\]\nCommittee Specification Draft (CSD)\nCommittee Specification Public Review Draft (CSPRD)\nCommittee Specification (CS)\nCandidate OASIS Standard (COS)\nOASIS Standard (OS)\nFinal Indicates an open-services.net OSLC specification that has not yet been migrated to OASIS.\n\nNote: The open-services.net specifications that are being migrated to OASIS by the OSLC Domains TC are strictly a document maintenance exercise. That is, a Final open-service.net specification may appear as an OASIS CSD with different formatting, but will have the same specification normative content. Migration of these documents to OASIS will therefore have no impact on implementations. open-services.net specifications that do not yet have at least OASIS CSD status will reference the existing (PDF) open-services.net specification, and the status will be shown in italics.\n\n| Title | Status | Governing OASIS TC | Description |\n|-------|--------|--------------------|-------------|\n| Core 3.0 | CS | OSLC Core TC | A collection of specifications that defines the basic patterns, protocols and capabilities of OSLC clients and servers. |\n| Resource Shape 3.0 | CS | OSLC Core TC | Describes constraints on OSLC vocabularies for different proposes, including for OSLC itself. |\n| OSLC Query 2.0 | Finalized | OSLC Core TC | Defines a simple, implementation independent selection and projection query capability. |\n| Tracked Resource Set 2.0  | Finalizing Draft | OSLC Core TC | Allows servers to expose a set of resources whose state can be tracked by clients. |\n| Configuration Management 1.0 | WD | OSLC Core TC | OSLC Configuration Management defines an RDF vocabulary and a set of REST APIs for managing versions and configurations of linked data resources from multiple domains. |\n| Requirements Management 2.0 | Finalized | OSLC Domains TC | Defines the OSLC services and vocabulary for the Requirements Management domain. |\n| Change Management 3.0 | CSPRD01 | OSLC Domains TC | Defines the OSLC services and vocabulary for the Change Management domain. |\n| Quality Management 2.0 | Finalized | OSLC Domains TC | Defines the OSLC services and vocabulary for the Quality Management domain. |\n| Architecture Management 2.0 | Finalized | OSLC Domains TC | Defines the OSLC services and vocabulary for the Architecture Management domain. |\n| Asset Management 2.0 | Finalized | OSLC Domains TC | Defines the OSLC services and vocabulary for the Asset Management domain. |\n| Automation 2.0 | Finalized | OSLC Core TC | Defines the OSLC services and vocabulary for the domain that supports automation of sequences of actions on OSLC resources. |\n| Performance Monitoring 2.0 | Finalized | OSLC Domains TC | Defines the OSLC services and vocabulary for the Performance Monitoring domain. |  \n| PROMCODE 1.0 | WD | OSLC PROMCODE TC | The PROMCODE (Project Management of Contracted Delivery for Software Supply Chains) defines OSLC services and vocabulary for exchanging project management information across organizational boundaries in support of Software Supply Chain (SSC) delivery. |        \n\nThere are some additional OSLC documents that are currently inactive but could be sources of future specifications:\n\nReporting\nReconciliation\nProduct Definition\nEstimation and Measurement\nArchitecture Management 3.0\nAutiomation 2.1\nActions 2.0\n\nAnyone interested in contributing to these specifications should join the applicable TC and propose additional work to add to the TC charter.",
        "tags": []
    },
    {
        "uri": "/../specifications/archive/core-2.0/README",
        "content": "The conversion is done via:\n\n    pandoc --from twiki --to markdown_mmd -o _index.md source.twiki\n",
        "tags": []
    },
    {
        "uri": "/../specifications/archive/core-2.0/_index",
        "content": "Open Services for Lifecycle Collaboration Core Specification Version 2.0\n\n **WARNING! This page is a browser-friendly version of the [Core 2.0\n specification archived on\n OASIS](https://www.oasis-open.org/apps/org/workgroup/oslc-core/download.php/61054/Oslc%20Core%202.0%20Final.pdf).**\n\nAuthors\n\nDave Johnson, Steve Speicher\n\nContributors\n\nThe OSLC Core Specification Workgroup\n\nLicense\n\nThis work is licensed under a [Creative Commons Attribution\nLicense](http://creativecommons.org/licenses/by/3.0/us/).\n\nNotation and Conventions\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED, SHALL\", \"SHALL NOT\",\n\"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\" and \"OPTIONAL\" in this\ndocument are to be interpreted as described in\nRFC-2119. This document is a\nmixture of normative and informative text. See the [the\nglossary](#TheGlossary) below for definitions of these terms.\n\n------------------------------------------------------------------------\n\nOverview\n\n(this section is informative)\n\nThe Open Services for Lifecycle Collaboration (OSLC) initiative is\ncreating a family of web services specifications for products, services\nand other tools that support all phases of the software and product\nlifecycle. The purpose of these specifications is to enable integration\nbetween products that support Application Life-cycle Management (ALM)\nand Product Life-cycle Management (PLM). Each part of the lifecycle or\ndomain has its own group and specification, for example there are Change\nManagement, Quality Management, Estimation & Measurement and more. Each\nof the domain specifications are built upon this core specification.\n\nThis OSLC Core Specification sets out the common features that every\nOSLC Service can be expected to support using terminology from the World\nWide Web Consortium (W3C). New terminology that we introduce can be\nfound in the glossary section below. This specification is mostly about\nOSLC Services, it specifies what OSLC Services MUST, SHOULD and MAY do.\nIt also contains some required behaviors for OSLC clients and rules for\nOSLC domain specifications that extend this specification.\n\nOSLC Services are accessible via a Service Provider Resource that\ndescribes the Services offered. Each Service can provide Creation\nFactories for resource creation, Query Capabilities for resource query\nand Delegated UI Dialogs to enable clients to create and select\nresources via a web UI. Query Capabilities and Creation Factories may\noffer Resource Shapes that describe the properties of resources managed\nby the service. This is illustrated in the diagram below. See the\nsection below on Service Provider Resources for further discussion of\nthese concepts.\n\nFigure \\#1: OSLC Core Specification concepts and relationships\n\n<img alt=\"Diagram of OSLC concepts\"\nsrc=\"/img/specifications/core-2.0/oslc-core-overview.png\"/\n\nThis specification establishes terminology and rules for defining\nresources in terms of the property names and value-types that are\nallowed and required. OSLC domain specifications are expected to use\nthese rules and terminologies to describe their resources. See the OSLC\nDefined Resources section for more on this topic.\n\nThis specification also sets out rules for creating resource\nrepresentations in RDF/XML, JSON, Atom and Turtle formats. OSLC domain\nspecifications are expected to refer to these rules when specifying how\ntheir resources are to be represented. See the OSLC Defined Resource\nRepresentations section for the representation rules and examples of\neach format.\n\n\\#AboutTheVersionNumber About the version number. We use the version\nnumber \"2.0\" even though there has never been an OSLC Core Version 1.0\nspecification. We do this because this OSLC Core specification was\nwritten after a series of version 1.0 domain specifications were\nfinalized by OSLC workgroups. The version 2.0 domain specifications will\nall be based on this Core specification and to avoid confusion this\nspecification will also be known as Version 2.0.\n\nAbout RDF. The resource and property-based data model used in OSLC\nresources is based on the Resource Description Framework (RDF) and OSLC\nrequires RDF representations, but OSLC uses a small number of RDF\nconcepts and does not require implementers to provide an RDF\ntriple-store or a SPARQL query-engine.\n\nDesign considerations\n---------------------\n\nThe core philosophies of OSLC are to build on the powerful and scalable\narchitecture of the World Wide Web and to do the simplest possible\nthings that will work.\n\nBuild on the WWW. OSLC builds on the architecture of the WWW and\nfollows the REST architectural pattern. This means that OSLC Services\nprovide a uniform HTTP interface, OSLC URIs are stable and opaque and,\nin simple terms, OSLC works like the web.\n\nKeep things simple. Doing the simplest things that will possibly\nwork means a couple of different things in regard to OSLC. It means\nstarting with simple and existing concepts. For example, we model\neverything as resources with property values and do not stray from that\nmodel. Keeping things simple also means building on established and\nwell-known specifications, but also carefully limiting the number of\nother specifications that we reference. This simplicity is intended to\nenable loose coupling and to make life easier for everybody: OSLC domain\nwork groups, OSLC Service implementers and OSLC client developers.\n\nAccommodate different schemas. Because of the breadth of the OSLC\ndomains, spanning lifecycle and platforms, OSLC has to work for systems\nwith very different data schemas or no schemas at all. Flexibility is\nneeded, but some OSLC Services must be able to offer information about\nresource properties so that clients can learn which are allowed and\nrequired for resource creation, query and reporting.\n\nAccommodate different representations. Different client platforms\nmight require or at least prefer different representations. For example,\nin the browser a JSON or Atom format representation might work best.\nOSLC Services will all support RDF/XML and may support other formats\nincluding JSON, Atom and Turtle.\n\nAlign with the W3C Linked Data initiative. Instead of defining a new\ndata model, OSLC’s resource and property-value approach is based on\nindustry standard Resource Description Framework (RDF) data model. This\nmodel allows OSLC to keep things simple, build on the WWW and\naccommodate different schemas.\n\nGlossary of terms\n-----------------\n\nThis is a guide to some of the terminology used in this document. The\nfollowing definitions are standard W3C concepts. OSLC uses these\nconcepts without modification – their definitions are summarized here\nfor the convenience of the reader. See http://www.w3c.org.\n\nResource: A network data object or service that can be\n    identified by a URI. Resources may be available in multiple\n    representations (e.g. multiple languages, data formats,\n    size, resolutions) or vary in other ways. (reference: HTTP)\n\n!-- --\n\nRepresentation: An HTTP payload entity, included in an HTTP\n    response, that is subject to content negotiation. There may exist\n    multiple representations. associated with a particular HTTP\n    response status. (reference: HTTP)\n\n!-- --\n\nURI: Uniform Resource Identifiers are simply formatted strings\n    which identify--via name, location, or any other characteristic -- a\n    resource (reference: URI Syntax)\n\nHere are the OSLC specific terms used in this specification.\n\n(these definitions are normative)\n\nOSLC Domain: an OSLC Domain is one ALM or PLM topic area such as\n    Change Management, Requirements management or Automation. Each OSLC\n    Domain will have its own OSLC specification that complies with this\n    Core specification.\n\n!-- --\n\nOSLC Service: a set of capabilities that enable a web client to\n    create, retrieve, update and delete resources managed by an ALM or\n    PLM product or online service offering and associated with one\n    OSLC Domain.\n\n!-- --\n\nOSLC Service Provider: a product or online service offering that\n    provides an implementation of one or more OSLC Services, which may\n    themselves implement different OSLC Domain specifications.\n\n!-- --\n\nOSLC Resource: a resource that is managed by an OSLC Service,\n    may have properties and may link to other resources including those\n    provided by other OSLC Services.\n\n!-- --\n\nOSLC Defined Resource: a resource that is defined by an OSLC\n    specification, see OSLC Defined Resources below.\n\n!-- --\n\nOSLC Defined Properties: resource properties that are defined by\n    an OSLC specification, defined by an OSLC Resource Shape or both.\n\n!-- --\n\nOSLC Resource Shape: defines the set of OSLC Properties expected\n    in a resource for specific operations (i.e. creation, update\n    or query) for each their value types, allowed values, cardinality\n    and optionality. Examples of such operations include OSLC Creation\n    Resource and Query Resource. Other examples might include\n    applications that display data in tables.\n\n!-- --\n\nOSLC Creation Factory. A creation factory provides a URI used to\n    create new resources via HTTP POST and may also provide Resource\n    Shapes that describe the types of resources that may be created.\n\n!-- --\n\nOSLC Query Capability: A query capability provides a base\n    URI for forming query resource URIs and, optionally, Resource Shapes\n    that describe the property values that may be used in query\n    expressions and returned in query results.\n\n!-- --\n\nOSLC Response Info Resource: An OSLC Defined Resource that\n    provides information about a paged resource representation, e.g. the\n    next page in a multi-page query result representation.\n\nHere are some industry terms that we use in this specification:\n\nApplication Lifecycle Management (ALM): ALM is the marriage of\n    business management to software engineering made possible by tools\n    that facilitate and integrate requirements management, architecture,\n    coding, testing, tracking, and release management\n    (http://en.wikipedia.org/wiki/Applicationlifecyclemanagement).\nProduct Lifecycle Management (PLM): In industry, product\n    lifecycle management (PLM) is the process of managing the entire\n    lifecycle of a product from its conception, through design and\n    manufacture, to service and disposal (from\n    http://en.wikipedia.org/wiki/Productlifecyclemanagement).\n\nAnd finally, we use the following two terms to describe portions of the\nOSLC Core specification:\n\nNormative. Normative sections of this document set forth\n    requirements that must be met to establish conformance with the OSLC\n    Core specification; or providing recommendations or optional courses\n    of action. This is done using use words from\n    RFC-2119 (e.g. MUST, SHOULD,\n    MAY, etc.). For recommended or optional features, conformance is not\n    dependent on the fact of implementation, but, if implemented, that\n    implementation is as prescribed in this specification. Contrast\n    with informative.\n\n!-- --\n\nInformative. Informative text provides background\n    or explanation. Contrast with Normative. It should be clear which\n    sentences and paragraphs are informative from the context and the\n    absence of RFC-2119 keywords. Sections that are purely informative\n    will be marked as informative. Informative text that might be\n    mistaken for normative will also be marked.\n\n------------------------------------------------------------------------\n\nOSLC Defined Resources\n\nAn OSLC Resource is a resource managed by an OSLC Service. An OSLC\nResource is typically something like a Change Request, a Requirement or\nsome other ALM or PLM artifact or record, but an OSLC Resource could\nalso be a video or a presentation file. The resource’s storage medium is\nunconstrained by OSLC, e.g. it could be stored in a relational database,\na flat-file on disk, a source code control system, or in any other way.\n\nAn OSLC Service can manage any type of resource; OSLC specifications\nonly constrain an OSLC Service’s behavior with respect to resource types\nit manages that are defined by OSLC specifications (OSLC Defined\nResources). OSLC Defined Resources may be specified in any OSLC\nspecification, including this document. Resources are defined by the\nproperties that are allowed and required in the resource.\n\nOSLC Defined Resources\n----------------------\n\nOSLC uses a simple model of resources with property values intended to\nbe consistent with the Resource Description Framework (RDF) data model\n(reference: RDF Concepts). OSLC also builds upon the Extensible Markup\nLanguage (XML) namespace mechanism (reference: XML Namespaces).\n\nWhen specifying a resource or a property, OSLC Specifications define its\ntype as a URI which can be decomposed into a namespace URI and a name.\nWe abbreviate type URIs as Prefixed Names (reference: Prefixed Names),\nwhich are represented in XML as QNames. The namespace used for resources\ndefined in this specification is defined as follows:\n\nNamespace URI: http://open-services.net/ns/core#\nDefault Prefix: oslc\n\nWhen defining an OSLC Resource type, OSLC Specifications MUST\nprovide the following information:\n\nName (String): name of the resource which MUST be valid as\n    the Local Name part of a QName (reference: XML Namespaces).\nURI (URI): The URI of the resource definition. Per the rules of\n    Prefixed Names, this URI is formed by appending the Name to the end\n    of the Namespace URI in the specification that defines the resource.\n    For example, the resource named Service (defined below) gets the\n    Type URI of http://open-services.net/ns/core#Service.\n\nOnce a resource type is defined, its allowed and required properties can\nbe defined.\n\nRegardless of any property definitions, providers and clients MAY impose\nimplementation-specific limits on resources they accept. For example,\nthey are not required to accept/create/store resources whose RDF triples\ncontain objects with arbitrarily large literal values.\n\nDefining OSLC Properties\n\nOSLC Specifications MAY provide a list of properties allowed and/or\nrequired for a particular domain and operation on an OSLC Defined\nResource; if no operation is specified, then the list &lt;br\n/&gt;applies to all operations governed by that specification.\nSpecifications that provide a list of properties and constraints on them\nSHOULD provide the following information for each property that they\ndefine.\n\nName: name of the property which MUST be valid as the Local\n    Name part of a QName (reference: XML Namespaces).\nURI: The URI that identifies the property. The URI is formed by\n    appending the Name to the end of the Namespace URI associated with\n    the property. For example, the resource named\n    oslc:ServiceProviderCatalog (defined below in the Service\n    Providers Section) defines a property named domain with the URI of\n    http://open-services.net/ns/coredomain\nDescription: Description of the property.\nOccurs: value MUST be one of:\n    [ http://open-services.net/ns/core#Exactly-one\n        ](http://open-services.net/ns/core#Exactly-one)\n    [ http://open-services.net/ns/core#Zero-or-one\n        ](http://open-services.net/ns/core#Zero-or-one)\n    [ http://open-services.net/ns/core#Zero-or-many\n        ](http://open-services.net/ns/core#Zero-or-many)\n    [ http://open-services.net/ns/core#One-or-many\n        ](http://open-services.net/ns/core#One-or-many)\nValue-types: A property MAY allow multiple value-types and a\n    value MUST satisfy one or more of them. Each value-type MUST\n    be a URI that corresponds to one of the following:\n    Literal value-types:\n        Boolean: a boolean type as specified by XSD Boolean (\n            http://www.w3.org/2001/XMLSchema#boolean, reference:\n            XSD Datatypes).\n        DateTime: a Date and Time type as specified by XSD\n            dateTime ( http://www.w3.org/2001/XMLSchema#dateTime,\n            reference: XSD Datatypes).\n        Decimal: a decimal number type as specified by XSD\n            Decimal ( http://www.w3.org/2001/XMLSchema#decimal,\n            reference: XSD Datatypes).\n        Double: a double floating-point number type as specified\n            by XSD Double ( http://www.w3.org/2001/XMLSchema#double,\n            reference: XSD Datatypes).\n        Float: a floating-point number type as specified by XSD\n            Float ( http://www.w3.org/2001/XMLSchema#float, reference:\n            XSD Datatypes).\n        Integer: an integer number type as specified by XSD\n            Integer ( http://www.w3.org/2001/XMLSchema#integer,\n            reference: XSD Datatypes).\n        String: a string type as specified by XSD String (\n            http://www.w3.org/2001/XMLSchema#string, reference:\n            XSD Datatypes).\n        XMLLiteral: a Literal XML value ( [\n            http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral\n            ](http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral)).\n    Resource value-types:\n        Resource: value is a resource at a specified URI (i.e. a\n            URI Reference) ( [\n            http://open-services.net/ns/core#Resource\n            ](http://open-services.net/ns/core#Resource) ).\n        Local Resource: value is an resource available only\n            inside the resource being defined (i.e. a Blank Node) ( [\n            http://open-services.net/ns/core#LocalResource\n            ](http://open-services.net/ns/core#LocalResource) ).\n        AnyResource: value is either a Resource or **Local\n            Resource** as defined above ( [\n            http://open-services.net/ns/core#AnyResource\n            ](http://open-services.net/ns/core#AnyResource) ).\nRepresentation: for properties with a resource value-type, OSLC\n    specifications should also specify how the resource will\n    be represented. The options are [\n    http://open-services.net/ns/core#Reference\n    ](http://open-services.net/ns/core#Reference) , [\n    http://open-services.net/ns/core#Inline\n    ](http://open-services.net/ns/core#Inline) or [\n    http://open-services.net/ns/core#Either\n    ](http://open-services.net/ns/core#Either).\nRange: for properties with a resource value-type, OSLC\n    specifications should follow the best practices in [Appendix C\n    Guidance on Links and Relationships](OslcCoreSpecAppendixLinks),\n    which usually results in no restrictions on the range of possible\n    resource types allowed, and an informative recommendation in the\n    property description suggesting which resource types implementations\n    should expect to find. This can be specified as a list of one or\n    more resource types specified by URI reference; when no restrictions\n    are required, use the string any. Clients SHOULD allow any resource\n    type as the target of a link. Providers are strongly RECOMMENDED\n    to behave reasonably for all resource types listed in a property’s\n    description, and to degrade gracefully for others, as defined in\n    Appendix C.\nRead-only: Boolean indication of whether or not clients are\n    permitted to replace the property’s value after the resource has\n    been created. Allowable values are: true, false, unspecified.\n    True indicates that providers SHOULD NOT permit clients\n        to change the property’s value after the resource has\n        been created.\n    False indicates that providers MAY permit clients to\n        change the property’s value after the resource has been created.\n    Unspecified indicates that the domain specification leaves\n        the choice up to provider implementations.\n\nIn the rest of this document we will define OSLC resources as described\nabove. The below section titled OSLC Defined Resource Representations\ndefines how OSLC resources are to be represented in RDF/XML, JSON and\nother formats.\n\nOSLC Services that wish to provide the information above in a\nmachine-readable format MAY use OSLC Resource Shapes, see [Appendix\nA: Common Properties and Resources](OSLC Core Spec Appendix A) for more\ninformation.\n\nNOTE: we do not mention Internationalization of strings here because we\nexpect standard HTTP content-negotiation and representation (e.g.\nxml:lang) mechanisms to be used for such.\n\nUnknown properties and content\n------------------------------\n\nFor OSLC Defined Resources, clients SHOULD assume that an OSLC\nService will discard unknown property values. An OSLC Service MAY\ndiscard property values that are not part of the resource definition or\nResource Shape known by the server. If a client needs verification that\nthe requested update was accepted it SHOULD note the HTTP response\nheader ETag value returned with the HTTP PUT, Immediately HTTP GET the\nresource back and compare the HTTP response header ETag value and\ncontents with its expectations. The Service SHOULD NOT return an\nerror code for unrecognized content. A Service MUST return an error\ncode if recognized content is invalid.\n\nThe rule is different for clients. When doing an update, OSLC clients\nMUST preserve any unknown property-values and other content in OSLC\nDefined Resources.\n\nSee following section on Resource Update.\n\nResource Operations\n-------------------\n\nOSLC Services use HTTP for create, retrieve, update and delete\noperations on resources. OSLC Services MUST comply with the HTTP\nspecification (reference: HTTP).\n\nResource Creation\n\n(this section is informative)\n\nTo create an OSLC Defined Resource, or any type of resource managed by\nan OSLC Service, an OSLC client HTTP POSTs a representation of that\nresource to a Creation URI. See the section on [Creation\nFactories](Creation_Factories) for more information.\n\nResource Removal\n\n(this section is informative)\n\nTo delete an OSLC Defined Resource, or any type of resource managed by a\nservice, a client performs an HTTP DELETE on the resource's URI.\n\n Resource Update\n\nTo update an OSLC Resource in an OSLC Service, a client fetches a\nrepresentation of that resource via HTTP GET. The client updates the\nrepresentation and then uses HTTP PUT to send the new representation to\nthe resource's URI.\n\nRecall from [OSLC Defined Resources: Unknown properties and\ncontent](#Unknownpropertiesand_content) above that, when doing an\nupdate, OSLC clients must preserve any unknown property-values and other\ncontent in OSLC Defined Resources.\n\nBecause the update process involves first getting a resource, modifying\nit and then later putting it back to the server there is the possibility\nof a conflict, e.g. some other client may have have updated the resource\nsince the GET. To mitigate this problem, OSLC Services SHOULD use\nthe HTTP If-Match header:\n\nIf the HTTP If-Match header is missing OSLC Services SHOULD\n    return HTTP Bad Request (400) status code to indicate that the\n    header is required.\nIf the HTTP If-Match header is present OSLC Services MUST\n    behave as described in the HTTP specification, returning an HTTP\n    Precondition Failed (412) error to indicate that the header does\n    not match.\nIf the HTTP If-Match header is present and it matches, but there\n    is some other problem or conflict with the update then OSLC Services\n    MAY return an HTTP Conflict (409) to indicate that problem.\n\nNote that section Error Responses below, we specify\nthat when an error occurs and useful information can be provided to\nclients OSLC Services SHOULD return error information in the body of\nthe response.\n\nResource Paging\n---------------\n\nOSLC Services MAY support a technique called Resource Paging to\nenable clients to retrieve resources one page at a time.\n\nWhen a client requests a resource, the client can expect that the entire\nresource will be returned in the response, with all property values.\nThis can be problematic because, in some cases, resources may be so\nlarge that a client might not want to retrieve the entire resource in\none HTTP response.\n\nOne solution for response size-sensitive Clients is to check size before\nloading. Clients that do not wish to load large resources can use the\nHTTP HEAD method to determine the size of a resource and, according to\nthe rules of HTTP the server's SHOULD include an HTTP Content-Length\nheader that indicates the size of the resource as the \"decimal number of\nOCTETs.\" If the size is too large, a client can choose not to retrieve\nthe resource.\n\nAnother solution is to use Resource Paging; here's how it works. To get\na paged version of a resource, a client adds the\n\"keyvalue\" pair =oslc.paging=true to the query component of the\nresource URI and the server MAY respond by returning a\nrepresentation that contains partial information about the resource;\nonly a subset of the resource's property values.\n\nWhen a page is returned and it is NOT the last page in the sequence,\nthen it SHOULD include an oslc:ResponseInfo (defined below), which\nthat contains a resource-valued property oslc:nextPage that links to a\nresource that represents the next page of property-values. Because\npaging is unstable (see below), by the time a client follows an\noslc:nextPage link there may no longe be a next page, in this case the\nserver MAY respond with an HTTP 404 Page Not Found status code.\n\nA client can also request paging by adding the\n\"keyvalue\" pair =oslc.pageSize to the query string component of the\nresource URI. By adding this, a client requests that the server respond\nwith a specific number of property values. For example,\noslc.pageSize=20 indicates to the server that the client would like 20\nvalues per page. OSLC Services MAY ignore oslc.pageSize.\n\nWhen Resource Paging is used, the values of a multi-valued property\nMAY be split across resource pages. Each property value MUST be\nrepresented in its entirety and not split across multiple partial\nresource pages.\n\nProvider response-size limitations\n\nWhen a client requests a resource that an OSLC Service considers to be\ntoo large to return in one response and the client has not indicated\nthat it desires paging (via oslc.paging or oslc.pageSize), the OSLC\nService MAY redirect the client to a representation that contains\npartial information about the resource, as follows:\n\nThe OSLC Service receives an HTTP GET request for a resource that\n    exceeds size limits and URL does not include oslc.paging or an\n    oslc.pageSize key/value pair.\nThe OSLC Service returns an HTTP Status 302 redirect a URL that does\n    include the key/values for paging, as follows:\n    If the client did not indicate paging, the new redirect URL\n        MUST include the oslc.paging pair.\n    If the client indicated a page size, then the redirect URL\n        MUST include the oslc.pageSize pair with a size value that\n        is acceptable to the service.\nThe client MAY choose to follow the redirect and receive a\n    representation that contains partial information about the resource.\n\nOn receiving a resource representation, OSLC Clients SHOULD check\nfor the presence of an oslc:nextPage value to determine if the\nrepresentation contains partial information about the resource. If the\nvalue is present, then paging is in effect and the representation\ncontains partial information about the resource.\n\n Unstable Paging\n\nBecause HTTP is a stateless protocol and OSLC Services manage resources\nthat can change frequently, OSLC clients SHOULD assume that\nresources can change as they page through them using the oslc:nextPage\nmechanism.\n\nStable Paging\n\nSome OSLC Services might wish to guarantee stable paging, meaning that\nthe chain of oslc:nextPage links in a resource represent a snapshot in\ntime and will not change as the client pages through them. OSLC\nspecifications that require stable paging SHOULD state this\nrequirement and specify to which resources it applies.\n\nNote that because stable paging implementations are based on server-side\nstate, it is possible that such state will expire. Implementations\nMAY use the HTTP response code 410 (Expired) to indicate to clients\nthat the next-page link they requested has expired.\n\n Response Information\n\nResource representations returned via Resource Paging MUST include a\nresource of type oslc:ResponseInfo, as defined in this section. A\nresponse info resource representation describes information about a\npaged HTTP response body in which it appears.\n\nName: ResponseInfo\nURI: http://open-services.net/ns/core#ResponseInfo\n\n| Prefixed Name         | Occurs      | Read-only | Value-type  | Represen-tation | Range | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n|:----------------------|:------------|:----------|:------------|:----------------|:------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| dcterms:title       | zero-or-one | True      | XML Literal | n/a             | n/a   | Title of the response                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| dcterms:description | zero-or-one | True      | XML Literal | n/a             | n/a   | Description of response                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| oslc:nextPage       | zero-or-one | True      | Resource    | Reference       | any | Link to next page of response                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| oslc:totalCount     | zero-or-one | True      | Integer     | n/a             | n/a   | This optional property indicates the total number of results across all pages, its value should be non-negative. In the context of a query resource, this value SHOULD be the total number of results, i.e. the number of resources that match the query. In the context of other resources, the value SHOULD be the total number of property values (i.e. RDF triples) of the resource. Unless Stable Paging is in effect, the total count MAY vary as a client retrieves subsequent pages. |\n\nThe subject resource URI of the oslc:ResponseInfo resource\nrepresentation will be the HTTP request URI, or URI from subsequent\nredirects. The response representation may also include properties from\nsubject resources different from the one identified by the request URI.\n\nHere's an example, using the OSLC Core RDF/XML representation guidance,\nthat illustrates how the oslc:ResponseInfo resource representation is\nincluded in addition to the blog entry resource representation.\n\n**Example: Resource Paging, partial response with response info resource\nrepresentation**\n\nExample URI:\nhttp://example.com/blogs/entry/1?oslc.paging=true&pageno=2\n\n &lt;verbatim&gt; &lt;rdf:RDF\n xmlns:oslc\\_blog=\"http://open-services.net/ns/bogus/blogs\\#\"\n xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns\\#\"\n xmlns:foaf=\"http://http://xmlns.com/foaf/0.1/\"\n xmlns:dcterms=\"http://purl.org/dc/terms/\"&gt;\n\n &lt;oslc\\_blog:Entry\n rdf:about=\"http://example.com/blogs/entry/1\"&gt;\n &lt;/oslc\\_blog:Entry&gt;\n\n &lt;oslc:ResponseInfo\n rdf:about=\"http://example.com/blogs/entry/1?oslc.paging=true&pageno=2\"&gt;\n &lt;oslc:nextPage\n rdf:resource=\"http://example.com/blogs/entry/1?oslc.paging=true&pageno=3\"\n /&gt; &lt;/oslc:ResponseInfo&gt;\n\n &lt;/rdf:RDF&gt; &lt;/verbatim&gt;\n\nRefer to the OSLC Defined Resource Representation guidance for an\nexplanation of how the response info resource may be represented in\nRDF/XML.\n\nSelective Property Values\n-------------------------\n\nOSLC Services MAY support a technique called Selective Properties to\nenable clients to retrieve only selected property values.\n\nBy adding the keyvalue pair =oslc.properties, specified below, to a\nresource URI, a client can request a new resource with a subset of the\noriginal resource's values. Here's how the selective properties values\noslc.properties and oslc.prefix work.\n\noslc.properties\n\nThe oslc.properties key=value pair lets you specify the set of\nproperties to be included in the response. Both immediate and nested\nproperties may be specified. A nested property is a property that\nbelongs to the resource referenced by another property. Nested\nproperties are enclosed in brace brackets, and this nesting may be done\nrecursively, i.e. a nested property may contain other nested properties.\n\nFor example, suppose we have a bug report resource at the following URL:\n\n      http://example.com/bugs/4242\n\nSuppose this bug resource has properties such as dcterms:title,\ndcterms:description, and dcterms:creator, and that dcterms:creator\nrefers to a person resource that has properties such as foaf:givenName\nand foaf:familyName. Suppose you want a representation of the bug\nreport that includes its dcterms:title and the foaf:givenName and\nfoaf:familyName of the person refered to by its dcterms:creator. The\nfollowing URL illustrates the use of the oslc.properties query value\nto include those properties:\n\n     http://example.com/bugs/4242?oslc.properties=dcterms:title,dcterms:creator{foaf:givenName,foaf:familyName}\n\nSyntax\n\nThe oslc.properties pair is defined by the oslc_properties term in\nthe following BNF grammar:\n\n     oslc_properties ::= \"oslc.properties=\" properties\n     properties      ::= property (\",\" property)*\n     property        ::= identifier | wildcard | nested_prop\n     nested_prop     ::= (identifier | wildcard) \"{\" properties \"}\"\n     wildcard        ::= \"*\"\n     identifier      ::= PrefixedName\n     PrefixedName    ::= /* see \"SPARQL Query Lanaguage for RDF\", http://www.w3.org/TR/rdf-sparql-query/rPrefixedName */\n\noslc.prefix\n\nIn our examples of oslc.properties, property names include a URI\nprefix, i.e. dcterms: or foaf:. An OSLC Service SHOULD predefine\nURI prefixes for its properties. Here we assume that OSLC has predefined\nthe Dublin Core ( dcterms:) and Friend of a Friend ( foaf:)\nprefixes. However, OSLC resources SHOULD also be open to new\ncontent, which means that new properties may not have predefined URI\nprefixes. We therefore need a way to define new URI prefixes in resource\nrequests. The oslc.prefix value lets you specify URI prefixes used in\nproperty names. For example, suppose the foaf: prefix was not\npredefined. The following URL illustrates the use of the oslc.prefix\nvalue to define it:\n\n     http://example.com/bugs/4242?oslc.prefix=foaf=http://xmlns.com/foaf/0.1/&oslc.properties=foaf:lastName,...\n\nSyntax\n\nThe syntax of the oslc.prefix is defined by the oslc_prefix term in\nthe following BNF grammar:\n\n     oslcprefix ::= \"oslc.prefix=\" prefixdefs\n     prefixdefs ::= prefixdef (\",\" prefix_def)*\n     prefixdef  ::= prefix \"=\" uriref_esc\n     prefix      ::= PN_PREFIX\n     PNPREFIX   ::= /* see \"SPARQL Query Lanaguage for RDF\", http://www.w3.org/TR/rdf-sparql-query/rPNPREFIX */\n     urirefesc ::= /* an angle bracket-delimited URI reference in which  and \\ are \\-escaped. */\n\nCommon Properties\n-----------------\n\nOSLC domains specifications are strongly encouraged to use the common\nproperties approved by the OSLC Core Workgroup (See\nOSLC Core Spec Appendix A) rather than\ndefining new properties.\n\n------------------------------------------------------------------------\n\nService Provider Resources\n\nOSLC Services are accessible via a Service Provider Resource that\ndescribes each service, which domain specifications the service\nimplements as well as the creation, query and delegated UI capabilities\nof each service.\n\nAdditionally, a provider may offer a Service Provider Catalog that lists\nrelated Service Providers.\n\nConceptual Model\n----------------\n\nThe conceptual model of Service Provider Catalog and Service Provider\nresources is simple. They are both resources with property values. The\nvalues allowed and required in each type of resource are defined below.\n\nThe diagram below illustrates the Service Provider Catalog and Service\nProvider concepts and relationships. As you can see there are two\nResources defined: Service Provider Catalog and Service Provider. There\nare also a set of Local In-Line Resources that are used inside the\nResources to define namespaces, OAuth configurations, contributors as\nwell as services and their capabilities.\n\nFigure \\#2: Service Provider concepts and relationships\n\n<img alt=\"Service Provider concepts and relationships\"\nsrc=\"http://open-services.net/pub/Main/OslcCoreSpecification/oslc-core-providers.graffle_Canvas1.jpg\"\n/&gt;\n\nNext, we will formally define the Service Provider Catalog and Service\nProvider resources.\n\nResource: Service Provider Catalog\n\nAn OSLC implementation that offers one or more Service Provider\nresources (see below), MAY also provide Service Provider Catalog to\nenable OSLC clients to find Service Providers offered. These catalogs\nmay contain other nested catalogs as well as service providers.\n\nName: ServiceProviderCatalog\nURI: http://open-services.net/ns/coreServiceProviderCatalog\n\n| Prefixed Name                 | Occurs       | Read-only | Value-type     | Represen-tation | Range                                                                 | Description                                                                                                                                                      |\n|:------------------------------|:-------------|:----------|:---------------|:----------------|:----------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| dcterms:title               | zero-or-one  | True      | XMLLiteral     | n/a             | n/a                                                                   | Title of the service provider catalog                                                                                                                            |\n| dcterms:description         | zero-or-one  | True      | XMLLiteral     | n/a             | n/a                                                                   | Description of the service provider catalog                                                                                                                      |\n| dcterms:publisher           | zero-or-one  | True      | Local Resource | Inline          |  oslc:Publisher                              | Describes the software product that provides the implementation.                                                                                                 |\n| oslc:domain                 | zero-or-many | True      | Resource       | Reference       | n/a                                                                   | Namespace URI of the specification that is implemented by this service. In most cases this namespace URI will be for an OSLC domain, but other URIs MAY be used. |\n| oslc:serviceProvider        | zero-or-many | True      | Resource       | Either          |  oslc:ServiceProvider                 | A service offered by the service provider.                                                                                                                       |\n| oslc:serviceProviderCatalog | zero-or-many | True      | Resource       | Either          |  oslc:ServiceProviderCatalog  | Additional service provider catalog.                                                                                                                             |\n| oslc:oauthConfiguration     | zero-or-many | True      | Local Resource | Inline          |  oslc:OAuthConfiguration           | Defines the three OAuth URIs required for a client to act as an OAuth consumer.                                                                                  |\n\nResource: Service Provider\n\nA Service Provider describes a set of services offered by an OSLC\nimplementation.\n\nName: ServiceProvider\nURI: http://open-services.net/ns/coreServiceProvider\n\n| Prefixed Name             | Occurs       | Read-only | Value-type     | Represen-tation | Range                                                        | Description                                                                                               |\n|:--------------------------|:-------------|:----------|:---------------|:----------------|:-------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------|\n| dcterms:title           | zero-or-one  | True      | XMLLiteral     | n/a             | n/a                                                          | Title of the service provider                                                                             |\n| dcterms:description     | zero-or-one  | True      | XMLLiteral     | n/a             | n/a                                                          | Description of the service provider                                                                       |\n| dcterms:publisher       | zero-or-one  | True      | Local Resource | Inline          |  oslc:Publisher                     | Describes the software product that provides the implementation.                                          |\n| oslc:service            | one-or-many  | True      | Local Resource | Inline          |  oslc:Service                         | Describes a service offered by the service provider.                                                      |\n| oslc:details            | zero-or-many | True      | Resource       | Reference       | any                                                        | A URL that may be used to retrieve a web page to determine additional details about the service provider. |\n| oslc:prefixDefinition   | zero-or-many | True      | Local Resource | Inline          |  oslc:PrefixDefinition      | Defines a namespace prefix for use in JSON representations and in forming OSLC Query Syntax strings.      |\n| oslc:oauthConfiguration | zero-or-one  | True      | Local Resource | Inline          |  oslc:OAuthConfiguration  | Defines the three OAuth URIs required for a client to act as an OAuth consumer.                           |\n\nResource: Service\n\nA Service describes the specific services offered by an implementation\nof an OSLC specification.\n\nName: Service\nURI: http://open-services.net/ns/coreService\n\n| Prefixed Name          | Occurs       | Read-only | Value-type     | Represen-tation | Range                                                  | Description                                                                                                                                                                                                                                        |\n|:-----------------------|:-------------|:----------|:---------------|:----------------|:-------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| oslc:domain          | exactly-one  | True      | Resource       | Reference       | n/a                                                    | Namespace URI of the specification that is implemented by this service. In most cases this namespace URI will be for an OSLC domain, but other URIs MAY be used.                                                                                   |\n| oslc:creationFactory | zero-or-many | True      | Local Resource | n/a             |  oslc:CreationFactory  | Enables clients to create new resources                                                                                                                                                                                                            |\n| oslc:queryCapability | zero-or-many | True      | Local Resource | n/a             |  oslc:QueryCapability  | Enables clients query across a collection of resources                                                                                                                                                                                             |\n| oslc:selectionDialog | zero-or-many | True      | Local Resource | n/a             |  oslc:Dialog                     | Enables clients to select a resource via UI                                                                                                                                                                                                        |\n| oslc:creationDialog  | zero-or-many | True      | Local Resource | n/a             |  oslc:Dialog                     | Enables clients to create a resource via UI                                                                                                                                                                                                        |\n| oslc:usage           | zero-or-many | True      | Resource       | Resource        | n/a                                                    | An identifier URI for the domain specified usage of this service. If a service provider has multiple services, it may designate the primary or default one that should be used with a property value of http://open-services.net/ns/core#default |\n\nResource: Creation Factory\n\nA Creation Factory describes a creation factory, capable of creating new\nresources via HTTP POST.\n\nName: CreationFactory\nURI: http://open-services.net/ns/coreCreationFactory\n\n| Prefixed Name        | Occurs       | Read-only | Value-type | Represen-tation | Range                                                                       | Description                                                                                                                                                                                                                                                       |\n|:---------------------|:-------------|:----------|:-----------|:----------------|:----------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| dcterms:title      | exactly-one  | True      | XMLLiteral | n/a             | n/a                                                                         | Title string that could be used for display                                                                                                                                                                                                                       |\n| oslc:label         | zero-or-one  | True      | String     | n/a             | n/a                                                                         | Very short label for use in menu items                                                                                                                                                                                                                            |\n| oslc:creation      | exactly-one  | True      | Resource   | Reference       | n/a                                                                         | To create a new resource via the factory, post it to this URI                                                                                                                                                                                                     |\n| oslc:resourceShape | zero-or-many | True      | Resource   | Reference       |  oslc:ResourceShape  | A Creation Factory MAY provide Resource Shapes that describe shapes of resources that may be created.                                                                                                                                                         |\n| oslc:resourceType  | zero-or-many | True      | Resource   | Reference       | n/a                                                                         | The expected resource type URI of the resource that will be created using this creation factory. These would be the URIs found in the result resource's rdf:type property.                                                                                      |\n| oslc:usage         | zero-or-many | True      | Resource   | Resource        | n/a                                                                         | An identifier URI for the domain specified usage of this creation factory. If a service provides multiple creation factories, it may designate the primary or default one that should be used with a property value of http://open-services.net/ns/core#default |\n\nResource: Query Capability\n\nA Query Capability describes a query capability, capable of querying\nresources via HTTP GET or POST.\n\nName: QueryCapability\nURI: http://open-services.net/ns/coreQueryCapability\n\n| Prefixed Name        | Occurs       | Read-only | Value-type | Represen-tation | Range | Description                                                                                                                                                                                                                                                   |\n|:---------------------|:-------------|:----------|:-----------|:----------------|:------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| dcterms:title      | exactly-one  | True      | XMLLiteral | n/a             | n/a   | Title string that could be used for display                                                                                                                                                                                                                   |\n| oslc:label         | zero-or-one  | True      | String     | n/a             | n/a   | Very short label for use in menu items                                                                                                                                                                                                                        |\n| oslc:queryBase     | exactly-one  | True      | Resource   | Reference       | n/a   | The base URI to use for queries. Queries are invoked via HTTP GET on a query URI formed by appending a key=value pair to the base URI, as described in Query Capabilities section.                                                                            |\n| oslc:resourceShape | zero-or-one  | True      | Resource   | Reference       | n/a   | The Query Capability SHOULD provide a Resource Shape that describes the query base URI.                                                                                                                                                                   |\n| oslc:resourceType  | zero-or-many | True      | Resource   | Reference       | n/a   | The expected resource type URI that will be returned with this query capability. These would be the URIs found in the result resource's rdf:type property.                                                                                                  |\n| oslc:usage         | zero-or-many | True      | Resource   | Reference       | n/a   | An identifier URI for the domain specified usage of this query capability. If a service provides multiple query capabilities, it may designate the primary or default one that should be used with a property value of http://open-services/ns/core#default |\n\nResource: Dialog\n\nA Dialog describes a delegated user interface (UI) which can be used to\nallow a user to interactively create a new resource or pick a resource.\n\nName: Dialog\nURI: http://open-services.net/ns/coreDialog\n\n| Prefixed Name       | Occurs       | Read-only | Value-type | Represen-tation | Range | Description                                                                                                                                                                                                                                                                                   |\n|:--------------------|:-------------|:----------|:-----------|:----------------|:------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| dcterms:title     | exactly-one  | True      | XMLLiteral | n/a             | n/a   | Title string that could be used for display                                                                                                                                                                                                                                                   |\n| oslc:label        | zero-or-one  | True      | String     | n/a             | n/a   | Very short label for use in menu items                                                                                                                                                                                                                                                        |\n| oslc:dialog       | exactly-one  | True      | Resource   | Reference       | n/a   | The URI of the dialog                                                                                                                                                                                                                                                                         |\n| oslc:hintWidth    | zero-or-one  | True      | String     | n/a             | n/a   | Values MUST be expressed in relative length units as defined in the W3C Cascading Style Sheets Specification (CSS 2.1) Em and ex units are interpreted relative to the default system font (at 100% size). |\n| oslc:hintHeight   | zero-or-one  | True      | String     | n/a             | n/a   | Values MUST be expressed in relative length units as defined in the W3C Cascading Style Sheets Specification (CSS 2.1) Em and ex units are interpreted relative to the default system font (at 100% size). |\n| oslc:resourceType | zero-or-many | True      | Resource   | Reference       | n/a   | The expected resource type URI for the resources that will be returned when using this dialog. These would be the URIs found in the result resource's rdf:type property.                                                                                                                    |\n| oslc:usage        | zero-or-many | True      | Resource   | Reference       | n/a   | An identifier URI for the domain specified usage of this dialog. If a service provides multiple selection or creation dialogs, it may designate the primary or default one that should be used with a property value of http://open-services/ns/core#default                                |\n\nResource: Publisher\n\nA Publisher identifies and describes the software product that provides\nthe OSLC implementation.\n\nName: Publisher\nURI: http://open-services.net/ns/corePublisher\n\n| Prefixed Name        | Occurs      | Read-only   | Value-type | Represen-tation | Range | Description                                                                                                     |\n|:---------------------|:------------|:------------|:-----------|:----------------|:------|:----------------------------------------------------------------------------------------------------------------|\n| dcterms:title      | exactly-one | True        | XMLLiteral | n/a             | n/a   | Title string that could be used for display                                                                     |\n| oslc:label         | zero-or-one | True        | String     | n/a             | n/a   | Very short label for use in menu items                                                                          |\n| dcterms:identifier | exactly-one | unspecified | String     | n/a             | n/a   | A URN that uniquely identifies the implementation                                                               |\n| oslc:icon          | zero-or-one | True        | Resource   | reference       | n/a   | URL to an icon file that represents the provider. This icon should be a favicon format and 16x16 pixels in size |\n\nResource: Prefix Definition\n\nService Providers MUST provide a Prefix Definition for each prefix\nsupported by the service. Each Prefix Definition defines a namespace\nprefix that clients MAY use in forming OSLC Query Syntax strings.\n\nName: PrefixDefinition\nURI: http://open-services.net/ns/corePrefixDefinition\n\n| Prefixed Name     | Occurs      | Read-only | Value-type | Represen-tation | Range | Description                                    |\n|:------------------|:------------|:----------|:-----------|:----------------|:------|:-----------------------------------------------|\n| oslc:prefix     | exactly-one | True      | String     | n/a             | n/a   | Namespace prefix to be used for this namespace |\n| oslc:prefixBase | exactly-one | True      | Resource   | Reference       | n/a   | The base URI of the namespace                  |\n\nResource: OAuth Configuration\n\nService Providers that support OAuth Authentication SHOULD provide a\nway for clients to automatically discover the three OAuth URIs necessary\nto act as an OAuth Consumer.\n\nName: OAuthConfiguration\nURI: http://open-services.net/ns/coreOAuthConfiguration\n\n| Prefixed Name               | Occurs      | Read-only | Value-type | Represen-tation | Range | Description                           |\n|:----------------------------|:------------|:----------|:-----------|:----------------|:------|:--------------------------------------|\n| oslc:oauthRequestTokenURI | exactly-one | True      | Resource   | Reference       | n/a   | URI for obtaining OAuth request token |\n| oslc:authorizationURI     | exactly-one | True      | Resource   | Reference       | n/a   | URI for obtaining OAuth authorization |\n| oslc:oauthAccessTokenURI  | exactly-one | True      | Resource   | Reference       | n/a   | URI for obtaining OAuth access token  |\n\nThe next sections cover the Creation Factory and Query Capability in\nmore detail.\n\n------------------------------------------------------------------------\n\nCreation Factories\n\nAn OSLC Service can provide one or more creation factory to enable the\ncreation of new resources. A creation factory provides a Creation URI\nused to create new resources via HTTP POST and may also provide Resource\nShapes that describe the types of resources that may be created. To\ncreate a new OSLC Resource, an OSLC client POSTs a representation of\nthat resource to a Creation Factory's Creation URI.\n\nAn HTTP POST of content to a Creation URI SHOULD result in the\n    creation of a new resource or an explanation of why creation did not\n    occur via the appropriate HTTP status code.\nThe response to a successful HTTP POST of content to a Creation URI\n    SHOULD include a HTTP Location header that specifies the URI of\n    the newly created resource.\n\nCreating an OSLC Defined Resource\n---------------------------------\n\nTo create an OSLC Defined Resource, an OSLC Client first forms an\nrepresentation of that resource including the desired and required\nproperty values. A client can learn what properties are allowed in a new\nOSLC Defined Resource via the OSLC specification that defines or, in\nsome cases via a Resource Shape resource. Next the client uses HTTP POST\nto post that representation to a Creation URI.\n\nThe response to a successful HTTP POST of a representation to a\n    Creation Resource URI MAY include a representation of the newly\n    created resource.\nThe resource returned MAY contain changes to properties made by\n    the server or new properties added by the server.\n\nQuery Capabilities\n\nAn OSLC Service may provide one or more Query Capabilities to enable\nquery of resources. A Query Capability provides a base URI for forming\nQuery Resource URIs and MAY provide Resource Shapes that describe\nthe property values that may be expected in the resources that are\nqueryable via the query capability. Thus, Query Capabilities provide a\nway to discover the resources managed by an OSLC Service.\n\nIn a Query Capability, the base URI, as defined by the oslc:queryBase\nproperty, is itself a resource managed by the service and it acts as the\nstarting subject resource for the queries based on it. Since the list\nmay contain hundreds of thousands of members, queries are used to filter\nthe list for members that satisfy certain conditions, e.g. the bugs that\nhave high priority and were created this week.\n\nConceptual Model\n----------------\n\nTo perform a query an OSLC client first creates a URI by starting with a\nQuery Capability's base URI as a base and adding a URI Query String to\nexpress the query criteria. The OSLC client then uses HTTP GET to\nrequest a Query Resource representation of the query results. The Query\nResource representation will contain property values about the query and\na collection of resources that match the query criteria.\n\nHTTP GET Queries\n\nTo perform an HTTP GET query, an OSLC client starts with the base URI as\ndefined by the oslc:queryBase property of a Query Capability, and\nappends to it query parameters in a syntax supported by the service. The\nresulting URI is the query URI. The OSLC client sends an HTTP GET\nrequest to the query URI, optionally specifying the preferred content\nmedia type for the query response in the HTTP Accept header. OSLC\nServices MUST support query responses in RDF/XML format (media type\napplication/rdf+xml) and MAY support other formats. OSLC Services\nSHOULD support the Query Syntax defined in this specification, but\nMAY support other syntaxes.\n\nQuery Syntax\n------------\n\nA query URI can be formed by adding a query string to the end of the\nQuery Capability's base URI (or by sending the query string in the\nrequest body when using HTTP POST). The syntax used to express the query\ncriteria in that string is specified by each OSLC domain specification.\n\nThe OSLC Core Spec Query Specification document\ndefines a standard set of OSLC query parameters that other OSLC domain\nspecifications MAY use to query resources.\n\n Query Specification errors\n\nIf there is an error in the specification of the query, whether the\nquery is specified by key=value pairs in the HTTP GET URL or key=value\npairs in the body of an HTTP POST, then the provider MUST respond\nwith an error. The error response should be an HTTP 400 Bad Request\nerror and an explanation of the error in the OSLC Error Response format\n(see Error Responses below).\n\n------------------------------------------------------------------------\n\nDelegated User Interface Dialogs\n\nOSLC specifications target specific integration scenarios. In some\ncases, allowing one product to delegate to a user interface defined in\nanother product is a more effective way to support a use case than an\nHTTP interface that can only be accessed programmatically. There are two\ncases where this is especially true:\n\nResource creation: when a user of a web application needs to\n    create a new resource in an OSLC Service Provider. In this case the\n    web application asks the service provider to provide a UI for\n    resource creation and the provider notifies the application when the\n    creation has been completed or canceled by the user.\nResource selection: when a user of a web application and needs\n    to pick a resource managed by a OSLC Service Provider. In this case\n    the web application asks the service provider to provide a UI for\n    resource selection and the provider notifies the application when a\n    resource or resources has been selected or if the selection\n    was canceled.\n\nTo support these two cases, below we define OSLC Delegated User\nInterface (UI) Dialogs. Delegated UI Dialogs are a technique where one\nprovider can embed a creation or selection UI into another using a\ncombination of an HTML &lt;iframe&gt; and JavaScript code. The diagram\nbelow illustrates how delegated UI dialogs work in a scenario where\nProvider A wants to allow a user to select or create a resource managed\nby Provider B.\n\nFigure \\#3: Delegated UI Dialog interactions\n\n<img alt=\"Delegated UI Dialogs\"\nsrc=\"/img/specifications/core-2.0/oslc-delegated.png\"/\n\nNext, the details of the Delegated UI Dialog protocol.\n\nTerminology\n\nThe following terms are used in discussions of Delegated UI Dialogs:\n\nUI Consumer - a web application that is embedding a Delegated UI\n    Dialog from an OSLC Service Provider. This consumer could be a web\n    page, with the Delegated UI Dialog loaded into an iframe or a native\n    application, e.g. an IDE like Eclipse, that is embedding a web\n    browser component.\n\n!-- --\n\nUI Provider - an OSLC Service provider that offers one or more\n    Delegated UI Dialogs. These dialogs will be specified in the\n    provider's Service Provider resource.\n\nThe next sections explain how Delegated UI Dialogs work.\n\nPost Message and Window Name protocols\n--------------------------------------\n\nTo support the widest range of web browsers, we define two different\nprotocols for communicating the information about the user's action from\nthe UI Provider and back to the UI Consumer. These are the Post Message\nand Window Name protocols described below.\n\nIn both the Post Message and Window Name protocols, the way that a UI\nConsumer includes a Delegated UI Dialog in an HTML page is to create an\niframe and specify the src as the URI of the Delegated UI Dialog to\nbe included. The UI Consumer indicates the protocol to be used by\nappending one of the two fragment identifiers below to the URI:\n\noslc-core-postMessage-1.0 - Indicates that the Post Message\n    protocol is to be used\n#oslc-core-windowName-1.0 - Indicates that the Window Name\n    protocol is to be used\n\nThe JavaScript code example below shows now a UI Provider can determine\nwhich protocol is in use:\n\n         if (window.location.hash == '#oslc-core-windowName-1.0') {\n             // Window Name protocol in use\n         } else if (window.location.hash == '#oslc-core-postMessage-1.0') {\n             // Post Message protocol in use\n         }\n\niframe Creation Considerations\n\nRegardless of the protocol in effect, it is recommended that UI\nConsumers follow the below iframe creation guidelines to provide a more\nseamless user experience:\n\nEmbed the iframe within a div element, with height and width set\n    based on the relative length values specified in the Service\n    Resource that declares the Delegated UI Dialog.\nSet the iframe border size to '0'\nSet the iframe scrolling to 'auto'\n\nNext, the details for each of the two protocols.\n\n Post Message Protocol\n\nThe Post Message protocol relies on the HTML5 function\nwindow.postMessage() (reference: HTML5), available in the latest or\npending releases of most browsers. UI Consumers must anticipate other,\nunrelated uses of postMessage(), and should ignore messages not\nconforming to this protocol.\n\nTypically, the embedded page will be loaded in a window inside another\nwindow, such as a iframe inside some surrounding webpage. In such cases,\npostMessage() must be called on that parent window. But in a native\napplication, an outer page is not needed and the embedded page may be\nshown directly in the browser's \"root\" window. When the embedded page\nhas no parent window, it must call postMessage() on its own window.\n\nHere are the responsibilities of the UI Consumer and UI Provider in Post\nMessage protocol.\n\nThe UI Consumer's responsibilities\n\n1 Include the Delegated UI Dialog via iframe (i.e setting iframe src to\nthe URI of the Delegated UI Dialog) or via an embedded browser. Append\nthe fragment identifier \\oslc-core-postMessage-1.0 to the URL to\nindicate that Post Message is the desired protocol. 1 Add a 'message'\nlistener to the outer window to receive messages from the Delegated UI\nDialog. 1 Listen for window 'message' events, ignoring events from other\nsources or not prefixed with \"oslc-response:\" 1 When message from\nDelegated UI Dialog indicates user completed action, free resources and\nhandle action.\n\nThe UI Provider's responsibilities\n\n1 Provide Delegated UI Dialog, an HTML page that provides a user\ninterface for resource creation or selection. 1 Allow the user to\nperform resource creation or selection. 1 Once the user has created,\nselected or canceled, send notification using postMessage() to the\npage's parent window, passed in event.data string, that is prefixed\nwith \"oslc-response:\" See below for the two possible response formats,\none for resource selection and one for creation. 1 If the page is not\nparented, then the message is posted to the page's own window. The page\nmust ignore this message to itself.\n\nThe below JavaScript code example shows how a UI Provider page would\nsend a response using postMessage() and taking into account the fact\nthat some pages are not parented.\n\n        function respondWithPostMessage(/string/ response) {\n           (window.parent | window).postMessage(\"oslc-response:\" + response, \"*\");\n        }\n\nNow, the Window Name protocol.\n\n Window Name Protocol\n\nThe Window Name protocol uses the HTML DOM window.name property to\ncommunicate the response (reference: Window Object) from the UI Provider\nto the UI Consumer. This special property of window maintains its value\neven as the window navigates to a different origin, but the ifame's\nwindow.name can only be read when the accessing window shares the same\norigin. For this to happen, when the embedded page is finished it must\nset the window.name and also change the window.location to a page\nwith the same origin as the outer frame. This not only allows the UI\nConsumer to access the result, but also fires an event telling the UI\nConsumer when to do so. This return location is passed to the embedded\npage using the window.name property.\n\nHere are the responsibilities of the UI Consumer and UI Provider in\nWindow Name protocol.\n\nThe UI Consumer's responsibilities\n\n1 Include the Delegated UI Dialog via iframe (i.e setting iframe src to\nthe URI of the Delegated UI Dialog) or via an embedded browser. Append\nthe fragment identifier \\oslc-core-windowName-1.0 to the URL to\nindicate that Window Name is the desired protocol. 1 On the iframe, set\nthe frame's window.name to indicate the Return URL. 1 On the iframe,\nListen for 'onload' events 1 When an 'onload' event occures an the\nframe's location is equal to the Return URL then read the response from\nthe window.name.\n\nThe following Javascript code illustrates the protocol. The code for the\ndestroyFrame(), handleMessage() and displayFrame() methods are not\nprovided in this example, but should be obvious to a JavaScript\ndeveloper. The UI Consumer must provide these methods.\n\n         var pickerURL = ... // URL of Provider's Delegated UI Dialog\n         var returnURL = ... // Consumer's Return URL\n\n         var frame = document.createElement('iframe');\n\n        function windowNameProtocol() {\n\n           // Step #1: create iframe with fragment to indicate protocol\n           // Step #2: set the iframe's window.name to indicate the Return URL\n           if (ie  0) {\n              frame = document.createElement('iframe name=\\'' + returnURL + '\\'');\n           } else {\n              frame = document.createElement('iframe');\n              frame.name = returnURL;\n           }\n           frame.src = pickerURL + '#oslc-core-windowName-1.0';\n           frame.width = 450;\n           frame.height = 300;\n\n           displayFrame(frame);\n\n           // Step #3: listen for onload events on the iframe\n           var ie = window.navigator.userAgent.indexOf(\"MSIE\");\n           if (ie  0) {\n              frame.attachEvent(\"onLoad\", onFrameLoaded);\n           } else {\n              frame.onload = onFrameLoaded;\n           }\n        }\n\n        function onFrameLoaded() {\n           try { // May throw an exception if the frame's location is still a different origin\n\n              // Step #4: when frame's location is equal to the Return URL\n              // then read response and return.\n              if (frame.contentWindow.location == returnURL) {\n                 var message = frame.contentWindow.name;\n                 destroyFrame(frame);\n                 handleMessage(message);\n              }\n\n           } catch (e) {\n              // ignore: access exception when trying to access window name\n           }\n        }\n\nThe UI Provider's responsibilities\n\nAs soon as the embedded page has loaded, perform the following:\n\n1 *Provide Delegated UI Dialog, an HTML page that provides a user\ninterface for resource creation or selection.* 1 *Read the Return URL\nfrom the window.name variable* 1 &lt;span style=\"font-family:\nVerdana,Arial,Helvetica,sans-serif; font-size: small\"&gt;Allow user to\nperform resource creation or selection.&lt;/span&gt; 1 Once user has\ncreated, selected or canceled, communicate the user's response by\nsetting the window.name variable to the response. See below for the two\npossible response formats, one for resource selection and one for\ncreation. 1 Indicate that user has responded by setting the\nwindow.location to the Return URL specified by the UI Consumer.\n\nThe JavaScript example below shows a UI Provider notifying its UI\nConsumer after a user has responded.\n\n     function respondWithWindowName(/string/ response) {\n        // Step 2: read the return URL\n        var returnURL = window.name;\n\n        // Step #4: send the response via the window.name variable\n        window.name = response;\n\n        // Step #5: indicate that user has responded\n        window.location = returnURL;\n     }\n\nResource Selection\n------------------\n\nResource Selection can be used when a UI Consumer wants to allow a user\nto pick a resource that is managed by an OSLC Service. Using either the\nPost Message or Window Name protocols defined above, the UI Consumer\nuses an iframe to embed a selection dialog that is provided by the\nservice, then awaits notification that the user has selected a resource.\n\nTo enable Resource Selection, an OSLC Service MUST provide in its\nService Resource a value for the oslc:selectionDialog property. The\nproperty value will include a oslc:dialogURI property that indicates\nthe URI of the selection dialog.\n\nRegardless of how the response from the UI Provider is conveyed to the\nUI Consumer, the response SHOULD be formatted as follows:\n\nName: results\nURI: http://open-services.net/ns/core#results\n\n| Prefixed Name  | Occurs      | Read-only | Value-type | Represen-tation | Range | Description                                  |\n|:---------------|:------------|:----------|:-----------|:----------------|:------|:---------------------------------------------|\n| rdf:resource | zero-or-one | True      | Resource   | Reference       | n/a   | URI of the resource selected or created      |\n| oslc:label   | zero-or-one | True      | String     | n/a             | n/a   | Short label describing the resource selected |\n\nAn empty array indicates that the resource selector has been canceled\n\nAn example Resource Selection response:\n\n     {\n         \"oslc:results\" : [{\n                 \"oslc:label\": \"Bug 123: Server crash\",\n                 \"rdf:resource\": \"http://example.com/bug123\"\n             }, {\n                 \"oslc:label\": \"Bug 456: Client hangs on startup\",\n                 \"rdf:resource\": \"http://example.com/bug456\"\n             }\n         ]\n     }\n\nResource Creation\n-----------------\n\nResource Creation can be used when a UI Consumer wants to allow a user\nto create a new resource that is managed by an OSLC Service. Using\neither the Post Message or Window Name protocols defined above, the UI\nConsumer uses an iframe to embed a creation dialog that is provided by\nthe service, then awaits notification that the user has created a\nresource.\n\nTo enable Resource Creation, an OSLC Service MUST provide in its\nService Resource a value for the oslc:creationDialog property. The\nproperty value will include a oslc:dialogURI property that indicates\nthe URI of the creation dialog.\n\nRegardless of how the response from the UI Provider is conveyed to the\nUI Consumer, the response SHOULD be formatted as defined by\noslc:results\n\nExample:\n\n     {\n         \"oslc:results\" : [ {\n                 \"oslc:label\": \"Bug 123: Server crash\",\n                 \"rdf:resource\": \"http://example.com/bug123\"\n             }, {\n                 \"oslc:label\": \"Bug 456: Client hangs on startup\",\n                 \"rdf:resource\": \"http://example.com/bug456\"\n             }\n         ]\n     }\n\nPrefilling Creation Dialogs\n\nService providers MAY support receiving a POST request whose content\nbody is a resource representation to the Creation Dialog URI to retrieve\na URI that represents the embedded page to be used. Service providers\nMUST respond with a response status of 201 (Created) with the\nresponse header Location whose value is the URI to request the newly\ncreated form. After some elapsed time, service providers MAY respond\nwith a 404 (Not Found), 410 (Gone) or 3xx (Redirect) to an HTTP GET\nrequest for these URIs.\n\nDialog Resizing\n---------------\n\nDelegated UI dialogs receive their initial size (dimensions) based on\nthe oslc:hintWidth and oslc:hintHeight properties described in\noslc:Dialog resource description. There are cases where UI Provider\nrecognizes that the initial size of a Delegated UI dialog is not\nsufficient and needs a way to ask the UI Consumer to resize the dialog.\nIn this section we specify a mechanism that enables dialog resizing, but\nonly when Post Message Protocol is used.\n\nConsumers MAY honor a dialog's ability to dynamically resize. Those\nthat do (a) MUST use Post Message Protocol, (b) MUST use the\noslc:resize value instead of any static width or height, and and (c)\nMUST register a handler to receive dialog resize messages sent by\nthe dialog Provider and adjust the size of the dialog accordingly.\n\nSince a dialog is allowed to resize itself any number of times, the\nConsumer MUST keep a handler registered and react appropriately each\ntime it received a dialog resize message from that dialog.\n\nUI Providers SHOULD NOT request sizes larger than 95% of the current\nviewport, to avoid\ncovering the entire viewport with the dialog.\n\nHere are the responsibilities of the UI Consumer and UI Provider in\ndialog resizing.\n\n The UI Consumer's responsibilities\n\n1 Include the Delegated UI Dialog via iframe (i.e setting iframe src to\nthe URI of the Delegated UI Dialog) or via an embedded browser. 1 Add a\n'message' listener to the outer window to receive messages from the\nDelegated UI Dialog. 1 Listen for window 'message' events, ignoring\nevents from other sources or not prefixed with \"oslc-resize:\". Multiple\nresize 'message' events may be sent while the dialog is visible. 1 When\nmessage from Delegated UI Dialog indicates user completed action, free\nresources and handle action.\n\nThe UI Provider's responsibilities\n\n1 Provide Delegated UI Dialog, an HTML page that provides a user\ninterface for resource creation or selection. 1 Allow the user to\nperform resource creation or selection. 1 Once the Provider needs to\nresize the dialog, send notification using postMessage() to the page's\nparent window, passed in event.data string, that is prefixed with\n\"oslc-resize:\". Multiple resize messages may be sent. See below for the\nresponse format. 1 If the page is not parented, then the message is\nposted to the page's own window. The page must ignore this message to\nitself.\n\nThe below JavaScript code example shows how a UI Provider page would\nsend a response using postMessage() and taking into account the fact\nthat some pages are not parented.\n\n        function respondWithPostMessage(/string/ resize_response) {\n           (window.parent | window).postMessage(\"oslc-resize:\" + resize_response, \"*\");\n        }\n\nRegardless of how the response from the UI Provider is conveyed to the\nUI Consumer, the response SHOULD be formatted as follows:\n\n| Prefixed Name     | Occurs      | Read-only | Value-type | Represen-tation | Range | Description                                                                                                                                                                                                                                                                                                               |\n|:------------------|:------------|:----------|:-----------|:----------------|:------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| oslc:hintHeight | exactly-one | True      | String     | n/a             | n/a   | New dialog height size. Height size MUST be expressed in relative length units as defined in the W3C Cascading Style Sheets Specification (CSS 2.1) Em and ex units are interpreted relative to the default system font (at 100% size) |\n| oslc:hintWidth  | exactly-one | True      | String     | n/a             | n/a   | New dialog width size. Width size MUST be expressed in relative length units as defined in the W3C Cascading Style Sheets Specification (CSS 2.1) Em and ex units are interpreted relative to the default system font (at 100% size)   |\n\nAn example Dialog Resize response with new height of '600px' and a width\nof '400px':\n\n     {\n         \"oslc:hintHeight\" : \"600px\",\n         \"oslc:hintWidth\" : \"400px\"\n     }\n\nThat brings us to the end of the Delegated UI section. Next up, another\nUI related topic.\n\n------------------------------------------------------------------------\n\nUser Interface Previews\n\nOSLC providers MAY support a technique known as User Interface (UI)\nPreview, that can be used to show a user in-context information when\ndisplaying a link to a resource, and to show more information when the\nuser's mouse lingers over the link.\n\nOSLC providers which offer UI Preview MUST do so in accordance with\nthe OSLC Core UI Preview Specification.\n\n------------------------------------------------------------------------\n\nAuthentication\n\nOSLC Services use standard web protocols for authentication. OSLC\nServices can use HTTP Basic Authentication, OAuth or both.\n\nHTTP Basic Authentication\n-------------------------\n\nOSLC Services MAY protect resources with HTTP Basic Authentication.\nOSLC Services that use HTTP Basic Authentication SHOULD do so only\nvia SSL.\n\nOAuth Authentication\n--------------------\n\nOSLC Services MAY protect resources with OAuth Authentication.\n\nForm Based Authentication\n-------------------------\n\nOSLC Services MAY use other authentication mechanisms, including\nthose common described as Form Based Authentication. OSLC Services that\nchoose to use other authentication mechanisms are responsible for\nspecifying how those mechanisms work.\n\n------------------------------------------------------------------------\n\nError Responses\n\nOSLC Services the standard mechanisms of HTTP to report status and error\ncodes to clients. When an error occurs and useful information can be\nprovided to clients OSLC Services SHOULD return error information in\nthe body of the response.\n\nOSLC Services SHOULD use the Error resource defined below as the\nbasis for forming error responses. OSLC Services SHOULD return an\nError resource using the same representation requested by the client via\nthe HTTP Accept header.\n\nConceptual Model\n----------------\n\nThe following OSLC Defined Resource can be used as the basis for forming\nan error response.\n\n Resource: Error\n\nName: Error\nURI: http://open-services.net/ns/core#Error\n\n| Prefixed Name        | Occurs      | Read-only | Value-type | Represen-tation | Range                | Description                                                |\n|:---------------------|:------------|:----------|:-----------|:----------------|:---------------------|:-----------------------------------------------------------|\n| oslc:statusCode    | exactly-one | True      | String     | n/a             | n/a                  | The HTTP status code reported with the error.              |\n| oslc:message       | exactly-one | True      | String     | n/a             | n/a                  | An informative message describing the error that occurred. |\n| oslc:extendedError | zero-or-one | True      | Either     | Either          | oslc:ExtendedError | Extended error information                                 |\n\nResource: Extended Error\n\nName: ExtendedError\nURI: http://open-services.net/ns/coreExtendedError\n\n| Prefixed Name     | Occurs      | Read-only | Value-type | Represen-tation | Range | Description                                                                                                                                                                                                                                                                                   |\n|:------------------|:------------|:----------|:-----------|:----------------|:------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| oslc:moreInfo   | zero-or-one | True      | Resource   | Reference       | Any   | A resource giving more information on the error SHOULD be of an HTML content-type.                                                                                                                                                                                                        |\n| oslc:rel        | zero-or-one | True      | String     | n/a             | n/a   | If present and set to 'alternate' then indicates that work-around is provided, behavior for other values is undefined.                                                                                                                                                                        |\n| oslc:hintWidth  | zero-or-one | True      | String     | n/a             | n/a   | Values MUST be expressed in relative length units as defined in the W3C Cascading Style Sheets Specification (CSS 2.1) Em and ex units are interpreted relative to the default system font (at 100% size). |\n| oslc:hintHeight | zero-or-one | True      | String     | n/a             | n/a   | Values MUST be expressed in relative length units as defined in the W3C Cascading Style Sheets Specification (CSS 2.1) Em and ex units are interpreted relative to the default system font (at 100% size). |\n\n------------------------------------------------------------------------\n\nSpecification Versioning\n\nOne of the goals of the OSLC initiative is to mitigate or eliminate the\nneed for lock-step version upgrades, where clients or services target\none version of a specification and break when new versions are\nintroduced -- requiring all services to be upgraded simultaneously.\n\nIn this section we specify a version header that will enable old\n\"Version 1\" OSLC clients to continue to work and share the same resource\nURIs as used by clients that specifically target the Core. And we\nestablish rules that will enable clients to continue to work as new\nversions of specifications are introduced.\n\nSupporting pre-Core clients\n---------------------------\n\nWe anticipate that the OSLC Core and domain specifications will each be\nversioned independently and each version will be assigned a version\nnumber, but we would like to avoid exposing version numbers in OSLC\nimplementations. There is one use case that requires version information\nto be exposed. We must ensure that old OSLC \"Version 1\" clients continue\nto work.\n\nTo enable OSLC Service specifications to evolve without breaking\nexisting clients, we introduce an HTTP Header, OSLC-Core-Version set\nto the Core specification version number \"2.0\". We expect clients that\ntarget the Core to send this HTTP header.\n\nIf the OSLC-Core-Version header is present and set to a version\n    that the service can support, then the service MUST return a\n    representation that is complies with the specified version.\nIf the OSLC-Core-Version header is present and indicates a\n    specification version that the service cannot support, the service\n    SHOULD respond with what it determines is the most compatible\n    version that it can return.\nIf the OSLC-Core-Version header is not present then the OSLC\n    Service SHOULD respond by returning a resource that conforms to\n    the earliest or most compatible (as determined by\n    the implementation) specification version's representation. Services\n    that never offered an OSLC Version 1 interface can ignore\n    this restriction.\nWhen returning an OSLC Defined Resource, OSLC Services MUST\n    return the OSLC-Core-Version header set to the Core specification\n    with which the representation complies.\n\nRules for new versions of OSLC specifications\n---------------------------------------------\n\nWhen specifying a new version of an OSLC specification the rule is this:\n\n**A new version of an OSLC specification is not allowed to introduce\nchanges that will break old clients.**\n\nHere are some guidelines for OSLC workgroups defining new specifications\nor upgrades to existing ones:\n\nIf you believe that you need a property but cannot agree on the\n    value-type, then this is a strong indication that you should not\n    attempt to standardize on the property. Once you decide on a\n    value-type you are stuck with it forever. Wait until you have the\n    scenarios or implementation experience needed to agree on type.\nWhen introducing a new capability in a new version of a\n    specification, e.g. a creation factory, query capability or\n    delegated UI dialog; one that works differently than those specified\n    in the Core spec or older versions of your own specification, you\n    should create a new resource type to represent the service. This\n    will enable old clients to continue to work against old services and\n    new clients to work with your new capabilities.\nWhen defining resources, do not remove, change the meaning or the\n    value-type of any properties that you defined in earlier versions of\n    the specification. You can add new properties but not change those\n    that already exist.\nIt is possible to relax restrictions on clients, because relaxing\n    restrictions should not break clients. But it is not possible to\n    relax restrictions on services, because clients expect to find the\n    required fields and if they are missing, clients will break.\nBefore defining a new property within your OSLC domain's namespace\n    consult the list of common properties in\n    OSLC Core Spec Appendix A to see if\n    using a common property would be more appropriate.\n\nMigrating to the Core Specification\n-----------------------------------\n\nMost of the first OSLC specifications were developed before this Core\nspecification existed and do not implement versioning as described above\nand so must use some other mechanism to migrate to the OSLC Core v1.0\nspecification.\n\nOSLC implementations that wish to continue to support old pre-Core OSLC\nor OSLC v1.0 specifications can do so by keeping the old implementation\nin place and adding the new OSLC Core v1 implementation with different\nservice provider, query capability and creation factory URIs.\n\n------------------------------------------------------------------------\n\n&lt;a name=\"OslcDefinedResourceRepresentations\"\ntitle=\"OslcDefinedResourceRepresentations\"&gt;&lt;/a&gt;\n\nOSLC Defined Resource Representations\n\nThis section specifies what resource representations are required for\nOSLC resources, some requirements for providing representations and some\nrational for the requirement that OSLC Services provide RDF/XML\nrepresentations.\n\nOSLC resource representations come in many forms and are subject to\nstandard HTTP mechanisms for content negotiation.\n\nOSLC domain specifications (1) SHOULD require the representations\nneeded for the specific scenarios that they are addressing and (2)\nSHOULD recognize that different representations are appropriate for\ndifferent purposes. For example, browser oriented scenarios might be\nbest addressed by JSON or Atom format representations. For these\nreasons, OSLC Services MAY provide and accept standard or emerging\nstandard formats such as XML, JSON, HTML, Turtle and the Atom\nSyndication Format.\n\nOSLC domain specifications are also expected to follow common practices\nand conventions that are in concert with existing industry standards and\noffer consistency across domains. All of the OSLC specifications are\nbuilt upon the standard RDF data model, allowing OSLC to align with the\nW3C's Linked Data initiative. In addition, all OSLC specifications have\nadopted the convention to illustrate RDF/XML representations and will\ntypically require RDF/XML representations to enable consistency across\nOSLC implementations. For those reasons, OSLC Services SHOULD\nprovide and accept RDF/XML representations for each OSLC resource.\n\nThough the OSLC Core workgroup does provide guidance on how to form\nRDF/XML representations using a subset of RDF/XML (reference: [Appendix\nB - Representation Guidance and\nExamples](OSLCCoreSpecAppendixRepresentations)), OSLC clients **SHOULD\nNOT* assume any specific form of RDF/XML. It is *RECOMMENDED** that\nOSLC Services also provide an HTML representation for each resource.\n\nUse standard content-types\n\nNote that existing standard content-types are used, e.g.\napplication/rdf+xml and application/json, in this document and no\nnew content-types are introduced (except for the one introduced in the\nUI Preview specification). Those writing OSLC\nspecifications are strongly encouraged to follow this pattern -- use\nstandard and existing content-types and avoid inventing new\ncontent-types for existing formats.\n\nIn past OSLC specifications we defined a specific RDF/XML format for\neach resource defined and gave each its own content-type. This implied\nto consumers that each resource had a different format when in reality\nthey were all standard RDF/XML. Using different content-types makes it\nmore difficult to write generic tools, crawlers and other services that\nwork across all data.\n\n Order of property values insignificant\n\nThis specification defines how OSLC property values are to be\nrepresented in a variety of formats. Except in the case of a sorted\nQuery Response, the ordering of property values is insignificant. OSLC\nclients and service providers MUST not place any significance on the\nordering of property values in representations.\n\nUse Absolute URIs\n\nOSLC representations MUST use absolute URIs in all cases except XML\nrepresentations, where the xml:base attribute may be used to allow\nrelative URIs to be resolved to absolute form (reference: XML Base).\n\nBefore a resource representation that uses xml:base is posted to an OSLC\nService for creation, it may include relative URIs that cannot be\nresolved until the OSLC Service has received, created and assigned a URI\nto the new resource.\n\nAppendix A: Common Properties and Resources\n\nSee separate page OSLC Core Spec Appendix A\n\nAppendix B: Representation Guidance and Examples\n\nSee separate page [OSLC Core Spec Appendix\nB](OSLCCoreSpecAppendixRepresentations)\n\nAppendix C: Guidance on Links and Relationships\n\nSee separate page OSLC Core Spec Appendix C\n\nAppendix D: References\n\nThese are the specifications referenced by the OSLC Core Specification.\n\nBNF [Backus-Naur\n    Form](http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form)\nCSS 2.1 - [Cascading Style Sheets Level 2 Revision 2\n    v2.1](http://www.w3.org/TR/2009/CR-CSS2-20090908/)\nDublin Core 1.1 - [Dublin Core Metadata Element Set, Version\n    1.1](http://dublincore.org/documents/2010/10/11/dces/)\nFOAF - [Friend of a Friend (FOAF)\n    v0.98](http://xmlns.com/foaf/spec/20100809.html)\nHTML5 Posting Message- [ W3C HTML5\n    postMessage](http://www.w3.org/TR/html5/comms.htmlposting-messages)\nHTTP 1.1 - [Hyper-text Transfer\n    Protocol (HTTP/1.1)](http://tools.ietf.org/html/rfc2616)\nOAuth 1.0a - [RFC5849 - The OAuth 1.0\n    Protocol](http://tools.ietf.org/html/rfc5849)\nRDF/XML Concepts - [RDF/XML Concepts and Abstract\n    Syntax](http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/)\nRDF/XML Syntax - [RDF / XML Syntax\n    Specification (Revised)](http://www.w3.org/TR/2004/REC-rdf-syntax-grammar-20040210/)\nTurtle - http://www.w3.org/TeamSubmission/turtle/\nURI Syntax - [URI Generic\n    Syntax](http://tools.ietf.org/html/rfc3986)\nWindow Object - [Window Object 1.0\n    Window.name](http://www.w3.org/TR/Window/#window-embedding)\nXML Namespaces - [Namespaces in XML 1.0\n    (Third Edition)](http://www.w3.org/TR/REC-xml-names/)\nXML Base - [XML Base\n    (Second Edition)](http://www.w3.org/TR/xmlbase/)\nXSD Datatypes - [XML Schema Part 2: Datatypes Second\n    Edition](http://www.w3.org/TR/xmlschema-2)\n\n",
        "tags": []
    },
    {
        "uri": "/../specifications/archive/core-2.0/source",
        "content": " \n\n---+!! Open Services for Lifecycle CollaborationCore Specification Version 2.0\n \n\n*This Version*\n   * [[http://open-services.net/bin/view/Main/OslcCoreSpecification]]\n*Latest Version*\n   * [[http://open-services.net/bin/view/Main/OslcCoreSpecification]]\n*Authors*\n   * Dave Johnson, Steve Speicher\n*Contributors*\n   * The [[OslcCore][OSLC Core Specification Workgroup]]\n\n*Table of Contents*\n\n%TOC{depth=\"2\"}%\n\n*License*\n\n[[http://i.creativecommons.org/l/by/3.0/us/88x31.png]]  This work is licensed under a [[http://creativecommons.org/licenses/by/3.0/us/][Creative Commons Attribution License]].\n\n*Notation and Conventions*\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED, SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\" and \"OPTIONAL\" in this document are to be interpreted as described in [[http://www.ietf.org/rfc/rfc2119.txt][RFC-2119]]. This document is a mixture of normative and informative text. See the [[#TheGlossary][the glossary]] below for definitions of these terms.\n\n---\n \n\n---+ Overview\n\n(this section is informative)\n\nThe Open Services for Lifecycle Collaboration (OSLC) initiative is creating a family of web services specifications for products, services and other tools that support all phases of the software and product lifecycle. The purpose of these specifications is to enable integration between products that support Application Life-cycle Management (ALM) and Product Life-cycle Management (PLM). Each part of the lifecycle or domain has its own group and specification, for example there are Change Management, Quality Management, Estimation & Measurement and more. Each of the domain specifications are built upon this core specification.\n\nThis OSLC Core Specification sets out the common features that every OSLC Service can be expected to support using terminology from the World Wide Web Consortium (!W3C). New terminology that we introduce can be found in the glossary section below. This specification is mostly about OSLC Services, it specifies what OSLC Services MUST, SHOULD and MAY do. It also contains some required behaviors for OSLC clients and rules for OSLC domain specifications that extend this specification.\n\nOSLC Services are accessible via a Service Provider Resource that describes the Services offered. Each Service can provide Creation Factories for resource creation, Query Capabilities for resource query and Delegated UI Dialogs to enable clients to create and select resources via a web UI. Query Capabilities and Creation Factories may offer Resource Shapes that describe the properties of resources managed by the service. This is illustrated in the diagram below. See the section below on Service Provider Resources for further discussion of these concepts.\n\n*Figure #1: OSLC Core Specification concepts and relationships*\n\n\n\nThis specification establishes terminology and rules for defining resources in terms of the property names and value-types that are allowed and required. OSLC domain specifications are expected to use these rules and terminologies to describe their resources. See the OSLC Defined Resources section for more on this topic.\n\nThis specification also sets out rules for creating resource representations in RDF/XML, JSON, Atom and Turtle formats. OSLC domain specifications are expected to refer to these rules when specifying how their resources are to be represented. See the OSLC Defined Resource Representations section for the representation rules and examples of each format.\n\n#AboutTheVersionNumber *About the version number.* We use the version number \"2.0\" even though there has never been an OSLC Core Version 1.0 specification. We do this because this OSLC Core specification was written after a series of version 1.0 domain specifications were finalized by OSLC workgroups. The version 2.0 domain specifications will all be based on this Core specification and _to avoid confusion_ this specification will also be known as Version 2.0.\n\n*About RDF*. The resource and property-based data model used in OSLC resources is based on the Resource Description Framework (RDF) and OSLC requires RDF representations, but OSLC uses a small number of RDF concepts and does not require implementers to provide an RDF triple-store or a SPARQL query-engine.\n\n---++ Design considerations\n\nThe core philosophies of OSLC are to build on the powerful and scalable architecture of the World Wide Web and to do the simplest possible things that will work.\n\n*Build on the WWW*. OSLC builds on the architecture of the WWW and follows the REST architectural pattern. This means that OSLC Services provide a uniform HTTP interface, OSLC URIs are stable and opaque and, in simple terms, OSLC works like the web.\n\n*Keep things simple*. Doing the simplest things that will possibly work means a couple of different things in regard to OSLC. It means starting with simple and existing concepts. For example, we model everything as resources with property values and do not stray from that model. Keeping things simple also means building on established and well-known specifications, but also carefully limiting the number of other specifications that we reference. This simplicity is intended to enable loose coupling and to make life easier for everybody: OSLC domain work groups, OSLC Service implementers and OSLC client developers.\n\n*Accommodate different schemas*. Because of the breadth of the OSLC domains, spanning lifecycle and platforms, OSLC has to work for systems with very different data schemas or no schemas at all. Flexibility is needed, but some OSLC Services must be able to offer information about resource properties so that clients can learn which are allowed and required for resource creation, query and reporting.\n\n*Accommodate different representations*. Different client platforms might require or at least prefer different representations. For example, in the browser a JSON or Atom format representation might work best. OSLC Services will all support RDF/XML and may support other formats including JSON, Atom and Turtle.\n\n*Align with the !W3C Linked Data initiative*. Instead of defining a new data model, OSLC&rsquo;s resource and property-value approach is based on industry standard Resource Description Framework (RDF) data model. This model allows OSLC to keep things simple, build on the WWW and accommodate different schemas.\n\n---++ Glossary of terms\n\nThis is a guide to some of the terminology used in this document. The following definitions are standard !W3C concepts. OSLC uses these concepts without modification &ndash; their definitions are summarized here for the convenience of the reader. See http://www.w3c.org.\n\n   * *Resource*: A network data object or service that can be identified by a URI. Resources may be available in multiple representations (e.g. multiple languages, data formats, size, resolutions) or vary in other ways. (reference: HTTP)\n\n   * *Representation*: An HTTP payload entity, included in an HTTP response, that is subject to content negotiation. There may exist multiple representations. associated with a particular HTTP response status. (reference: HTTP)\n\n   * *URI*: Uniform Resource Identifiers are simply formatted strings which identify--via name, location, or any other characteristic -- a resource (reference: URI Syntax)\n\nHere are the OSLC specific terms used in this specification.\n\n(these definitions are normative)\n\n   * *OSLC Domain*: an OSLC Domain is one ALM or PLM topic area such as Change Management, Requirements management or Automation. Each OSLC Domain will have its own OSLC specification that complies with this Core specification.\n\n   * *OSLC Service*: a set of capabilities that enable a web client to create, retrieve, update and delete resources managed by an ALM or PLM product or online service offering and associated with one OSLC Domain.\n\n   * *OSLC Service Provider*: a product or online service offering that provides an implementation of one or more OSLC Services, which may themselves implement different OSLC Domain specifications.\n\n   * *OSLC Resource*: a resource that is managed by an OSLC Service, may have properties and may link to other resources including those provided by other OSLC Services.\n\n   * *OSLC Defined Resource*: a resource that is defined by an OSLC specification, see OSLC Defined Resources below.\n\n   * *OSLC Defined Properties*: resource properties that are defined by an OSLC specification, defined by an OSLC Resource Shape or both.\n\n   * *OSLC Resource Shape*: defines the set of OSLC Properties expected in a resource for specific operations (i.e. creation, update or query) for each their value types, allowed values, cardinality and optionality. Examples of such operations include OSLC Creation Resource and Query Resource. Other examples might include applications that display data in tables.\n\n   * *OSLC Creation Factory*. A creation factory provides a URI used to create new resources via HTTP POST and may also provide Resource Shapes that describe the types of resources that may be created.\n\n   * *OSLC Query* *Capability*: A query capability provides a base URI for forming query resource URIs and, optionally, Resource Shapes that describe the property values that may be used in query expressions and returned in query results.\n\n   * *OSLC Response Info Resource*: An OSLC Defined Resource that provides information about a paged resource representation, e.g. the next page in a multi-page query result representation.\n\nHere are some industry terms that we use in this specification:\n\n   * *Application Lifecycle Management (ALM)*: ALM is the marriage of business management to software engineering made possible by tools that facilitate and integrate requirements management, architecture, coding, testing, tracking, and release management ([[http://en.wikipedia.org/wiki/Application_lifecycle_management]]).\n   * *Product Lifecycle Management (PLM)*: In industry, product lifecycle management (PLM) is the process of managing the entire lifecycle of a product from its conception, through design and manufacture, to service and disposal (from [[http://en.wikipedia.org/wiki/Product_lifecycle_management]]).\n\nAnd finally, we use the following two terms to describe portions of the OSLC Core specification:\n\n   * *Normative*. Normative sections of this document set forth requirements that must be met to establish conformance with the OSLC Core specification; or providing recommendations or optional courses of action. This is done using use words from [[http://www.ietf.org/rfc/rfc2119.txt][RFC-2119]] (e.g. MUST, SHOULD, MAY, etc.). For recommended or optional features, conformance is not dependent on the fact of implementation, but, if implemented, that implementation is as prescribed in this specification. Contrast with informative.\n\n   * *Informative*. Informative text provides background or explanation. Contrast with Normative. It should be clear which sentences and paragraphs are informative from the context and the absence of RFC-2119 keywords. Sections that are purely informative will be marked as informative. Informative text that might be mistaken for normative will also be marked.\n\n---\n \n\n---+ OSLC Defined Resources\n\nAn OSLC Resource is a resource managed by an OSLC Service. An OSLC Resource is typically something like a Change Request, a Requirement or some other ALM or PLM artifact or record, but an OSLC Resource could also be a video or a presentation file. The resource&rsquo;s storage medium is unconstrained by OSLC, e.g. it could be stored in a relational database, a flat-file on disk, a source code control system, or in any other way.\n\nAn OSLC Service can manage any type of resource; OSLC specifications only constrain an OSLC Service&rsquo;s behavior with respect to resource types it manages that are defined by OSLC specifications (OSLC Defined Resources). OSLC Defined Resources may be specified in any OSLC specification, including this document. Resources are defined by the properties that are allowed and required in the resource.\n\n---++ OSLC Defined Resources\n\nOSLC uses a simple model of resources with property values intended to be consistent with the Resource Description Framework (RDF) data model (reference: RDF Concepts). OSLC also builds upon the Extensible Markup Language (XML) namespace mechanism (reference: XML Namespaces).\n\nWhen specifying a resource or a property, OSLC Specifications define its type as a URI which can be decomposed into a namespace URI and a name. We abbreviate type URIs as Prefixed Names (reference: Prefixed Names), which are represented in XML as QNames. The namespace used for resources defined in this specification is defined as follows:\n\n   * Namespace URI: =http://open-services.net/ns/core#=\n   * Default Prefix: =oslc=\n\nWhen defining an OSLC Resource type, OSLC Specifications *MUST* provide the following information:\n\n   * *Name* (String): name of the resource which *MUST* be valid as the Local Name part of a QName (reference: XML Namespaces).\n   * *URI* (URI): The URI of the resource definition. Per the rules of Prefixed Names, this URI is formed by appending the Name to the end of the Namespace URI in the specification that defines the resource. For example, the resource named Service (defined below) gets the Type URI of =http://open-services.net/ns/core#Service=.\n\nOnce a resource type is defined, its allowed and required properties can be defined.\n\nRegardless of any property definitions, providers and clients MAY impose implementation-specific limits on resources they accept. For example, they are not required to accept/create/store resources whose RDF triples contain objects with arbitrarily large literal values.\n\n---+++ Defining OSLC Properties\n\nOSLC Specifications *MAY* provide a list of properties allowed and/or required for a particular domain and operation on an OSLC Defined Resource; if no operation is specified, then the list applies to all operations governed by that specification. Specifications that provide a list of properties and constraints on them *SHOULD* provide the following information for each property that they define.\n\n   * *Name*: name of the property which *MUST* be valid as the Local Name part of a QName (reference: XML Namespaces).\n   * *URI*: The URI that identifies the property. The URI is formed by appending the Name to the end of the Namespace URI associated with the property. For example, the resource named =oslc:ServiceProviderCatalog= (defined below in the Service Providers Section) defines a property named =domain= with the URI of =http://open-services.net/ns/core#domain=\n   * *Description*: Description of the property.\n   * *Occurs*: value *MUST* be one of:\n      * [[http://open-services.net/ns/core#Exactly-one][ =http://open-services.net/ns/core#Exactly-one= ]]\n      * [[http://open-services.net/ns/core#Zero-or-one][ =http://open-services.net/ns/core#Zero-or-one= ]]\n      * [[http://open-services.net/ns/core#Zero-or-many][ =http://open-services.net/ns/core#Zero-or-many= ]]\n      * [[http://open-services.net/ns/core#One-or-many][ =http://open-services.net/ns/core#One-or-many= ]]\n   * *Value-types*: A property *MAY* allow multiple value-types and a value *MUST* satisfy one or more of them. Each value-type *MUST* be a URI that corresponds to one of the following:\n      * Literal value-types:\n         * *Boolean*: a boolean type as specified by XSD Boolean ( =http://www.w3.org/2001/XMLSchema#boolean=, reference: XSD Datatypes).\n         * *DateTime*: a Date and Time type as specified by XSD dateTime ( =http://www.w3.org/2001/XMLSchema#dateTime=, reference: XSD Datatypes).\n         * *Decimal*: a decimal number type as specified by XSD Decimal ( =http://www.w3.org/2001/XMLSchema#decimal=, reference: XSD Datatypes).\n         * *Double*: a double floating-point number type as specified by XSD Double ( =http://www.w3.org/2001/XMLSchema#double=, reference: XSD Datatypes).\n         * *Float*: a floating-point number type as specified by XSD Float ( =http://www.w3.org/2001/XMLSchema#float=, reference: XSD Datatypes).\n         * *Integer:* an integer number type as specified by XSD Integer ( =http://www.w3.org/2001/XMLSchema#integer=, reference: XSD Datatypes).\n         * *String*: a string type as specified by XSD String ( =http://www.w3.org/2001/XMLSchema#string=, reference: XSD Datatypes).\n         * *XMLLiteral*: a Literal XML value ( [[http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral][ =http://www.w3.org/1999/02/22-rdf-syntax-ns#XMLLiteral= ]]).\n      * Resource value-types:\n         * *Resource*: value is a resource at a specified URI (i.e. a URI Reference) ( [[http://open-services.net/ns/core#Resource][ =http://open-services.net/ns/core#Resource= ]] ).\n         * *Local Resource*: value is an resource available only inside the resource being defined (i.e. a Blank Node) ( [[http://open-services.net/ns/core#LocalResource][ =http://open-services.net/ns/core#LocalResource= ]] ).\n         * *AnyResource*: value is either a *Resource* or *Local Resource* as defined above ( [[http://open-services.net/ns/core#AnyResource][ =http://open-services.net/ns/core#AnyResource= ]] ).\n   * *Representation*: for properties with a resource value-type, OSLC specifications should also specify how the resource will be represented. The options are [[http://open-services.net/ns/core#Reference][ =http://open-services.net/ns/core#Reference= ]] , [[http://open-services.net/ns/core#Inline][ =http://open-services.net/ns/core#Inline= ]] or [[http://open-services.net/ns/core#Either][ =http://open-services.net/ns/core#Either= ]].\n   * *Range*: for properties with a resource value-type, OSLC specifications should follow the best practices in [[OslcCoreSpecAppendixLinks][Appendix C Guidance on Links and Relationships]], which usually results in no restrictions on the range of possible resource types allowed, and an informative recommendation in the property description suggesting which resource types implementations should expect to find. This can be specified as a list of one or more resource types specified by URI reference; when no restrictions are required, use the string any. Clients SHOULD allow any resource type as the target of a link. Providers are strongly *RECOMMENDED* to behave reasonably for all resource types listed in a property&rsquo;s description, and to degrade gracefully for others, as defined in Appendix C.\n   * *Read-only*: Boolean indication of whether or not clients are permitted to replace the property&rsquo;s value after the resource has been created. Allowable values are: true, false, unspecified.\n      * *True* indicates that providers *SHOULD NOT* permit clients to change the property&rsquo;s value after the resource has been created.\n      * *False* indicates that providers *MAY* permit clients to change the property&rsquo;s value after the resource has been created.\n      * *Unspecified* indicates that the domain specification leaves the choice up to provider implementations.\n\nIn the rest of this document we will define OSLC resources as described above. The below section titled OSLC Defined Resource Representations defines how OSLC resources are to be represented in RDF/XML, JSON and other formats.\n\nOSLC Services that wish to provide the information above in a machine-readable format *MAY* use OSLC Resource Shapes, see [[OSLC Core Spec Appendix A][Appendix A: Common Properties and Resources]] for more information.\n\nNOTE: we do not mention Internationalization of strings here because we expect standard HTTP content-negotiation and representation (e.g. =xml:lang=) mechanisms to be used for such.\n\n---++ Unknown properties and content\n\nFor OSLC Defined Resources, clients *SHOULD* assume that an OSLC Service will discard unknown property values. An OSLC Service *MAY* discard property values that are not part of the resource definition or Resource Shape known by the server. If a client needs verification that the requested update was accepted it *SHOULD* note the HTTP response header ETag value returned with the HTTP PUT, Immediately HTTP GET the resource back and compare the HTTP response header ETag value and contents with its expectations. The Service *SHOULD* *NOT* return an error code for unrecognized content. A Service *MUST* return an error code if recognized content is invalid.\n\nThe rule is different for clients. When doing an update, OSLC clients *MUST* preserve any unknown property-values and other content in OSLC Defined Resources.\n\nSee following section on Resource Update.\n\n---++ Resource Operations\n\nOSLC Services use HTTP for create, retrieve, update and delete operations on resources. OSLC Services *MUST* comply with the HTTP specification (reference: HTTP).\n\n---+++ Resource Creation \n\n(this section is informative)\n\nTo create an OSLC Defined Resource, or any type of resource managed by an OSLC Service, an OSLC client HTTP POSTs a representation of that resource to a Creation URI. See the section on [[#Creation_Factories][Creation Factories]] for more information.\n\n---+++ Resource Removal\n\n(this section is informative)\n\nTo delete an OSLC Defined Resource, or any type of resource managed by a service, a client performs an HTTP DELETE on the resource's URI.\n\n---+++ Resource Update\n\nTo update an OSLC Resource in an OSLC Service, a client fetches a representation of that resource via HTTP GET. The client updates the representation and then uses HTTP PUT to send the new representation to the resource's URI.\n\nRecall from [[#Unknown_properties_and_content][OSLC Defined Resources: Unknown properties and content]] above that, when doing an update, OSLC clients must preserve any unknown property-values and other content in OSLC Defined Resources.\n\nBecause the update process involves first getting a resource, modifying it and then later putting it back to the server there is the possibility of a conflict, e.g. some other client may have have updated the resource since the GET. To mitigate this problem, OSLC Services *SHOULD* use the HTTP =If-Match= header:\n\n   * If the HTTP =If-Match= header is missing OSLC Services *SHOULD* return HTTP Bad Request (400) status code to indicate that the header is required.\n   * If the HTTP =If-Match= header is present OSLC Services *MUST* behave as described in the HTTP specification, returning an HTTP Precondition Failed (412) error to indicate that the header does not match.\n   * If the HTTP =If-Match= header is present and it matches, but there is some other problem or conflict with the update then OSLC Services *MAY* return an HTTP Conflict (409) to indicate that problem.\n\nNote that section [[#Error_Responses][Error Responses]] below, we specify that when an error occurs and useful information can be provided to clients OSLC Services *SHOULD* return error information in the body of the response.\n\n---++ Resource Paging\n\nOSLC Services *MAY* support a technique called Resource Paging to enable clients to retrieve resources one page at a time.\n\nWhen a client requests a resource, the client can expect that the entire resource will be returned in the response, with all property values. This can be problematic because, in some cases, resources may be so large that a client might not want to retrieve the entire resource in one HTTP response.\n\nOne solution for response size-sensitive Clients is to check size before loading. Clients that do not wish to load large resources can use the HTTP HEAD method to determine the size of a resource and, according to the rules of HTTP the server's *SHOULD* include an HTTP Content-Length header that indicates the size of the resource as the \"decimal number of OCTETs.\" If the size is too large, a client can choose not to retrieve the resource.\n\nAnother solution is to use Resource Paging; here's how it works. To get a paged version of a resource, a client adds the \"key=value\" pair =oslc.paging=true= to the query component of the resource URI and the server *MAY* respond by returning a representation that contains partial information about the resource; only a subset of the resource's property values.\n\nWhen a page is returned and it is *NOT* the last page in the sequence, then it *SHOULD* include an =oslc:ResponseInfo= (defined below), which that contains a resource-valued property =oslc:nextPage= that links to a resource that represents the next page of property-values. Because paging is unstable (see below), by the time a client follows an =oslc:nextPage= link there may no longe be a next page, in this case the server *MAY* respond with an HTTP 404 Page Not Found status code.\n\nA client can also request paging by adding the \"key=value\" pair =oslc.pageSize= to the query string component of the resource URI. By adding this, a client requests that the server respond with a specific number of property values. For example, =oslc.pageSize=20= indicates to the server that the client would like 20 values per page. OSLC Services *MAY* ignore =oslc.pageSize=.\n\nWhen Resource Paging is used, the values of a multi-valued property *MAY* be split across resource pages. Each property value *MUST* be represented in its entirety and not split across multiple partial resource pages.\n\n---+++ Provider response-size limitations\n\nWhen a client requests a resource that an OSLC Service considers to be too large to return in one response and the client has not indicated that it desires paging (via oslc.paging or oslc.pageSize), the OSLC Service *MAY* redirect the client to a representation that contains partial information about the resource, as follows:\n   * The OSLC Service receives an HTTP GET request for a resource that exceeds size limits and URL does not include =oslc.paging= or an =oslc.pageSize= key/value pair.\n   * The OSLC Service returns an HTTP Status 302 redirect a URL that does include the key/values for paging, as follows:\n      * If the client did not indicate paging, the new redirect URL *MUST* include the =oslc.paging= pair.\n      * If the client indicated a page size, then the redirect URL *MUST* include the =oslc.pageSize= pair with a size value that is acceptable to the service.\n   * The client *MAY* choose to follow the redirect and receive a representation that contains partial information about the resource.\n\nOn receiving a resource representation, OSLC Clients *SHOULD* check for the presence of an =oslc:nextPage= value to determine if the representation contains partial information about the resource. If the value is present, then paging is in effect and the representation contains partial information about the resource.\n\n---+++ Unstable Paging\n\nBecause HTTP is a stateless protocol and OSLC Services manage resources that can change frequently, OSLC clients *SHOULD* assume that resources can change as they page through them using the =oslc:nextPage= mechanism.\n\n---+++ Stable Paging\n\nSome OSLC Services might wish to guarantee stable paging, meaning that the chain of =oslc:nextPage= links in a resource represent a snapshot in time and will not change as the client pages through them. OSLC specifications that require stable paging *SHOULD* state this requirement and specify to which resources it applies.\n\nNote that because stable paging implementations are based on server-side state, it is possible that such state will expire. Implementations *MAY* use the HTTP response code 410 (Expired) to indicate to clients that the next-page link they requested has expired.\n\n---+++ Response Information\n\nResource representations returned via Resource Paging *MUST* include a resource of type =oslc:ResponseInfo=, as defined in this section. A response info resource representation describes information about a paged HTTP response body in which it appears.\n\n   * *Name*: =ResponseInfo=\n   * *URI*: =http://open-services.net/ns/core#ResponseInfo=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =dcterms:title= | zero-or-one | True | XML Literal | n/a | n/a | Title of the response |\n| =dcterms:description= | zero-or-one | True | XML Literal | n/a | n/a | Description of response |\n| =oslc:nextPage= | zero-or-one | True | Resource | Reference | =any= | Link to next page of response |\n| =oslc:totalCount= | zero-or-one | True | Integer | n/a | n/a | This optional property indicates the total number of results across all pages, its value should be non-negative. In the context of a query resource, this value *SHOULD* be the total number of results, i.e. the number of resources that match the query. In the context of other resources, the value *SHOULD* be the total number of property values (i.e. RDF triples) of the resource. Unless Stable Paging is in effect, the total count *MAY* vary as a client retrieves subsequent pages. |\n\nThe subject resource URI of the =oslc:ResponseInfo= resource representation will be the HTTP request URI, or URI from subsequent redirects. The response representation may also include properties from subject resources different from the one identified by the request URI.\n\nHere's an example, using the OSLC Core RDF/XML representation guidance, that illustrates how the =oslc:ResponseInfo= resource representation is included in addition to the blog entry resource representation.\n\n*Example: Resource Paging, partial response with response info resource representation*\n\nExample URI: =http://example.com/blogs/entry/1?oslc.paging=true&pageno=2=\n\n \n\n\n   \n      \n   \n\n   \n      \n   \n\n\n\n\nRefer to the OSLC Defined Resource Representation guidance for an explanation of how the response info resource may be represented in RDF/XML.\n\n---++ Selective Property Values\n\nOSLC Services *MAY* support a technique called Selective Properties to enable clients to retrieve only selected property values.\n\nBy adding the key=value pair =oslc.properties=, specified below, to a resource URI, a client can request a new resource with a subset of the original resource's values. Here's how the selective properties values =oslc.properties= and =oslc.prefix= work.\n\n---+++ oslc.properties\n\nThe =oslc.properties= key=value pair lets you specify the set of properties to be included in the response. Both immediate and nested properties may be specified. A nested property is a property that belongs to the resource referenced by another property. Nested properties are enclosed in brace brackets, and this nesting may be done recursively, i.e. a nested property may contain other nested properties.\n\nFor example, suppose we have a bug report resource at the following URL:\n http://example.com/bugs/4242\n\nSuppose this bug resource has properties such as =dcterms:title=, =dcterms:description=, and =dcterms:creator=, and that =dcterms:creator= refers to a person resource that has properties such as =foaf:givenName= and =foaf:familyName=. Suppose you want a representation of the bug report that includes its =dcterms:title= and the =foaf:givenName= and =foaf:familyName= of the person refered to by its =dcterms:creator=. The following URL illustrates the use of the =oslc.properties= query value to include those properties:\n\nhttp://example.com/bugs/4242?oslc.properties=dcterms:title,dcterms:creator{foaf:givenName,foaf:familyName}\n\n\n*Syntax*\n\nThe =oslc.properties= pair is defined by the =oslc_properties= term in the following BNF grammar:\noslc_properties ::= \"oslc.properties=\" properties\nproperties      ::= property (\",\" property)*\nproperty        ::= identifier | wildcard | nested_prop\nnested_prop     ::= (identifier | wildcard) \"{\" properties \"}\"\nwildcard        ::= \"*\"\nidentifier      ::= PrefixedName\nPrefixedName    ::= /* see \"SPARQL Query Lanaguage for RDF\", http://www.w3.org/TR/rdf-sparql-query/#rPrefixedName */\n\n---+++ oslc.prefix\n\nIn our examples of =oslc.properties=, property names include a URI prefix, i.e. =dcterms:= or =foaf:=. An OSLC Service *SHOULD* predefine URI prefixes for its properties. Here we assume that OSLC has predefined the Dublin Core ( =dcterms:=) and Friend of a Friend ( =foaf:=) prefixes. However, OSLC resources *SHOULD* also be open to new content, which means that new properties may not have predefined URI prefixes. We therefore need a way to define new URI prefixes in resource requests. The =oslc.prefix= value lets you specify URI prefixes used in property names. For example, suppose the =foaf:= prefix was not predefined. The following URL illustrates the use of the =oslc.prefix= value to define it:\n\nhttp://example.com/bugs/4242?oslc.prefix=foaf=&oslc.properties=foaf:lastName,...\n\n*Syntax*\n\nThe syntax of the =oslc.prefix= is defined by the =oslc_prefix= term in the following BNF grammar:\noslc_prefix ::= \"oslc.prefix=\" prefix_defs\nprefix_defs ::= prefix_def (\",\" prefix_def)*\nprefix_def  ::= prefix \"=\" uri_ref_esc\nprefix      ::= PN_PREFIX\nPN_PREFIX   ::= /* see \"SPARQL Query Lanaguage for RDF\", http://www.w3.org/TR/rdf-sparql-query/#rPN_PREFIX */\nuri_ref_esc ::= /* an angle bracket-delimited URI reference in which > and \\ are \\-escaped. */\n\n---++ Common Properties\n\nOSLC domains specifications are strongly encouraged to use the common properties approved by the OSLC Core Workgroup (See [[OSLC Core Spec Appendix A]]) rather than defining new properties.\n\n---\n \n\n---+ Service Provider Resources\n\nOSLC Services are accessible via a Service Provider Resource that describes each service, which domain specifications the service implements as well as the creation, query and delegated UI capabilities of each service.\n\nAdditionally, a provider may offer a Service Provider Catalog that lists related Service Providers.\n\n---++ Conceptual Model \n\nThe conceptual model of Service Provider Catalog and Service Provider resources is simple. They are both resources with property values. The values allowed and required in each type of resource are defined below.\n\nThe diagram below illustrates the Service Provider Catalog and Service Provider concepts and relationships. As you can see there are two Resources defined: Service Provider Catalog and Service Provider. There are also a set of Local In-Line Resources that are used inside the Resources to define namespaces, OAuth configurations, contributors as well as services and their capabilities.\n\n*Figure #2: Service Provider concepts and relationships*\n\n\n\nNext, we will formally define the Service Provider Catalog and Service Provider resources.\n\n---+++ Resource: Service Provider Catalog\n\nAn OSLC implementation that offers one or more Service Provider resources (see below), MAY also provide Service Provider Catalog to enable OSLC clients to find Service Providers offered. These catalogs may contain other nested catalogs as well as service providers.\n\n   * *Name*: =ServiceProviderCatalog=\n   * *URI*: =http://open-services.net/ns/core#ServiceProviderCatalog=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =dcterms:title= | zero-or-one | True | XMLLiteral | n/a | n/a | Title of the service provider catalog |\n| =dcterms:description= | zero-or-one | True | XMLLiteral | n/a | n/a | Description of the service provider catalog |\n| =dcterms:publisher= | zero-or-one | True | Local Resource | Inline | [[#Resource_Publisher][ =oslc:Publisher= ]] | Describes the software product that provides the implementation. |\n| =oslc:domain= | zero-or-many | True | Resource | Reference | n/a | Namespace URI of the specification that is implemented by this service. In most cases this namespace URI will be for an OSLC domain, but other URIs MAY be used. |\n| =oslc:serviceProvider= | zero-or-many | True | Resource | Either | [[#Resource_Service_Provider][ =oslc:ServiceProvider= ]] | A service offered by the service provider. |\n| =oslc:serviceProviderCatalog= | zero-or-many | True | Resource | Either | [[#Resource_Service_Provider_Catalog][ =oslc:ServiceProviderCatalog= ]] | Additional service provider catalog. |\n| =oslc:oauthConfiguration= | zero-or-many | True | Local Resource | Inline | [[#Resource_OAuth_Configuration][ =oslc:OAuthConfiguration= ]] | Defines the three OAuth URIs required for a client to act as an OAuth consumer. |\n\n---+++ Resource: Service Provider\n\nA Service Provider describes a set of services offered by an OSLC implementation.\n\n   * *Name*: =ServiceProvider=\n   * *URI*: =http://open-services.net/ns/core#ServiceProvider=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =dcterms:title= | zero-or-one | True | XMLLiteral | n/a | n/a | Title of the service provider |\n| =dcterms:description= | zero-or-one | True | XMLLiteral | n/a | n/a | Description of the service provider |\n| =dcterms:publisher= | zero-or-one | True | Local Resource | Inline | [[#Resource_Publisher][ =oslc:Publisher= ]] | Describes the software product that provides the implementation. |\n| =oslc:service= | one-or-many | True | Local Resource | Inline | [[#Resource_Service][ =oslc:Service= ]] | Describes a service offered by the service provider. |\n| =oslc:details= | zero-or-many | True | Resource | Reference | =any= | A URL that may be used to retrieve a web page to determine additional details about the service provider. |\n| =oslc:prefixDefinition= | zero-or-many | True | Local Resource | Inline | [[#Resource_Prefix_Definition][ =oslc:PrefixDefinition= ]] | Defines a namespace prefix for use in JSON representations and in forming OSLC Query Syntax strings. |\n| =oslc:oauthConfiguration= | zero-or-one | True | Local Resource | Inline | [[#Resource_OAuth_Configuration][ =oslc:OAuthConfiguration= ]] | Defines the three OAuth URIs required for a client to act as an OAuth consumer. |\n\n---+++ Resource: Service\n\nA Service describes the specific services offered by an implementation of an OSLC specification.\n\n   * *Name*: =Service=\n   * *URI*: =http://open-services.net/ns/core#Service=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =oslc:domain= | exactly-one | True | Resource | Reference | n/a | Namespace URI of the specification that is implemented by this service. In most cases this namespace URI will be for an OSLC domain, but other URIs MAY be used. |\n| =oslc:creationFactory= | zero-or-many | True | Local Resource | n/a | [[#Resource_Creation_Factory][ =oslc:CreationFactory= ]] | Enables clients to create new resources |\n| =oslc:queryCapability= | zero-or-many | True | Local Resource | n/a | [[#Resource_Query_Capability][ =oslc:QueryCapability= ]] | Enables clients query across a collection of resources |\n| =oslc:selectionDialog= | zero-or-many | True | Local Resource | n/a | [[#Resource_Dialog][ =oslc:Dialog= ]] | Enables clients to select a resource via UI |\n| =oslc:creationDialog= | zero-or-many | True | Local Resource | n/a | [[#Resource_Dialog][ =oslc:Dialog= ]] | Enables clients to create a resource via UI |\n| =oslc:usage= | zero-or-many | True | Resource | Resource | n/a | An identifier URI for the domain specified usage of this service. If a service provider has multiple services, it may designate the primary or default one that should be used with a property value of =http://open-services.net/ns/core#default= |\n\n---+++ Resource: Creation Factory\n\nA Creation Factory describes a creation factory, capable of creating new resources via HTTP POST.\n\n   * *Name*: =CreationFactory=\n   * *URI*: =http://open-services.net/ns/core#CreationFactory=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =dcterms:title= | exactly-one | True | XMLLiteral | n/a | n/a | Title string that could be used for display |\n| =oslc:label= | zero-or-one | True | String | n/a | n/a | Very short label for use in menu items |\n| =oslc:creation= | exactly-one | True | Resource | Reference | n/a | To create a new resource via the factory, post it to this URI |\n| =oslc:resourceShape= | zero-or-many | True | Resource | Reference | [[OSLCCoreSpecAppendixA#oslc_ResourceShape_Resource][ =oslc:ResourceShape= ]] | A Creation Factory *MAY* provide Resource Shapes that describe shapes of resources that may be created. |\n| =oslc:resourceType= | zero-or-many | True | Resource | Reference | n/a | The expected resource type URI of the resource that will be created using this creation factory. These would be the URIs found in the result resource's =rdf:type= property. |\n| =oslc:usage= | zero-or-many | True | Resource | Resource | n/a | An identifier URI for the domain specified usage of this creation factory. If a service provides multiple creation factories, it may designate the primary or default one that should be used with a property value of =http://open-services.net/ns/core#default= |\n\n---+++ Resource: Query Capability\n\nA Query Capability describes a query capability, capable of querying resources via HTTP GET or POST.\n\n   * *Name*: =QueryCapability=\n   * *URI*: =http://open-services.net/ns/core#QueryCapability=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =dcterms:title= | exactly-one | True | XMLLiteral | n/a | n/a | Title string that could be used for display |\n| =oslc:label= | zero-or-one | True | String | n/a | n/a | Very short label for use in menu items |\n| =oslc:queryBase= | exactly-one | True | Resource | Reference | n/a | The base URI to use for queries. Queries are invoked via HTTP GET on a query URI formed by appending a key=value pair to the base URI, as described in Query Capabilities section. |\n| =oslc:resourceShape= | zero-or-one | True | Resource | Reference | n/a | The Query Capability *SHOULD* provide a Resource Shape that describes the query base URI. |\n| =oslc:resourceType= | zero-or-many | True | Resource | Reference | n/a | The expected resource type URI that will be returned with this query capability. These would be the URIs found in the result resource's =rdf:type= property. |\n| =oslc:usage= | zero-or-many | True | Resource | Reference | n/a | An identifier URI for the domain specified usage of this query capability. If a service provides multiple query capabilities, it may designate the primary or default one that should be used with a property value of =http://open-services/ns/core#default= |\n\n---+++ Resource: Dialog\n\nA Dialog describes a delegated user interface (UI) which can be used to allow a user to interactively create a new resource or pick a resource.\n\n   * *Name*: =Dialog=\n   * *URI*: =http://open-services.net/ns/core#Dialog=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =dcterms:title= | exactly-one | True | XMLLiteral | n/a | n/a | Title string that could be used for display |\n| =oslc:label= | zero-or-one | True | String | n/a | n/a | Very short label for use in menu items |\n| =oslc:dialog= | exactly-one | True | Resource | Reference | n/a | The URI of the dialog |\n| =oslc:hintWidth= | zero-or-one | True | String | n/a | n/a | Values *MUST* be expressed in __relative length units__ as defined in the [[http://www.w3.org/TR/2009/CR-CSS2-20090423/syndata.html#length-units ][W3C Cascading Style Sheets Specification (CSS 2.1)]] Em and ex units are interpreted relative to the default system font (at 100% size). |\n| =oslc:hintHeight= | zero-or-one | True | String | n/a | n/a | Values *MUST* be expressed in __relative length units__ as defined in the [[http://www.w3.org/TR/2009/CR-CSS2-20090423/syndata.html#length-units ][W3C Cascading Style Sheets Specification (CSS 2.1)]] Em and ex units are interpreted relative to the default system font (at 100% size). |\n| =oslc:resourceType= | zero-or-many | True | Resource | Reference | n/a | The expected resource type URI for the resources that will be returned when using this dialog. These would be the URIs found in the result resource's =rdf:type= property. |\n| =oslc:usage= | zero-or-many | True | Resource | Reference | n/a | An identifier URI for the domain specified usage of this dialog. If a service provides multiple selection or creation dialogs, it may designate the primary or default one that should be used with a property value of =http://open-services/ns/core#default= |\n\n---+++ Resource: Publisher\n\nA Publisher identifies and describes the software product that provides the OSLC implementation.\n\n   * *Name*: =Publisher=\n   * *URI*: =http://open-services.net/ns/core#Publisher=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =dcterms:title= | exactly-one | True | XMLLiteral | n/a | n/a | Title string that could be used for display |\n| =oslc:label= | zero-or-one | True | String | n/a | n/a | Very short label for use in menu items |\n| =dcterms:identifier= | exactly-one | unspecified | String | n/a | n/a | A URN that uniquely identifies the implementation |\n| =oslc:icon= | zero-or-one | True | Resource | reference | n/a | URL to an icon file that represents the provider. This icon should be a favicon format and 16x16 pixels in size |\n\n---+++ Resource: Prefix Definition\n\nService Providers *MUST* provide a Prefix Definition for each prefix supported by the service. Each Prefix Definition defines a namespace prefix that clients *MAY* use in forming OSLC Query Syntax strings.\n\n   * *Name*: =PrefixDefinition=\n   * *URI*: =http://open-services.net/ns/core#PrefixDefinition=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =oslc:prefix= | exactly-one | True | String | n/a | n/a | Namespace prefix to be used for this namespace |\n| =oslc:prefixBase= | exactly-one | True | Resource | Reference | n/a | The base URI of the namespace |\n\n---+++ Resource: OAuth Configuration\n\nService Providers that support OAuth Authentication *SHOULD* provide a way for clients to automatically discover the three OAuth URIs necessary to act as an OAuth Consumer.\n\n   * *Name*: =OAuthConfiguration=\n   * *URI*: =http://open-services.net/ns/core#OAuthConfiguration=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =oslc:oauthRequestTokenURI= | exactly-one | True | Resource | Reference | n/a | URI for obtaining OAuth request token |\n| =oslc:authorizationURI= | exactly-one | True | Resource | Reference | n/a | URI for obtaining OAuth authorization |\n| =oslc:oauthAccessTokenURI= | exactly-one | True | Resource | Reference | n/a | URI for obtaining OAuth access token |\n\nThe next sections cover the Creation Factory and Query Capability in more detail.\n\n---\n \n\n---+ Creation Factories\n\nAn OSLC Service can provide one or more creation factory to enable the creation of new resources. A creation factory provides a Creation URI used to create new resources via HTTP POST and may also provide Resource Shapes that describe the types of resources that may be created. To create a new OSLC Resource, an OSLC client POSTs a representation of that resource to a Creation Factory's Creation URI.\n   * An HTTP POST of content to a Creation URI *SHOULD* result in the creation of a new resource or an explanation of why creation did not occur via the appropriate HTTP status code.\n   * The response to a successful HTTP POST of content to a Creation URI *SHOULD* include a HTTP Location header that specifies the URI of the newly created resource.\n\n---++ Creating an OSLC Defined Resource\n\nTo create an OSLC Defined Resource, an OSLC Client first forms an representation of that resource including the desired and required property values. A client can learn what properties are allowed in a new OSLC Defined Resource via the OSLC specification that defines or, in some cases via a Resource Shape resource. Next the client uses HTTP POST to post that representation to a Creation URI.\n   * The response to a successful HTTP POST of a representation to a Creation Resource URI *MAY* include a representation of the newly created resource.\n   * The resource returned *MAY* contain changes to properties made by the server or new properties added by the server.\n\n\n\n---+ Query Capabilities\n\nAn OSLC Service may provide one or more Query Capabilities to enable query of resources. A Query Capability provides a base URI for forming Query Resource URIs and *MAY* provide Resource Shapes that describe the property values that may be expected in the resources that are queryable via the query capability. Thus, Query Capabilities provide a way to discover the resources managed by an OSLC Service.\n\nIn a Query Capability, the base URI, as defined by the =oslc:queryBase= property, is itself a resource managed by the service and it acts as the starting subject resource for the queries based on it. Since the list may contain hundreds of thousands of members, queries are used to filter the list for members that satisfy certain conditions, e.g. the bugs that have high priority and were created this week.\n\n---++ Conceptual Model \n\nTo perform a query an OSLC client first creates a URI by starting with a Query Capability's base URI as a base and adding a URI Query String to express the query criteria. The OSLC client then uses HTTP GET to request a Query Resource representation of the query results. The Query Resource representation will contain property values about the query and a collection of resources that match the query criteria.\n\n---++++ HTTP GET Queries\n\nTo perform an HTTP GET query, an OSLC client starts with the base URI as defined by the =oslc:queryBase= property of a Query Capability, and appends to it query parameters in a syntax supported by the service. The resulting URI is the query URI. The OSLC client sends an HTTP GET request to the query URI, optionally specifying the preferred content media type for the query response in the HTTP Accept header. OSLC Services *MUST* support query responses in RDF/XML format (media type =application/rdf+xml=) and *MAY* support other formats. OSLC Services *SHOULD* support the Query Syntax defined in this specification, but *MAY* support other syntaxes.\n\n---++ Query Syntax\n\nA query URI can be formed by adding a query string to the end of the Query Capability's base URI (or by sending the query string in the request body when using HTTP POST). The syntax used to express the query criteria in that string is specified by each OSLC domain specification.\n\nThe [[OSLCCoreSpecQuery][OSLC Core Spec Query Specification]] document defines a standard set of OSLC query parameters that other OSLC domain specifications *MAY* use to query resources.\n\n---+++ Query Specification errors\n\nIf there is an error in the specification of the query, whether the query is specified by key=value pairs in the HTTP GET URL or key=value pairs in the body of an HTTP POST, then the provider *MUST* respond with an error. The error response should be an HTTP 400 Bad Request error and an explanation of the error in the OSLC Error Response format (see Error Responses below).\n\n---\n \n\n---+ Delegated User Interface Dialogs\n\nOSLC specifications target specific integration scenarios. In some cases, allowing one product to delegate to a user interface defined in another product is a more effective way to support a use case than an HTTP interface that can only be accessed programmatically. There are two cases where this is especially true:\n\n   * *Resource creation*: when a user of a web application needs to create a new resource in an OSLC Service Provider. In this case the web application asks the service provider to provide a UI for resource creation and the provider notifies the application when the creation has been completed or canceled by the user.\n   * *Resource selection*: when a user of a web application and needs to pick a resource managed by a OSLC Service Provider. In this case the web application asks the service provider to provide a UI for resource selection and the provider notifies the application when a resource or resources has been selected or if the selection was canceled.\n\nTo support these two cases, below we define OSLC Delegated User Interface (UI) Dialogs. Delegated UI Dialogs are a technique where one provider can embed a creation or selection UI into another using a combination of an HTML &lt;iframe&gt; and !JavaScript code. The diagram below illustrates how delegated UI dialogs work in a scenario where Provider A wants to allow a user to select or create a resource managed by Provider B.\n\n*Figure #3: Delegated UI Dialog interactions*\n\n\n\nNext, the details of the Delegated UI Dialog protocol.\n\n---+++ Terminology\n\nThe following terms are used in discussions of Delegated UI Dialogs:\n\n   * *UI Consumer* - a web application that is embedding a Delegated UI Dialog from an OSLC Service Provider. This consumer could be a web page, with the Delegated UI Dialog loaded into an iframe or a native application, e.g. an IDE like Eclipse, that is embedding a web browser component.\n\n   * *UI Provider* - an OSLC Service provider that offers one or more Delegated UI Dialogs. These dialogs will be specified in the provider's Service Provider resource.\n\nThe next sections explain how Delegated UI Dialogs work.\n\n---++ Post Message and Window Name protocols\n\nTo support the widest range of web browsers, we define two different protocols for communicating the information about the user's action from the UI Provider and back to the UI Consumer. These are the Post Message and Window Name protocols described below.\n\nIn both the Post Message and Window Name protocols, the way that a UI Consumer includes a Delegated UI Dialog in an HTML page is to create an =iframe= and specify the =src= as the URI of the Delegated UI Dialog to be included. The UI Consumer indicates the protocol to be used by appending one of the two fragment identifiers below to the URI:\n\n   * =#oslc-core-postMessage-1.0= - Indicates that the Post Message protocol is to be used\n   * =#oslc-core-windowName-1.0= - Indicates that the Window Name protocol is to be used\n\nThe !JavaScript code example below shows now a UI Provider can determine which protocol is in use:\n\n\n    if (window.location.hash == '#oslc-core-windowName-1.0') {\n        // Window Name protocol in use\n    } else if (window.location.hash == '#oslc-core-postMessage-1.0') {\n        // Post Message protocol in use\n    }\n\n\n---++++ iframe Creation Considerations\n\nRegardless of the protocol in effect, it is recommended that UI Consumers follow the below iframe creation guidelines to provide a more seamless user experience:\n   * Embed the =iframe= within a =div= element, with height and width set based on the relative length values specified in the Service Resource that declares the Delegated UI Dialog.\n   * Set the =iframe= border size to '0'\n   * Set the =iframe= scrolling to 'auto'\n\nNext, the details for each of the two protocols.\n\n---+++ Post Message Protocol\n\nThe Post Message protocol relies on the HTML5 function =window.postMessage()= (reference: HTML5), available in the latest or pending releases of most browsers. UI Consumers must anticipate other, unrelated uses of postMessage(), and should ignore messages not conforming to this protocol.\n\nTypically, the embedded page will be loaded in a window inside another window, such as a iframe inside some surrounding webpage. In such cases, =postMessage()= must be called on that parent window. But in a native application, an outer page is not needed and the embedded page may be shown directly in the browser's \"root\" window. When the embedded page has no parent window, it must call =postMessage()= on its own window.\n\nHere are the responsibilities of the UI Consumer and UI Provider in Post Message protocol.\n---++++ The UI Consumer's responsibilities\n   1 Include the Delegated UI Dialog via iframe (i.e setting iframe src to the URI of the Delegated UI Dialog) or via an embedded browser. Append the fragment identifier #oslc-core-postMessage-1.0 to the URL to indicate that Post Message is the desired protocol.\n   1 Add a 'message' listener to the outer window to receive messages from the Delegated UI Dialog.\n   1 Listen for window 'message' events, ignoring events from other sources or not prefixed with \"oslc-response:\"\n   1 When message from Delegated UI Dialog indicates user completed action, free resources and handle action.\n\n---++++ The UI Provider's responsibilities\n   1 Provide Delegated UI Dialog, an HTML page that provides a user interface for resource creation or selection.\n   1 Allow the user to perform resource creation or selection.\n   1 Once the user has created, selected or canceled, send notification using =postMessage()= to the page's parent window, passed in =event.data= string, that is prefixed with \"oslc-response:\" See below for the two possible response formats, one for resource selection and one for creation.\n   1 If the page is not parented, then the message is posted to the page's own window. The page must ignore this message to itself.\n\nThe below !JavaScript code example shows how a UI Provider page would send a response using =postMessage()= and taking into account the fact that some pages are not parented.\n   function respondWithPostMessage(/*string*/ response) {\n      (window.parent | window).postMessage(\"oslc-response:\" + response, \"*\");\n   }\n\n\nNow, the Window Name protocol.\n\n---+++ Window Name Protocol\n\nThe Window Name protocol uses the HTML DOM =window.name= property to communicate the response (reference: Window Object) from the UI Provider to the UI Consumer. This special property of window maintains its value even as the window navigates to a different origin, but the ifame's =window.name= can only be read when the accessing window shares the same origin. For this to happen, when the embedded page is finished it must set the =window.name= and also change the =window.location= to a page with the same origin as the outer frame. This not only allows the UI Consumer to access the result, but also fires an event telling the UI Consumer when to do so. This return location is passed to the embedded page using the =window.name= property.\n\nHere are the responsibilities of the UI Consumer and UI Provider in Window Name protocol.\n\n---++++ The UI Consumer's responsibilities\n\n   1 Include the Delegated UI Dialog via iframe (i.e setting iframe src to the URI of the Delegated UI Dialog) or via an embedded browser. Append the fragment identifier #oslc-core-windowName-1.0 to the URL to indicate that Window Name is the desired protocol.\n   1 On the iframe, set the frame's =window.name= to indicate the Return URL.\n   1 On the iframe, Listen for 'onload' events\n   1 When an 'onload' event occures an the frame's location is equal to the Return URL then read the response from the window.name.\n\nThe following Javascript code illustrates the protocol. The code for the =destroyFrame()=, =handleMessage()= and =displayFrame()= methods are not provided in this example, but should be obvious to a !JavaScript developer. The UI Consumer must provide these methods.\n\n\n    var pickerURL = ... // URL of Provider's Delegated UI Dialog\n    var returnURL = ... // Consumer's Return URL\n\n    var frame = document.createElement('iframe');\n\n   function windowNameProtocol() {\n\n      // Step #1: create iframe with fragment to indicate protocol\n      // Step #2: set the iframe's window.name to indicate the Return URL\n      if (ie > 0) {\n         frame = document.createElement('');\n      } else {\n         frame = document.createElement('iframe');\n         frame.name = returnURL;\n      }\n      frame.src = pickerURL + '#oslc-core-windowName-1.0';\n      frame.width = 450;\n      frame.height = 300;\n\n      displayFrame(frame);\n\n      // Step #3: listen for onload events on the iframe\n      var ie = window.navigator.userAgent.indexOf(\"MSIE\");\n      if (ie > 0) {\n         frame.attachEvent(\"onLoad\", onFrameLoaded);\n      } else {\n         frame.onload = onFrameLoaded;\n      }\n   }\n\n   function onFrameLoaded() {\n      try { // May throw an exception if the frame's location is still a different origin\n\n         // Step #4: when frame's location is equal to the Return URL\n         // then read response and return.\n         if (frame.contentWindow.location == returnURL) {\n            var message = frame.contentWindow.name;\n            destroyFrame(frame);\n            handleMessage(message);\n         }\n\n      } catch (e) {\n         // ignore: access exception when trying to access window name\n      }\n   }\n\n\n---++++ The UI Provider's responsibilities\n\nAs soon as the embedded page has loaded, perform the following:\n\n   1 _Provide Delegated UI Dialog, an HTML page that provides a user interface for resource creation or selection._\n   1 _Read the Return URL from the window.name variable_\n   1 Allow user to perform resource creation or selection.\n   1 Once user has created, selected or canceled, communicate the user's response by setting the window.name variable to the response. See below for the two possible response formats, one for resource selection and one for creation.\n   1 Indicate that user has responded by setting the window.location to the Return URL specified by the UI Consumer.\n\nThe !JavaScript example below shows a UI Provider notifying its UI Consumer after a user has responded.\n\nfunction respondWithWindowName(/*string*/ response) {\n   // Step #2: read the return URL\n   var returnURL = window.name;\n\n   // Step #4: send the response via the window.name variable\n   window.name = response;\n\n   // Step #5: indicate that user has responded\n   window.location = returnURL;\n}\n\n---++ Resource Selection\n\nResource Selection can be used when a UI Consumer wants to allow a user to pick a resource that is managed by an OSLC Service. Using either the Post Message or Window Name protocols defined above, the UI Consumer uses an iframe to embed a selection dialog that is provided by the service, then awaits notification that the user has selected a resource.\n\nTo enable Resource Selection, an OSLC Service *MUST* provide in its Service Resource a value for the =oslc:selectionDialog= property. The property value will include a =oslc:dialogURI= property that indicates the URI of the selection dialog.\n\nRegardless of how the response from the UI Provider is conveyed to the UI Consumer, the response *SHOULD* be formatted as follows:\n\n   * *Name:* =results=\n   * *URI:* =http://open-services.net/ns/core#results=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =rdf:resource=  | zero-or-one | True | Resource | Reference | n/a | URI of the resource selected or created |\n| =oslc:label=  | zero-or-one | True | String | n/a | n/a | Short label describing the resource selected |\n\nAn empty array indicates that the resource selector has been canceled\n\nAn example Resource Selection response:\n{\n    \"oslc:results\" : [{\n            \"oslc:label\": \"Bug 123: Server crash\",\n            \"rdf:resource\": \"http://example.com/bug123\"\n        }, {\n            \"oslc:label\": \"Bug 456: Client hangs on startup\",\n            \"rdf:resource\": \"http://example.com/bug456\"\n        }\n    ]\n}\n\n\n---++ Resource Creation \n\nResource Creation can be used when a UI Consumer wants to allow a user to create a new resource that is managed by an OSLC Service. Using either the Post Message or Window Name protocols defined above, the UI Consumer uses an iframe to embed a creation dialog that is provided by the service, then awaits notification that the user has created a resource.\n\nTo enable Resource Creation, an OSLC Service *MUST* provide in its Service Resource a value for the =oslc:creationDialog= property. The property value will include a =oslc:dialogURI= property that indicates the URI of the creation dialog.\n\nRegardless of how the response from the UI Provider is conveyed to the UI Consumer, the response *SHOULD* be formatted as defined by =oslc:results=\n\nExample:\n{\n    \"oslc:results\" : [ {\n            \"oslc:label\": \"Bug 123: Server crash\",\n            \"rdf:resource\": \"http://example.com/bug123\"\n        }, {\n            \"oslc:label\": \"Bug 456: Client hangs on startup\",\n            \"rdf:resource\": \"http://example.com/bug456\"\n        }\n    ]\n} \n\n---+++ Prefilling Creation Dialogs\n\nService providers *MAY* support receiving a POST request whose content body is a resource representation to the Creation Dialog URI to retrieve a URI that represents the embedded page to be used. Service providers *MUST* respond with a response status of 201 (Created) with the response header =Location= whose value is the URI to request the newly created form. After some elapsed time, service providers *MAY* respond with a 404 (Not Found), 410 (Gone) or 3xx (Redirect) to an HTTP GET request for these URIs.\n\n---++ Dialog Resizing\n\nDelegated UI dialogs receive their initial size (dimensions) based on the =oslc:hintWidth= and =oslc:hintHeight= properties described in =oslc:Dialog= resource description. There are cases where UI Provider recognizes that the initial size of a Delegated UI dialog is not sufficient and needs a way to ask the UI Consumer to resize the dialog. In this section we specify a mechanism that enables dialog resizing, but only when Post Message Protocol is used.\n\nConsumers *MAY* honor a dialog's ability to dynamically resize. Those that do (a) *MUST* use Post Message Protocol, (b) *MUST* use the =oslc:resize= value instead of any static width or height, and and (c) *MUST* register a handler to receive dialog resize messages sent by the dialog Provider and adjust the size of the dialog accordingly.\n\nSince a dialog is allowed to resize itself any number of times, the Consumer *MUST* keep a handler registered and react appropriately each time it received a dialog resize message from that dialog.\n\nUI Providers *SHOULD NOT* request sizes larger than 95% of the current [[http://www.w3.org/TR/CSS2/visuren.html#viewport][viewport]], to avoid covering the entire viewport with the dialog.\n\nHere are the responsibilities of the UI Consumer and UI Provider in dialog resizing.\n\n---+++ The UI Consumer's responsibilities\n\n   1 Include the Delegated UI Dialog via iframe (i.e setting iframe src to the URI of the Delegated UI Dialog) or via an embedded browser.\n   1 Add a 'message' listener to the outer window to receive messages from the Delegated UI Dialog.\n   1 Listen for window 'message' events, ignoring events from other sources or not prefixed with \"oslc-resize:\". Multiple resize 'message' events may be sent while the dialog is visible.\n   1 When message from Delegated UI Dialog indicates user completed action, free resources and handle action.\n\n---+++ The UI Provider's responsibilities\n\n   1 Provide Delegated UI Dialog, an HTML page that provides a user interface for resource creation or selection.\n   1 Allow the user to perform resource creation or selection.\n   1 Once the Provider needs to resize the dialog, send notification using =postMessage()= to the page's parent window, passed in =event.data= string, that is prefixed with \"oslc-resize:\". Multiple resize messages may be sent. See below for the response format.\n   1 If the page is not parented, then the message is posted to the page's own window. The page must ignore this message to itself.\n\nThe below !JavaScript code example shows how a UI Provider page would send a response using =postMessage()= and taking into account the fact that some pages are not parented.\n\n   function respondWithPostMessage(/*string*/ resize_response) {\n      (window.parent | window).postMessage(\"oslc-resize:\" + resize_response, \"*\");\n   }\n\n\nRegardless of how the response from the UI Provider is conveyed to the UI Consumer, the response *SHOULD* be formatted as follows:\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =oslc:hintHeight=  | exactly-one | True | String | n/a | n/a | New dialog height size. Height size *MUST* be expressed in __relative length units__ as defined in the [[http://www.w3.org/TR/2009/CR-CSS2-20090423/syndata.html#length-units ][W3C Cascading Style Sheets Specification (CSS 2.1)]] Em and ex units are interpreted relative to the default system font (at 100% size)  |\n| =oslc:hintWidth=  | exactly-one | True | String | n/a | n/a | New dialog width size. Width size *MUST* be expressed in __relative length units__ as defined in the [[http://www.w3.org/TR/2009/CR-CSS2-20090423/syndata.html#length-units ][W3C Cascading Style Sheets Specification (CSS 2.1)]] Em and ex units are interpreted relative to the default system font (at 100% size)  |\n\nAn example Dialog Resize response with new height of '600px' and a width of '400px':\n{\n    \"oslc:hintHeight\" : \"600px\",\n    \"oslc:hintWidth\" : \"400px\"\n} \n\nThat brings us to the end of the Delegated UI section. Next up, another UI related topic.\n\n---\n \n\n---+ User Interface Previews\n\nOSLC providers *MAY* support a technique known as User Interface (UI) Preview, that can be used to show a user in-context information when displaying a link to a resource, and to show more information when the user's mouse lingers over the link.\n\nOSLC providers which offer UI Preview *MUST* do so in accordance with the [[OslcCoreUiPreview][OSLC Core UI Preview Specification]].\n\n---\n \n\n---+ Authentication\n\nOSLC Services use standard web protocols for authentication. OSLC Services can use HTTP Basic Authentication, OAuth or both.\n\n---++ HTTP Basic Authentication\n\nOSLC Services *MAY* protect resources with HTTP Basic Authentication. OSLC Services that use HTTP Basic Authentication *SHOULD* do so only via SSL.\n\n---++ OAuth Authentication\n\nOSLC Services *MAY* protect resources with OAuth Authentication.\n\n---++ Form Based Authentication\n\nOSLC Services *MAY* use other authentication mechanisms, including those common described as Form Based Authentication. OSLC Services that choose to use other authentication mechanisms are responsible for specifying how those mechanisms work.\n\n---\n \n\n---+ Error Responses\n\nOSLC Services the standard mechanisms of HTTP to report status and error codes to clients. When an error occurs and useful information can be provided to clients OSLC Services *SHOULD* return error information in the body of the response.\n\nOSLC Services *SHOULD* use the Error resource defined below as the basis for forming error responses. OSLC Services *SHOULD* return an Error resource using the same representation requested by the client via the HTTP Accept header.\n\n---++ Conceptual Model \n\nThe following OSLC Defined Resource can be used as the basis for forming an error response.\n\n---+++ Resource: Error\n\n   * *Name*: =Error=\n   * *URI*: =http://open-services.net/ns/core#Error=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =oslc:statusCode= | exactly-one | True | String | n/a | n/a | The HTTP status code reported with the error. |\n| =oslc:message= | exactly-one | True | String | n/a | n/a | An informative message describing the error that occurred. |\n| =oslc:extendedError= | zero-or-one | True | Either | Either | =oslc:ExtendedError= | Extended error information |\n\n---+++ Resource: Extended Error\n\n   * *Name*: =ExtendedError=\n   * *URI*: =http://open-services.net/ns/core#ExtendedError=\n\n| *Prefixed Name* | *Occurs* | *Read-only* | *Value-type* | *Represen-tation* | *Range* | *Description* |\n| =oslc:moreInfo= | zero-or-one | True | Resource | Reference | Any | A resource giving more information on the error *SHOULD* be of an HTML content-type. |\n| =oslc:rel= | zero-or-one | True | String | n/a | n/a | If present and set to 'alternate' then indicates that work-around is provided, behavior for other values is undefined. |\n| =oslc:hintWidth= | zero-or-one | True | String | n/a | n/a | Values *MUST* be expressed in __relative length units__ as defined in the [[http://www.w3.org/TR/2009/CR-CSS2-20090423/syndata.html#length-units ][W3C Cascading Style Sheets Specification (CSS 2.1)]] Em and ex units are interpreted relative to the default system font (at 100% size). |\n| =oslc:hintHeight= | zero-or-one | True | String | n/a | n/a | Values *MUST* be expressed in __relative length units__ as defined in the [[http://www.w3.org/TR/2009/CR-CSS2-20090423/syndata.html#length-units ][W3C Cascading Style Sheets Specification (CSS 2.1)]] Em and ex units are interpreted relative to the default system font (at 100% size). |\n\n---\n \n\n---+ Specification Versioning\n\nOne of the goals of the OSLC initiative is to mitigate or eliminate the need for lock-step version upgrades, where clients or services target one version of a specification and break when new versions are introduced -- requiring all services to be upgraded simultaneously.\n\nIn this section we specify a version header that will enable old \"Version 1\" OSLC clients to continue to work and share the same resource URIs as used by clients that specifically target the Core. And we establish rules that will enable clients to continue to work as new versions of specifications are introduced.\n\n---++ Supporting pre-Core clients\n\nWe anticipate that the OSLC Core and domain specifications will each be versioned independently and each version will be assigned a version number, but we would like to avoid exposing version numbers in OSLC implementations. There is one use case that requires version information to be exposed. We must ensure that old OSLC \"Version 1\" clients continue to work.\n\nTo enable OSLC Service specifications to evolve without breaking existing clients, we introduce an HTTP Header, =OSLC-Core-Version= set to the Core specification version number =\"2.0\"=. We expect clients that target the Core to send this HTTP header.\n   * If the =OSLC-Core-Version= header is present and set to a version that the service can support, then the service *MUST* return a representation that is complies with the specified version.\n   * If the =OSLC-Core-Version= header is present and indicates a specification version that the service cannot support, the service *SHOULD* respond with what it determines is the most compatible version that it can return.\n   * If the =OSLC-Core-Version= header is not present then the OSLC Service *SHOULD* respond by returning a resource that conforms to the earliest or most compatible (as determined by the implementation) specification version's representation. Services that never offered an OSLC Version 1 interface can ignore this restriction.\n   * When returning an OSLC Defined Resource, OSLC Services *MUST* return the =OSLC-Core-Version= header set to the Core specification with which the representation complies.\n\n---++ Rules for new versions of OSLC specifications\n\nWhen specifying a new version of an OSLC specification the rule is this:\n\n*A new version of an OSLC specification is not allowed to introduce changes that will break old clients.*\n\nHere are some guidelines for OSLC workgroups defining new specifications or upgrades to existing ones:\n   * If you believe that you need a property but cannot agree on the value-type, then this is a strong indication that you should not attempt to standardize on the property. Once you decide on a value-type you are stuck with it forever. Wait until you have the scenarios or implementation experience needed to agree on type.\n   * When introducing a new capability in a new version of a specification, e.g. a creation factory, query capability or delegated UI dialog; one that works differently than those specified in the Core spec or older versions of your own specification, you should create a new resource type to represent the service. This will enable old clients to continue to work against old services and new clients to work with your new capabilities.\n   * When defining resources, do not remove, change the meaning or the value-type of any properties that you defined in earlier versions of the specification. You can add new properties but not change those that already exist.\n   * It is possible to relax restrictions on clients, because relaxing restrictions should not break clients. But it is not possible to relax restrictions on services, because clients expect to find the required fields and if they are missing, clients will break.\n   * Before defining a new property within your OSLC domain's namespace consult the list of common properties in [[OSLC Core Spec Appendix A]] to see if using a common property would be more appropriate.\n\n---++ Migrating to the Core Specification\n\nMost of the first OSLC specifications were developed before this Core specification existed and do not implement versioning as described above and so must use some other mechanism to migrate to the OSLC Core v1.0 specification.\n\nOSLC implementations that wish to continue to support old pre-Core OSLC or OSLC v1.0 specifications can do so by keeping the old implementation in place and adding the new OSLC Core v1 implementation with different service provider, query capability and creation factory URIs.\n\n---\n \n\n\n\n---+ OSLC Defined Resource Representations\n\nThis section specifies what resource representations are required for OSLC resources, some requirements for providing representations and some rational for the requirement that OSLC Services provide RDF/XML representations.\n\nOSLC resource representations come in many forms and are subject to standard HTTP mechanisms for content negotiation.\n\nOSLC domain specifications (1) *SHOULD* require the representations needed for the specific scenarios that they are addressing and (2) *SHOULD* recognize that different representations are appropriate for different purposes. For example, browser oriented scenarios might be best addressed by JSON or Atom format representations. For these reasons, OSLC Services *MAY* provide and accept standard or emerging standard formats such as XML, JSON, HTML, Turtle and the Atom Syndication Format.\n\nOSLC domain specifications are also expected to follow common practices and conventions that are in concert with existing industry standards and offer consistency across domains. All of the OSLC specifications are built upon the standard RDF data model, allowing OSLC to align with the W3C's Linked Data initiative. In addition, all OSLC specifications have adopted the convention to illustrate RDF/XML representations and will typically require RDF/XML representations to enable consistency across OSLC implementations. For those reasons, OSLC Services *SHOULD* provide and accept RDF/XML representations for each OSLC resource.\n\nThough the OSLC Core workgroup does provide guidance on how to form RDF/XML representations using a subset of RDF/XML (reference: [[OSLCCoreSpecAppendixRepresentations][Appendix B - Representation Guidance and Examples]]), OSLC clients *SHOULD NOT* assume any specific form of RDF/XML. It is *RECOMMENDED* that OSLC Services also provide an HTML representation for each resource.\n\n---+++ Use standard content-types\n\nNote that existing standard content-types are used, e.g. =application/rdf+xml= and =application/json=, in this document and no new content-types are introduced (except for the one introduced in the [[OslcCoreUiPreview][UI Preview specification]]). Those writing OSLC specifications are strongly encouraged to follow this pattern -- use standard and existing content-types and avoid inventing new content-types for existing formats.\n\nIn past OSLC specifications we defined a specific RDF/XML format for each resource defined and gave each its own content-type. This implied to consumers that each resource had a different format when in reality they were all standard RDF/XML. Using different content-types makes it more difficult to write generic tools, crawlers and other services that work across all data.\n\n---+++ Order of property values insignificant\n\nThis specification defines how OSLC property values are to be represented in a variety of formats. Except in the case of a sorted Query Response, the ordering of property values is insignificant. OSLC clients and service providers *MUST* not place any significance on the ordering of property values in representations.\n\n---+++ Use Absolute URIs\n\nOSLC representations *MUST* use absolute URIs in all cases except XML representations, where the =xml:base= attribute may be used to allow relative URIs to be resolved to absolute form (reference: XML Base).\n\nBefore a resource representation that uses xml:base is posted to an OSLC Service for creation, it may include relative URIs that cannot be resolved until the OSLC Service has received, created and assigned a URI to the new resource.\n\n\n\n---+ Appendix A: Common Properties and Resources\n\nSee separate page [[OSLC Core Spec Appendix A]]\n\n\n\n---+ Appendix B: Representation Guidance and Examples\n\nSee separate page [[OSLCCoreSpecAppendixRepresentations][OSLC Core Spec Appendix B]]\n\n\n\n---+ Appendix C: Guidance on Links and Relationships\n\nSee separate page [[OslcCoreSpecAppendixLinks][OSLC Core Spec Appendix C]]\n\n\n\n---+ Appendix D: References\n\nThese are the specifications referenced by the OSLC Core Specification.\n\n   * BNF [[http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form][Backus-Naur Form]]\n   * CSS 2.1 - [[http://www.w3.org/TR/2009/CR-CSS2-20090908/][Cascading Style Sheets Level 2 Revision 2 v2.1]]\n   * Dublin Core 1.1 - [[http://dublincore.org/documents/2010/10/11/dces/][Dublin Core Metadata Element Set, Version 1.1]]\n   * FOAF - [[http://xmlns.com/foaf/spec/20100809.html][Friend of a Friend (FOAF) v0.98]]\n   * HTML5 Posting Message- [[http://www.w3.org/TR/html5/comms.html#posting-messages][ W3C HTML5 postMessage]]\n   * HTTP 1.1 - [[http://tools.ietf.org/html/rfc2616][Hyper-text Transfer Protocol (HTTP/1.1)]]\n   * OAuth 1.0a - [[http://tools.ietf.org/html/rfc5849][RFC5849 - The OAuth 1.0 Protocol]]\n   * RDF/XML Concepts - [[http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/][RDF/XML Concepts and Abstract Syntax]]\n   * RDF/XML Syntax - [[http://www.w3.org/TR/2004/REC-rdf-syntax-grammar-20040210/][RDF / XML Syntax Specification (Revised)]]\n   * Turtle - [[http://www.w3.org/TeamSubmission/turtle/]]\n   * URI Syntax - [[http://tools.ietf.org/html/rfc3986][URI Generic Syntax]]\n   * Window Object - [[http://www.w3.org/TR/Window/#window-embedding][Window Object 1.0 Window.name]]\n   * XML Namespaces - [[http://www.w3.org/TR/REC-xml-names/][Namespaces in XML 1.0 (Third Edition)]]\n   * XML Base - [[http://www.w3.org/TR/xmlbase/][XML Base (Second Edition)]]\n   * XSD Datatypes - [[http://www.w3.org/TR/xmlschema-2][XML Schema Part 2: Datatypes Second Edition]]\n",
        "tags": []
    },
    {
        "uri": "/../specifications/vocabularies/_index",
        "title": "OSLC Vocabularies",
        "content": "\nThe purpose of this page is to provide a single index of all the vocabulary documents on the OSLC website. Not all these vocabularies are from OASIS Standards. Some are references to current OSLC v2.0 domain specifications that have not yet been migrated to OASIS. Others are still under development and may change. Consult the corresponding specification to learn about its status. The process by which the domain namespaces are mapped to the RDF Schema and HTML documents is documented in the following documents:\n\nOSLC Core URI Naming Guidance\nBest Practice Recipes for Publishing RDF Vocabularies\nOSLC Core 3.0 Part 1: Overview specification#Resource Constraints\n\nThe namespace for each domain is defined in the domain specification.\n\nOSLC version compatibility guidelines specify that updated OSLC vocabularies should be backward compatible. That is, classes and properties can be added, or deprecated (archaic), but may not be changed or removed. Resource shapes on the other hand can be created to constrain these vocabularies for whatever purpose is needed, including the needs of the OSLC specifications themselves. As a result, new vocabularies published on this site should be compatible with the old vocabularies. Therefore, only the most recent version of the vocabularies are listed here, and linked to by the various OSLC core and domain namespace URIs.\n\nNamespaces\n\n| Specification | Namespace | RDF Schema | HTML |\n|---------------|-----------|------------|------|\n| Core 3.0 | http://open-services.net/ns/core | core.rdf | Core 3.0 Vocabulary |\n| Config 1.0 | http://open-services.net/ns/config# | config-vocab.ttl | Configuration Management Vocabulary |\n| RM 2.0 | http://open-services.net/ns/rm# | rm.rdf | Requirements Management Vocabulary |\n| CM 3.0 | http://open-services.net/ns/cm# | change-management-vocab.ttl | Change Management Vocabulary |\n| QM 2.0 | http://open-services.net/ns/qm# | qm.rdf | Quality Management Vocabulary |\n| AM 2.0 | http://open-services.net/ns/am# | am.rdf | Architecture Management Vocabulary |\n| Asset 2.0 | http://open-services.net/ns/asset# | asset.rdf | Asset Management Vocabulary |\n| Automation 2.0 | http://open-services.net/ns/auto# | auto.rdf | Automation Vocabulary |\n| PerfMon 2.0 | http://open-services.net/ns/perfmon# | perfmon.rdf | Performance Monitoring Vocabulary |\n| PROMCODE 1.0 |  |  |  |\n\n",
        "tags": []
    },
    {
        "uri": "/../why/_index",
        "title": "Why OSLC?",
        "content": "\nAs a newcomer to the OSLC community, you might have been pondering over one question, but too shy to ask it aloud:\n\n Why should I invest my time and effort into OSLC?\n\nGreat that you asked! There are many good reasons for you to embrace OSLC and the specific reasons depend on your role. If you are...\n\n.. a Tool Vendor\n\nAs a tool vendor, you need to ensure that your customers can integrate your product with other tools in order to extract the most value from your product. While providing a REST API is a norm nowadays, a developer has to build an integration layer. As every REST API is different, it means extra time reading the documentation, extra time developing plumbing code to perform model transformation, and most importantly, all this needs to be done on a case basis, leading to point-to-point integrations.\n\nOSLC allows you to provide:\n\na uniform self-descriptive REST API;\na linked data model based on standard domains, common in ALM/PLM (RM, QM, CCM, etc.), that you can tailor to your product;\nexchange data in plain JSON with the clients that are not linked-data ready;\nprovide rich UIs from your tool for use in 3rd-party tools for seamless linked data workflow;\nand many other features that your customers would appreciate.\n\nA number of other products used in ALM/PLM already implement OSLC and your OSLC-enabled tool can integrate with many of them without extra development effort.\n\n ..  a Tool Buyer\n\nAs a tool buyer, you have a unique set of requirements towards your toolchain and for many reasons (technical, organisational, financial) a single-vendor solution might not be viable for you. Therefore, one of the most important criteria for procurement of the new software tools is their TCO including the integration costs. Most of the tools come with semi-open proprietary APIs that often lack documentation. Those APIs will incur considerable development costs, often involving highly specialised consultants with a deep knowledge of the tool in question.\n\nTools that come with an OSLC-based API will you to integrate them into your toolchain with less (or none, in many cases) development effort, while performing a deeper integration, at the workflow level.\n\nOSLC reduces the complexity and risk of increasingly complex software infrastructures, and improves the value of software across a broader set of internal and external stakeholders. OSLC-based API is an experience truly free from a vendor lock-in.\n\n.. a Tool User\n\nAs a tool user, you have to switch between a plethora of tools on a daily basis. You often don't see how their integration is done, but you feel that it's done poorly: updates showing up in other tools many hours later, integrations getting broken every other tool update, etc.\n\nWell-implemented OSLC integrations mostly remain backwards-compatible even across major releases. Standardised OSLC APIs often allow vendors to provide a fully supported integration with many other OSLC-compliant tools out of the box. Finally, an OSLC integration can be performed not only at the level of two tool data models, but at the level of your workflow involving those tools. This is possible through the use of delegated UIs, which allow you to interact with another OSLC-compatible tool without leaving your current open tool!\n",
        "tags": [
            "value",
            "why"
        ]
    },
    {
        "uri": "/../workgroups/_index",
        "title": "Workgroups",
        "content": "\nWe have a variety of working groups—here and at various standards organizations—with different and occasionally overlapping interests, roles, and responsibilities.",
        "tags": []
    },
    {
        "uri": "/../workgroups/alm-plm-interoperability",
        "title": "ALM-PLM Interoperability",
        "content": "\nThe working group ALM-PLM Interoperability (2nd edition) aims to define industrial relevant scenarios for interoperability of ALM and PLM engineering environment to indicate gaps and potential extensions to the relevant OASIS OSLC technical committees. It builds on the work of the previous Working Group “ALM-PLM Interoperability (1st edition)” \n\nWiki : \nIssues: \nForum : \nWorkgroup leads : \n",
        "tags": [
            "working group"
        ]
    },
    {
        "uri": "/../workgroups/communications",
        "title": "Communications",
        "content": "\nA working group to discuss, plan, and execute communications about the work of the Open Services for Lifecycle Collaboration (OSLC) community. The workgroup aims to build better visibility within the community of the work of the various workgroups; and to raise awareness of the value of the work of the community within the applications and middleware industry and its customers.\n\nWiki : \nIssues: \nForum : \nWorkgroup leads : \n",
        "tags": [
            "user group"
        ]
    },
    {
        "uri": "/../workgroups/human-factors",
        "title": "Human factors",
        "content": "\nThe Human factors (HF) working group resources will define a set of use cases and scenarios that will feed the concepts necessary for exchange in order facilitate the use of human factors in systems engineering. The term 'systems engineering' is used to describe the interdisciplinary field of engineering that focuses on the design and management of a system over the whole lifecycle.\n\nHF is the application of human factors methods to develop systems with an effective, comfortable and user friendly design. HF seeks to avoid HF issues which are typically problems in which humans do not work with the system in a way as expected thus negatively impacting the overall system performance. When properly applied at the design stage, HF reduces situations where the human does not act or behave as expected. \n\nThe discipline of HF involves many methods such as data collection, task analysis, cognitive task analysis, human error identification, situation awareness analysis and interface analysis techniques. The implementation of these methods and the results they produce must be orchestrated around the existing design process of a project. HF is multidisciplinary and takes place across the entire lifecycle. The implementation of methods can only be done with meaningful input from the system design and for maximum effect; the results must be fed back into that design.\n\nWiki : \nIssues: \nForum : \nWorkgroup leads : \n",
        "tags": [
            "working group"
        ]
    },
    {
        "uri": "/../workgroups/lifecycle-integration-patterns",
        "title": "Lifecycle Integration Patterns",
        "content": "\nThis working group will define a framework to support the creation and consumption of lifecycle patterns that will enable practitioners to apply OSLC specifications and concept and quickly locate solutions to common lifecycle integration challenges.\nExperienced users who have successfully appied OSLC in their environments are invited to share parts of their solution as additional patterns.\n\nWiki : https://github.com/OSLC/lifecycle-integration-patterns/wiki\nIssues: https://github.com/OSLC/lifecycle-integration-patterns/issues\nForum : http://discourse.oslc.co/c/working-groups/lifecycle-integration-patterns\nWorkgroup leads : Rainer Ersch, Wesley Coelho\n",
        "tags": [
            "working group"
        ]
    },
    {
        "uri": "/../workgroups/steering-committee",
        "title": "Steering Committee",
        "content": "\nThe Steering Committee, now operating at OASIS, is the governing body of the OSLC community that approves new workgroups, approves specifications, de-commissions workgroups, and manages other changes in governance or participation across the community.\n\nAt oasis-open.org\n\nWiki : \nIssues: \nForum : \nWorkgroup leads : \n",
        "tags": [
            "working group",
            "governance",
            "oasis"
        ]
    }
]